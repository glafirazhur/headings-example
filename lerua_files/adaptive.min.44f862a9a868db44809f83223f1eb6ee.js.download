"use strict";

/**
 * This file was generated.
 * Please for change somethink use source code in templates folder
 */

var TemplateManager = {};
TemplateManager.getCardTypePopupTemplate = function () {
    return "\n    <div class=\"card-description\">\n        <span><%= data.translate.description %></span>\n         <br/>\n <span><%= data.translate.description2 %></span>\n    </div>\n    <br/>\n   <div class=\"card-description-additional\">\n        <%= data.translate.description3 %>\n    </div>\n  <div class=\"card-description-mobile\">\n        <%= data.translate.description4 %>\n    </div>\n  <div class=\"card-qr\">\n        <img src=\"<%= data.qrCodeUrl %>\"/>\n    </div>\n    <a href=\"<%= data.cardUrl %>\" class=\"card-apple-wallet-link\" target=\"_blank\"></a>";
};
TemplateManager.getAccountCostAnalysisChartLegend = function () {
    return "   \n    <table class=\"pie-legend\">\n        <% for (var i = 0; i < data.dataSet.data.length; i++) { %>\n            <tr>\n                <td>\n                    <span class=\"pie-legend__color\" style=\"background-color:<%= data.dataSet.backgroundColor[i] %>\"></span>\n                </td>\n                <th class=\"pie-legend__name\">\n                    <% if (data.chart.data.labels[i]) { %>\n                        <%= data.chart.data.labels[i] %>\n                    <% } %>\n                </th>\n                <td class=\"pie-legend__prc\"><%= data.dataSet.prc[i] %> %</td>\n                <td>\n                    <span class=\"pie-legend__sum\"><%= data.dataSet.sum[i] %></span>\n                    <%= data.currency %>\n                </td>\n            </tr>\n            <tr><td colspan=\"4\"><hr class=\"dash\"></td></tr>\n        <% } %>\n    </table>";
};

TemplateManager.getAuthModalTemplate = function () {
    return "\n    <div id=\"authModal\" class=\"fancybox-modal auth-modal\">\n        <div class=\"title\"><%= data.translate.title %></div>\n        <div class=\"spinner-ajax loading\">\n            <div class=\"spinner-picture\"></div>\n        </div>\n        <div class=\"auth-module\">\n            <iframe scrolling=\"no\"\n                    id=\"oauth-iframe\"\n                    class=\"oauth-iframe\"\n                    data-init-url=\"<%= data.loginIframeUrl %>\"\n                    data-home-path=\"<%= data.homePath %>\">\n                   \n            </iframe>\n            <div class=\"auth-additional\">\n                <a class=\"small fancybox-forgot\" data-fancybox-forgot data-captcha-load-password href=\"javascript:void(0);\">\n                    <%= data.translate.lost %>\n                </a>\n            </div>\n            <div class=\"auth-additional\"><%= data.translate.additional %></div>\n            <div class=\"auth-additional\">\n                <a href=\"<%= data.registerPath %>\">\n                    <%= data.translate.registration %>\n                </a></div>\n        </div>\n    </div>"
};

TemplateManager.forgotPasswordTemplate = function () {
    return "\n    <div id=\"forgotModal\" class=\"fancybox-modal forgot-password-modal forgot-password\">\n<div class=\"title\"><%= data.translate.title %></div>\n        <div class=\"forgot-password__error\" data-js-forgot-error><%= data.translate.errorPassword %></div>\n        <div class=\"forgot-password__error forgot-password__error--mail\" data-js-forgot-error-mail>\n            <%= data.translate.existText %>\n            <a class=\"standard-green-link\" href=\"<%= data.registerPath %>\">\n            <%= data.translate.regLink %>\n            </a>\n            .\n        </div>\n        <div class=\"forgot-password__success\" data-js-forgot-success>\n            <%= data.translate.sendedText %>\n        </div>\n        <div class=\"spinner-ajax\">\n            <div class=\"spinner-picture\"></div>\n        </div>\n <form data-js-forgot-form action=\"<%= data.forgotPath %>\" method=\"post\">\n            <label for=\"forgot-password-input\"><%= data.translate.labelText %>:</label>\n            <input type=\"text\" id=\"forgot-password-input\" class=\"form-control text-input\" value=\"\" data-js-forgot-input>\n<div class=\"help-block\"><%= data.translate.emailError %></div>\n        <script src=\"https://www.google.com/recaptcha/api.js?onload=onloadCallbackForgotPassword&render=<%=data.reCapturePublicKey%>\" async defer></script>\n        <input style=\"display: none;\" type=\"text\" id=\"g-recaptcha-response\" name=\"g-recaptcha-response\">\n        <button data-js-forgot-btn type=\"submit\" class=\"forgot-password__button green-button-reg full-width\" disabled=\"disabled\"><%= data.translate.btnText %></button>\n        </form>\n    </div>"
};

TemplateManager.resetPasswordTemplate = function () {
    return "<div id=\"resetPasswordModal\" class=\"fancybox-modal reset-password\"> \n        <div class=\"title reset-password__title\"><%= data.translate.title %></div>\n        <div class=\"reset-password-success success-message\">\n            <span class=\"reset-password__success-text\">\n                   <%= data.translate.successText %>\n            </span> \n            <% if (data.isUserAuth) { %>\n                <a class=\"green-button-reg reset-password__button\" href=\"<%= data.lkPath %>\" >\n                    <%= data.translate.goToLk %>\n                </a>\n            <% } %>\n        </div>\n        <div class=\"reset-password-form\" data-js-reset-password-form>\n            <div>\n                <label for=\"reset-password-new\"><%= data.translate.passwordText %>:</label>\n                <input type=\"password\" id=\"reset-password-new\" class=\"form-control reset-password__input text-input reset-password-new\" value=\"\">\n                <div class=\"help-block help-block-reg-error reset-password__hint\"></div>\n            </div>\n            <div>\n                <label for=\"reset-password-new-repeat\"><%= data.translate.repeatText %>:</label>\n                <input type=\"password\" id=\"reset-password-new-repeat\"\n                       class=\"form-control text-input reset-password-new-repeat reset-password__input\" value=\"\">\n                <div class=\"help-block help-block-equal-error reset-password__hint\"><%= data.translate.passwordError %></div>\n            </div>\n            <button disabled=\"disabled\" class=\"green-button-reg full-width reset-password-btn\"><%= data.translate.btnText %></button>\n        </div>\n    </div>"
};

TemplateManager.getLkMenuTemplate = function () {
    return "<div class=\"lk-menu__wrapper\" data-js-lk-menu-wrapper>\n        <div class=\"lk-menu\">\n            <div class=\"lk-menu__mobile-title\">\n                <div class=\"lk-menu__mobile-title-text\">\n                    <span class=\"lm icon-mobile-lk\"></span>\n                    <span><%= data.translate.lk %></span>\n                </div>\n                <div class=\"lk-menu__mobile-title-close\" data-js-close-lk-menu>\n                    <span class=\"lm icon-close-3\"></span>\n                    <span><%= data.translate.close %></span>\n                </div>\n            </div>\n            <ul class=\"lk-menu__nodes\">\n                <li class=\"lk-menu__node\">\n                    <span class=\"lm icon-calc-win\"></span>\n                    <a class=\"lk-menu__text-item\" href=\"<%= data.prefix %><%= data.postfix %>\">\n                        <span class=\"lk-menu__mobile-text\"><%= data.translate.main2 %></span>\n                    </a>\n                </li>\n                <li class=\"lk-menu__node\">\n                        <span class=\"lm icon-shop-list\"></span>\n                        <a class=\"lk-menu__text-item\" href=\"<%= data.prefix %>shop-list<%= data.postfix %>\">\n                            <%= data.translate.shopList %>\n                        </a>\n                    </li>\n                               <% if (data.showPurchaseHistory) { %>\n                    <li class=\"lk-menu__node\">\n                        <span class=\"lm icon-basket-time\"></span>\n                        <a class=\"lk-menu__text-item\" href=\"<%= data.prefix %>purchase_history<%= data.postfix %>\">\n                            <%= data.translate.history %>\n                        </a>\n                    </li>\n                <% } %>\n                <% if (data.showHistoryReturns) { %>\n                    <% if (data.isServiceCard || data.isProfCard) { %>\n                        <li class=\"lk-menu__node\">\n                            <span class=\"lm icon-bag\"></span>\n                            <a class=\"lk-menu__text-item\" href=\"<%= data.prefix %>history_returns<%= data.postfix %>\">\n                                <%= data.translate.historyReturn %>\n                            </a>\n                        </li>\n                    <% } %>\n                <% } %>\n                <% if (data.showCostAnalysis) { %>\n                    <% if (data.isServiceCard || data.isProfCard) { %>\n                        <li class=\"lk-menu__node\">\n                            <span class=\"lm icon-sign\"></span>\n                            <a class=\"lk-menu__text-item\" href=\"<%= data.prefix %>cost_analysis<%= data.postfix %>\">\n                                <%= data.translate.costAnalysis %>\n                            </a>\n                        </li>\n                    <% } %>\n                <% } %>\n<% if (data.showServiceHistory) { %>\n                    <% if (data.isServiceCard || data.isProfCard) { %>\n                        <li class=\"lk-menu__node\">\n                            <span class=\"lm icon-kluch\"></span>\n                            <a class=\"lk-menu__text-item\" href=\"<%= data.prefix %>services<%= data.postfix %>\">\n                                <%= data.translate.services %>\n                            </a>\n                        </li>\n                    <% } %>\n                <% } %>\n                <li class=\"lk-menu__node\">\n                    <span class=\"lm icon-personal-data\"></span>\n                    <a class=\"lk-menu__text-item\" href=\"<%= data.prefix %>info<%= data.postfix %>\">\n                        <%= data.translate.info %>\n                    </a>\n                </li>\n                <li class=\"lk-menu__node\">\n                    <span class=\"lm icon-car2\"></span>\n                    <a class=\"lk-menu__text-item\" href=\"<%= data.prefix %>addresses<%= data.postfix %>\">\n                        <%= data.translate.addresses %>\n                    </a>\n                </li>\n                <li class=\"lk-menu__node\">\n                    <span class=\"lm icon-personal-data\"></span>\n                    <a class=\"lk-menu__text-item\" href=\"<%= data.prefix %>info/changepass<%= data.postfix %>\">\n                        <%= data.translate.changepass %>\n                    </a>\n                </li>\n                <% if (!data.isProfCard) { %>\n                    <li class=\"lk-menu__node\">\n                        <span class=\"lm icon-personal-data\"></span>\n                        <a class=\"lk-menu__text-item\" href=\"<%= data.prefix %>info/changeemail<%= data.postfix %>\">\n                            <%= data.translate.changeemail %>\n                        </a>\n                    </li>\n                <% } %>\n                <% if (data.isProfCard && data.showToolsRent) { %>\n                    <li class=\"lk-menu__node\">\n                        <span class=\"lm icon-list-4\"></span>\n                        <a class=\"lk-menu__text-item tool-rents-link\" href=\"<%= data.prefix %>tool_rents<%= data.postfix %>\">\n                            <%= data.translate.toolRents %>\n                        </a>\n                    </li>\n                <% } %>\n                <% if (!data.isProfCard) { %>\n                    <li class=\"lk-menu__node\">\n                        <span class=\"lm icon-watch\"></span>\n                        <a class=\"lk-menu__text-item viewed-products-link\" href=\"<%= data.prefix %>viewed-products<%= data.postfix %>\">\n                            <%= data.translate.viewedProducts %>\n                        </a>\n                    </li>\n                <% } %>\n                <% if (data.showTaxDeduction) { %>\n                    <% if (data.isServiceCard) { %>\n                        <li class=\"lk-menu__node\">\n                            <span class=\"lm icon-nalog\"></span>\n                            <a class=\"lk-menu__text-item\" href=\"<%= data.prefix %>nalog<%= data.postfix %>\">\n                                <%= data.translate.nalog %>\n                            </a>\n                        </li>\n                    <% } %>\n                <% } %>\n                <li class=\"lk-menu__node\">\n                    <span class=\"lm icon-calc-ent\"></span>\n                    <span class=\"lk-menu__text-item logout\"\n                          data-js-lk-logout\n                          data-logout-url=\"<%= data.logoutUrl %>\"\n                          data-resource=\"<%= data.prefix %>jcr:content/logoutServlet<%= data.postfix %>\">\n                        <span class=\"lk-menu__mobile-text\">\n                            <%= data.translate.logout2 %>\n                        </span>\n                    </span>\n                </li>\n            </ul>\n            <% if (data.isServiceCard) { %>\n                <div class=\"card-info\">\n                    <div class=\"service-card-img\"></div>\n                </div>\n            <% } %>\n            <% if (data.showPersonalManager) { %>\n                <% if (data.isProfCard) { %>\n                    <div class=\"card-info\">\n                        <div class=\"prof-card-img\"></div>\n                        <div class=\"card-manager\">\n                            <div class=\"title\">\n                                <%= data.translate.manager %>\n                            </div>\n                            <div class=\"manager-info\">\n                                <div class=\"manager-location\">\u041B\u0435\u0440\u0443\u0430 \u041C\u0435\u0440\u043B\u0435\u043D \u0420\u043E\u0441\u0442\u043E\u0432-\u041C\u0435\u0433\u0430</div>\n                                <div>\u0410\u043D\u0434\u0440\u0435\u0439 \u041D\u043E\u0432\u0438\u043A\u043E\u0432</div>\n                                <div class=\"manager-phone\">+7 (863) 204-44-66 \u0434\u043E\u0431. 07806</div>\n                            </div>\n                            <div class=\"manager-info\">\n                                <div class=\"manager-location\">\u041B\u0435\u0440\u0443\u0430 \u041C\u0435\u0440\u043B\u0435\u043D \u0420\u043E\u0441\u0442\u043E\u0432 \u041E\u0440\u0431\u0438\u0442\u0430\u043B\u044C\u043D\u0430\u044F</div>\n                                <div>\u0412\u043B\u0430\u0434\u0438\u043C\u0438\u0440 \u0413\u0430\u043B\u0443\u0448\u043A\u043E</div>\n                                <div class=\"manager-phone\">+7 (863) 204-44-66 \u0434\u043E\u0431. 14500</div>\n                            </div>\n                            <div class=\"manager-info\">\n                                <div class=\"manager-location\">\u041B\u0435\u0440\u0443\u0430 \u041C\u0435\u0440\u043B\u0435\u043D \u041A\u0430\u043B\u0438\u043D\u0438\u043D\u0433\u0440\u0430\u0434</div>\n                                <div>\u0415\u0432\u0433\u0435\u043D\u0438\u0439 \u0415\u0448\u0442\u043E\u043A\u0438\u043D</div>\n                                <div class=\"manager-phone\">+7 (963) 350-47-70</div>\n                            </div>\n                        </div>\n                    </div>\n                <% } %>\n            <% } %>\n        </div>\n    </div>";
};

TemplateManager.getErrorFeedbackServer = function() {
    return "<div class=\"reg-form-error\">\n        <%= data.translate.subscribeError %>\n    </div>"
};

TemplateManager.getErrorFeedbackForm = function () {
    return "<div class=\"reg-form-error\">\n        <%= data.translate.errorMessage %>\n    </div>"
};

TemplateManager.getSuccessFeedbackForm = function() {
    return "<div id=\"successForm\"       class=\"successFeedbackForm\">\n        <h4><%= data.translate.successMessage %></h4>\n    </div>"
};

TemplateManager.getErrorRegistrationMail = function () {
    return "<div class=\"reg-form-error\" data-js-reg-form-error>\n        <%= data.translate.errorText %>\n        <span class=\"green-link green-link--pointer\" data-js-reg-auth>\n            <%= data.translate.errorAuth %>\n        </span>\n        <%= data.translate.errorOr %>\n        <span class=\"green-link fancybox-forgot green-link--pointer\"  data-fancybox-forgot data-captcha-load-password >\n            <%= data.translate.errorRepair %>\n        </span>\n    </div>"
};

TemplateManager.getErrorRegistrationServer = function () {
    return "<div class=\"reg-form-error\" data-js-reg-form-error>\n        <%= data.translate.serverErrorText %>\n    </div>"
};

TemplateManager.getSubscriptionModal = function() {
    return "<div id=\"subscriptionModal\" class=\"fancybox-modal subscribe-modal\">\n        <div class=\"subscribe-popup-big-text\">\n            <div class=\"button-top-text\"><%= data.translate.topText %></div>\n            <div class=\"button-bottom-text\"><%= data.translate.bottomText %></div>\n        </div>\n        <div class=\"subscribe-popup-small-text\">\n            <%= data.translate.smallText %>\n        </div>\n </div>"
};

TemplateManager.getBasketDeliveryBlockTemplate = function () {
    return "\n    <span class=\"lm icon-services delivery-block__config\"></span>\n    <% for (var i = 0; i < data.groups.length; i++) { %>\n        <div class=\"delivery-block\" data-js-delivery-block>\n            <div class=\"delivery-group\" data-js-delivery-group>\n                <div class=\"delivery-title delivery-block__title\" data-js-delivery-block-title>\n                    <div class=\"delivery-group-icon\">\n                        <span\n                            class=\"lm <%= data.groups[i].icon %> delivery-group-icon\">\n                        </span>\n                    </div>\n                    <span class=\"delivery-title-text\"><%= data.groups[i].title %></span>\n                </div>\n                <div class=\"delivery-items hidden delivery-block__items\" data-js-delivery-items>\n                    <% for (var j = 0; j < data.groups[i].items.length; j++) { %>\n                        <div class=\"delivery-item <%= data.groups[i].items[j].style %>\"\n                             data-code=\"<%= data.groups[i].items[j].deliveryMode %>\"\n                             data-available=\"<%= data.groups[i].items[j].available %>\"\n                             data-js-delivery-option>                                    \n                            <div class=\"delivery-item-icon\">\n                                <span class=\"lm icon-radio-unchecked\"></span>\n                            </div>\n                            <div class=\"delivery-block__icon\">\n                                <span class=\"<%= data.groups[i].items[j].icon %>\"></span>\n                            </div>\n                            <div class=\"delivery-block__text\">\n                                <%= data.groups[i].items[j].text %>\n        \n                                <% if (data.groups[i].items[j].deliveryMode === 'PICKUP_POINT') { %>\n                                      <span class=\"delivery-block__pvz-warning\"> (<%= data.pvzWarning %>) </span>\n                                <% } %>\n                            </div>\n                        </div>\n                    <% } %>\n                </div>\n            </div>\n        </div>\n    <% } %>";
};
TemplateManager.getBasketHeaderEmptyProductsTemplate = function () {
    return "\n    <div class=\"basket-empty-template\">\n        <div class=\"basket-list\" data-js-basket-header>\n            <div class=\"basket-list-empty hidden\" data-js-basket-list-empty>\n                <div class=\"header\"><%= data.basketEmptyCartTitle %></div>\n                <div class=\"text\"><%= data.basketEmptyCartText %></div>\n            </div>\n        </div>\n    </div>";
};
TemplateManager.getShopListHeaderEmptyProductsTemplate = function () {
    return "\n    <div class=\"shop-list-empty-template hidden\" data-js-shop-list-empty>\n        <div class=\"shopping-list\">\n            <div class=\"shop-list-empty\">\n                <div class=\"header\"><%= data.shoppingListEmptyHeader %></div>\n                <div class=\"text\"><%= data.shoppingListEmptyAdvice %></div>\n                <div class=\"text\"><%= data.shoppingListEmptyReserve %></div>\n            </div>\n        </div>\n    </div>";
};
TemplateManager.getBasketHeaderTemplate = function () {
    return "\n    <div class=\"basket-list\" data-js-basket-header>\n        <div class=\"basket-not-empty\" data-js-non-empty-basket-header>\n            <div class=\"card-quick-scroll scroll mCustomScrollbar\" data-js-basket-header-scroll>\n                <%= data.itemsHtml %>\n            </div>\n            <div class=\"card-quick-total\">\n                <span class=\"card-quick-total-qt\">\n                     <%= getDictMessage('shopping-list.total-products') %> :\n                     <span class=\"products-count\" data-js-basket-header-products-count></span>\n                </span>\n                <span class=\"card-quick-total-sum hidden\" data-js-basket-header-sum-wrapper>\n                     <%= getDictMessage('shop-list.on-sum') %>:\n                     <span class=\"fractional-currency\"\n                          data-js-basket-header-sum>\n                     </span>\n                     <span class=\"currency\"><%= getDictMessage('currency') %></span>\n                </span>\n                <a href=\"<%= data.basketPageUrl %>\" class=\"btn red-button basket-list-link\">\n                    <%= getDictMessage('basket.go-to-page') %>\n                </a>\n            </div>\n       </div>\n    <div>";
};
TemplateManager.getBasketHeaderItemTemplate = function () {
    return "\n        <div data-rel=\"js-basket-min-product-item\" class=\"card-item sl-card-id-<%= data.product.article %>\"\n             data-ga-root\n    data-model-id=\"<%= data.product.modelCode %>\"\n         data-product-id=\"<%= data.product.article %>\"\n             data-product-name=\"<%= data.product.displayedName %>\"\n             data-product-price=\"<%= data.product.priceInt %>.<%= data.product.priceFractional %>\"\n             data-product-location=\"<%= data.product.gtmEventLocation %>\"\n             data-product-category-id=\"<%= data.product.familyId %>\"\n             data-product-weight=\"<%= data.product.weight %>\"\n             data-product-brand=\"<%= data.product.brand %>\"\n             data-product-dimension65=\"<%= data.product.productPriceCategory %>\"\n             data-division-id=\"<%= data.product.departmentId %>\"\n             data-division=\"<%= data.product.department %>\"\n             data-sub-division-id=\"<%= data.product.subDepartmentId %>\"\n             data-sub-division=\"<%= data.product.subDepartment %>\"\n             data-category-id=\"<%= data.product.categoryId %>\"\n             data-unit=\"<%= data.product.unitOfMeasurement %>\"\n             data-category=\"<%= data.product.category %>\"\n             data-sub-category-id=\"<%= data.product.subCategoryId %>\"\n             data-sub-category=\"<%= data.product.subCategory %>\"\n             data-count=\"<%= data.quantity %>\"\n             data-price=\"<%= data.product.price %>\"\n             data-product-gamma=\"<%= data.product.gamma %>\"\n             data-product-color=\"<%= data.product.color %>\"\n             data-product-length=\"<%= data.product.length %>\"\n             data-product-width=\"<%= data.product.width %>\"\n             data-product-height=\"<%= data.product.height %>\"\n             data-product-material=\"<%= data.product.material %>\"\n             data-product-stock-value=\"<%= data.product.stockValue %>\"\n             data-product-web-saleable=\"<% data.product.webSaleable %>\"\n             data-product-has-linked-how-tos=\"<%= Number(!_.isEmpty(data.product.linkedHowTo)) %>\"\n             data-crosssell-ids=\"<%= _.isNotEmpty(data.product.crosssellIds) ? data.product.crosssellIds.join(',') : '' %>\"\n             data-similar-ids=\"<%= _.isNotEmpty(data.product.similarIds) ? data.product.similarIds.join(',') : '' %>\"\n             data-place=\"basket-header\">\n        \n            <div class=\"lm icon-delete\" title=\"<%= getDictMessage('are-you-sure') %>\" data-js-basket-header-icon-delete></div>        \n            <div class=\"card-item-picture\">\n                <a class=\"card-info-tooltip\" href=\"<%= data.product.url %>\" title=\"<%= data.product.displayedName %>\"\n                   data-js-product-link>\n                    <img src=\"<%= data.product.mainPhoto %>\" alt=\"\">\n                </a>\n            </div>\n            <div class=\"card-item-desc\">\n                <div class=\"card-item-name\">\n                    <a href=\"<%= data.product.url %>\" data-js-product-link>\n                        <%= data.product.displayedName %>\n                    </a>\n                </div>\n                <div class=\"card-item-article\">\n                    <div class=\"characteristic-wrapper\">\n                        <span class=\"characteristic\"><%= getDictMessage('SKU:') %></span> <%= data.product.article %>\n                    </div>\n                    <div class=\"characteristic-wrapper\">\n                        <span class=\"characteristic\"><%= getDictMessage('product-weight') %></span><%= data.product.weight %>\n                        <%= getDictMessage('kg') %>\n                    </div>\n                </div>\n            </div>\n            <div class=\"card-item-total\">\n                <div class=\"card-item-sum\">\n                    <p class=\"card-item-sum-price\">\n                        <span class=\"price-int\"><%= data.product.priceInt || 0 %></span>\n                        <span class=\"price-separator\"><%= getDictMessage('price-separator') %></span>\n                        <span class=\"price-fractional\"><%= data.product.priceFractional %></span>\n                        <span class=\"currency\"><%= getDictMessage('currency') %></span>\n                        <% if (data.product.formattedPriceInt) { %>\n                            <span class=\"unit\">/ <%= getDictMessage(data.product.priceUnit) %></span>\n                        <% } %>\n                    </p>\n                </div>\n                <div class=\"counter-header pull-left\">\n                    <%= data.counterHtml %>\n                </div>\n            </div>\n        </div>";
};     
TemplateManager.getBasketItemButtonsTemplate = function () {
    return "\n   <% if (data.available) { %>\n        <div class=\"available-buttons buttons\" data-js-available-buttons>\n            <div class=\"additional-button-wrapper\" data-js-additional-button-wrapper>\n                <div class=\"btn grey-button additional-button <%= data.crosssellsDisabled ? 'disabled' : '' %>\" data-js-additional-button>\n                    <span class=\"lm icon-ar2-down additional\" data-js-additional-icon-down></span><%= data.i18n.basketAdditionalProducts %>\n                </div>\n            </div>\n            <div class=\"btn grey-button pull-right buy-later-btn\" data-js-buy-later-btn>\n                <span class=\"lm icon-shopping-list later\"></span><%= data.i18n.basketBuyLater %>\n            </div>\n        </div>\n    <% } %>\n    <div class=\"unavailable-buttons hidden\" data-js-unavailable-buttons>\n        <div class=\"buttons\">\n            <% if (data.showBuyStockBtn) { %>\n            <div class=\"btn grey-button bold-border-button pull-right buy-stock-btn\" data-js-buy-stock-btn\n                 data-buy-quantity=\"<%= data.item.stock %>\">\n                <span class=\"lm icon-basket\"></span><%= data.i18n.basketBuyStock %> <%= data.item.stock %> <%= data.unitOfMeasurement %>\n            </div>\n            <% } %>\n            <% if (data.showFindAnalogBtn) { %>\n            <div class=\"btn grey-button bold-border-button pull-right find-analog-btn <%= data.similarsDisabled ? 'disabled' : '' %>\" data-js-find-analog-btn>\n                <span class=\"lm icon-refresh\"></span><%= data.i18n.basketFindAnalogBut %>\n            </div>\n            <% } %>\n            <div class=\"btn grey-button pull-right buy-later-btn\" data-js-buy-later-btn>\n                <span class=\"lm icon-shopping-list later\"></span><%= data.i18n.basketBuyLater %>\n            </div>\n        </div>\n    </div>";
};
TemplateManager.getBasketItemTemplate = function () {
    return "\n     <div data-rel=\"product-item\"\n         class=\"basket-item item-code-<%= data.product.article %> <%= data.availabilityClasses %> <%= data.unavailable%>\"\n         data-js-basket-item\n         data-ga-root\n         data-product-id=\"<%= data.product.article %>\"\n         data-product-name=\"<%= data.product.displayedName %>\"\n         data-product-price=\"<%= data.product.priceInt %>.<%= data.product.priceFractional %>\"\n         data-product-location=\"<%= data.product.gtmEventLocation %>\"\n         data-product-category-id=\"<%= data.familyId %>\"\n         data-product-weight=\"<%= data.product.weight %>\"\n         data-product-brand=\"<%= data.product.brand %>\"\n         data-product-dimension65=\"<%= data.product.productPriceCategory %>\"\n         data-division-id=\"<%= data.product.departmentId %>\"\n         data-division=\"<%= data.product.department %>\"\n         data-sub-division-id=\"<%= data.product.subDepartmentId %>\"\n         data-sub-division=\"<%= data.product.subDepartment %>\"\n         data-category-id=\"<%= data.product.categoryId %>\"\n         data-category=\"<%= data.product.category %>\"\n         data-sub-category-id=\"<%= data.product.subCategoryId %>\"\n         data-sub-category=\"<%= data.product.subCategory %>\"\n         data-product-category=\"<%= data.product.category %>\"\n         data-unit=\"<%= data.product.unitOfMeasurement %>\"\n         data-count=\"<%= data.item.quantity %>\"\n         data-price=\"<%= data.item.price %>\"\n         data-unavailable=\"<%= data.unavailable %>\"\n         data-place=\"<%= data.place %>\"\n         data-reason=\"<%= data.reason %>\"\n         data-unavailable-group=\"<%= data.unavailableGroup %>\"\n         data-found-in-other-delivery=\"<%= data.foundInOtherDelivery %>\"\n         data-product-gamma=\"<%= data.product.gamma %>\"\n         data-product-color=\"<%= data.product.color %>\"\n         data-product-length=\"<%= data.product.length %>\"\n         data-product-width=\"<%= data.product.width %>\"\n         data-product-height=\"<%= data.product.height %>\"\n         data-product-material=\"<%= data.product.material %>\"\n         data-product-stock-value=\"<%= data.item.stock %>\"\n         data-unit-step=\"<%= data.product.measures ? data.product.measures.step : 1 %>\" \n         data-unit-min=\"<%= data.product.measures ? data.product.measures.min: 1 %>\" \n         data-unit-max=\"<%= data.product.measures ? data.product.measures.max: 999 %>\"\n         data-product-web-saleable=\"<%= data.product.webSaleable %>\"\n         data-product-has-linked-how-tos=\"<%= Number(!_.isEmpty(data.product.linkedHowTo)) %>\"\n         data-crosssell-ids=\"<%= _.isNotEmpty(data.product.crosssellIds) ? data.product.crosssellIds.join(',') : '' %>\"\n         data-similar-ids=\"<%= _.isNotEmpty(data.product.similarIds) ? data.product.similarIds.join(',') : '' %>\">\n\n        <div class=\"basket-item-content\">\n            <div class=\"product-image\">\n                <a href=\"<%= data.product.url %>\" target=\"_blank\" class=\"center-block product-link\" data-js-product-link>\n                    <img src=\"<%= data.mainPhoto %>\" class=\"img-responsive\"/>\n                </a>\n            </div>\n\n            <div class=\"item-info\">\n                <h2>\n                    <a href=\"<%= data.product.url %>\" target=\"_blank\" class=\"product-link\" data-js-product-link>\n                        <span class=\"product-displayed-name\">\n                            <%= data.product.displayedName %>\n                        </span>\n                    </a>\n                </h2>\n\n                <p class=\"info unavailable-info-type <%= data.unavailableInfoClass %> hidden\" data-js-unavailable-info-type><%= data.reasonText %></p>\n\n                <p class=\"common-info\" data-js-common-info>\n                    <%= data.i18n.shoppingListVendorCode %>:\n                    <span class=\"product-article\"><%= data.product.article %></span>\n                    <%= data.i18n.productWeight %><span class=\"product-weight\"><%= data.formatted.weight %></span>\n                </p>\n                <p class=\"unavailable-price\">\n                    <span class=\"price\"><%= data.formatted.unavailablePrice %></span>\n                    <span class=\"price-unit\">\n                        <span class=\"currency\"><%= data.currency %></span>\n                        <span class=\"divider\">/</span>\n                        <span class=\"unit\"><%= data.unit %></span>\n                    </span>\n                </p>\n                <div class=\"delivery-options-wrapper\">\n                    <%= data.deliveryOptions %>\n                </div>\n            </div>\n\n            <div class=\"clearfix visible-xs-block\"></div>\n            <div class=\"product-counter\">\n                <div class=\"product-quantity-wrapper\" data-js-basket-product-quantity-wrapper>\n                    <%= data.counterHtml %>\n                    <div class=\"quantity hidden\" data-js-product-quantity>\n                        <div class=\"arrow\"></div>\n                        <span class=\"stock-attr\"><%= data.i18n.basketOnStorage %></span>                        \n                        <span class=\"stock-value\" data-stock=\"<%= data.item.stock %>\" data-js-stock-value>\n                            <%= data.item.stock %>\n                        </span>\n                        <span class=\"unit\"><%= data.formatted.priceUnit %></span>\n                    </div>\n                </div>\n\n                <% if (data.showUnit) { %>\n                    <div class=\"unit-wrapper <%= data.readonly %>\"><%= data.unit %></div>\n                <% } %>\n            </div>\n\n            <div class=\"item-sum-wrapper pull-right  <%= data.sumBlockAdditionalClass %>\">\n                <p class=\"item-price\"><%= data.formatted.price %></p>\n                <p class=\"item-total-price\">\n                    <span class=\"price-mark-up\" data-js-price-markup></span>\n                    <span class=\"basket-item-price-currency\"><%= data.i18n.basketCurrencyLabel %></span>\n                </p>\n            </div>\n\n            <div class=\"item-delete pull-right\" data-js-basket-item-delete-btn>\n                <a class=\"lm icon-close2 item-delete-button pointer\"></a>\n            </div>\n\n            <% if (data.unavailableGroup == '1' || data.unavailableGroup == '2') { %>\n                <div class=\"buttons-inner-wrapper\">\n                    <%= data.buttonsHtml %>\n                </div>\n            <% } %>\n        </div>\n\n        <% if (!data.unavailable) { %>\n            <div class=\"buttons-wrapper\">\n                <%= data.buttonsHtml %>\n            </div>\n        <% } %>\n\n        <div class=\"crosssell-container hidden\" data-js-crosssell-container>\n            <div class=\"similar-spinner\">\n                <div class=\"spinner-ajax\" data-js-crosssell-spinner>\n                    <div class=\"spinner-picture\"></div>\n                </div>\n            </div>\n        </div>\n    </div>";
};
TemplateManager.getBasketUnavailablePopoverTemplate = function () {
    return "\n        <div class=\"popover basket-unavailable-popover\" data-delivery-mode=\"<%= data.deliveryMode %>\" \n        data-js-basket-unavailable-popover>\n            <div class=\"arrow\"></div>\n            <div class=\"popover-inner\">\n                <div class=\"popover-content\"></div>\n            </div>\n        </div>";
};
TemplateManager.getBasketWeightExceededTemplate = function () {
    return "   \n    <div class=\"weight-exceeded\">\n        <%= data.message %> <br>\n    </div>";
};
TemplateManager.getDeliveryOptionIconTemplate = function () {
    return "\n     <p class=\"delivery-options\">\n        <span class=\"lm <%= data.icon %>\"></span>\n        <span class=\"delivery-icon-title\"><%= data.title %></span>\n    </p>";
};
TemplateManager.getUnavailablePopupItemTemplate = function () {
    return "\n    <div class=\"unavailable-obj-item\" data-id=\"\">\n        <div class=\"unavailable-obj-item__picture\">\n            <img src=\"<%= data.image %>\" alt=\"\">\n        </div>\n        <div class=\"unavailable-obj-item__name\" data-js-item-name><%= data.displayedName %></div>\n    </div>";
};     
TemplateManager.getUnavailableProductsTemplate = function () {
    return "   \n    <div id=\"unavailableProductsPopup\" class=\"fancybox-modal unavailable-objs\">\n        <div class=\"unavailable-objs__title\">\n            <%= data.title %>\n        </div>\n        <div class=\"unavailable-objs__sub-title\">\n            <%= data.subtitle %>\n        </div>\n        <div class=\"unavailable-objs__content\" data-js-objs-content></div>\n\n        <ul class=\"owl-carousel\" data-js-elbrus-carousel></ul>\n\n        <div class=\"unavailable-objs__slider-button\" data-js-slider-button></div>\n\n        <div class=\"unavailable-objs__buttons-wrapper\">\n            <div class=\"green-button-reg unavailable-objs__basket-button\" data-js-basket-button>\n                <%= data.backToBasket %>\n            </div>\n            <div class=\"white-button-reg unavailable-objs__shop-list-button\" data-js-shop-list-button>\n                <i class=\"lm icon-shopping-list\"></i>\n                <%= data.backToShopList %>\n            </div>\n            <div class=\"white-button-reg unavailable-objs__continue-button\" data-js-continue-button>\n                <%= data.continueCheckout %>\n            </div>\n        </div>\n    </div>";
};
TemplateManager.getCounterTemplate = function () {
    return "\n        <div class=\"<%= data.rootSelector %>-<%= data.product.article %>\"\n         data-js-counter-root=\"<%= data.product.article %>\"\n         data-product-id=\"<%= data.product.article %>\"\n         data-unit-max=\"<%= data.product.measures ? data.product.measures.max : 999 %>\"\n         data-unit-min=\"<%= data.product.measures ? data.product.measures.min: 1 %>\"\n         data-unit-step=\"<%= data.product.measures ? data.product.measures.step: 1 %>\"\n         data-product-location=\"<%= data.product.gtmEventLocation %>\"\n         data-division=\"<%= data.product.departmentId %>\"\n         data-sub-division=\"<%= data.product.subDepartmentID %>\"\n         data-category-id=\"<%= data.product.categoryID %>\"\n         data-category=\"<%= data.product.category %>\"\n         data-sub-category=\"<%= data.product.subCategory %>\"\n         data-product-name=\"<%= data.product.displayedName %>\"\n         data-product-price=\"<%= data.price %>\"\n         data-no-gtm=\"<%= data.noGtm %>\">\n        <div class=\"change-product-quantity\">\n            <div class=\"item-counter <%= data.counterClass %>\">\n                <input type=\"text\" class=\"item-counter-input\" data-js-counter-input>\n                <div tabindex=\"0\" class=\"item-counter-button item-counter-button-plus\"></div>\n                <div tabindex=\"1\" class=\"item-counter-button item-counter-button-minus\"></div>\n            </div>\n        </div>\n        <% if (data.unit) { %>\n            <div class=\"unit-wrapper\">\n                <div class=\"unit-inner\"><%= data.unit %></div>\n            </div>\n        <% } %>\n    </div>";
};
TemplateManager.getPaginationTemplate = function () {
    return "\n     <div data-element-id=\"product-list-pagination\" active-number=\"<%= data.page %>\" view-type=\"<%= data.type %>\"\n             class=\"product-list-pagination\">\n        <div class=\"list-paginator\">\n            <% if (data.previousPage > 0) { %>\n                <div class=\"prev-paginator-button-wrapper\">\n                    <a href=\"javascript:void(0)\" navy-arrow=\"prev\" class=\"paginator-button prev-paginator-button\"\n                       data-js-pagination-prev-btn>\n                    </a>\n                </div>\n            <% } %>\n\n            <% for (var i = 0; i < data.pageNumbers.length; i++) { %>\n                <div class=\"items-wrapper\">\n                    <div class=\"item-wrapper\">\n                        <% if (data.pageNumbers[i] == 0) { %>\n                        <span class=\"paginator-item delimiter dots-item\">..</span>\n                        <% } %>\n                        <% if (data.pageNumbers[i] > 0) { %>\n                        <a navy-number=\"<%= data.pageNumbers[i] %>\" data-page=\"<%= data.pageNumbers[i] %>\"\n                           class=\"paginator-item <%= data.pageNumbers[i] == data.page ? 'active' : '' %>\"\n                           data-js-pagination-page-btn>\n                            <%= data.pageNumbers[i] %>\n                        </a>\n                        <% } %>\n                    </div>\n                </div>\n            <% } %>\n            <% if (data.nextPage > 0) { %>\n                <div class=\"next-paginator-button-wrapper\">\n                    <a href=\"javascript:void(0)\" navy-arrow=\"next\" class=\"paginator-button next-paginator-button\"\n                       data-js-pagination-next-btn>\n                    </a>\n                </div>\n            <% } %>\n        </div>\n    </div>";
};
TemplateManager.getPriceTypeLogoTemplate = function () {
    return "\n     <div class=\"price-type-logo\">\n        <% if (data.source !== \'Pim\') { %>\n            <% if (data.priceTypeLogo.bestPriceImg) { %>\n                <img class=\"price-logo price-logo--triangle\" alt=\"\" src=\"<%= data.priceTypeLogo.bestPriceImg %>\">\n            <% } %>\n            <% if (data.priceTypeLogo.limitedOfferImg) { %>\n                <img class=\"price-logo price-logo--triangle\" alt=\"\" src=\"<%= data.priceTypeLogo.limitedOfferImg %>\">\n            <% } %>\n        <% } %>\n     \n        <% if (data.source === \'Pim\') { %>\n            <% if (data.priceTypeLogo.marketplaceOnlyImg) { %>\n                <img class=\"price-logo price-logo--triangle\" alt=\"\" src=\"<%= data.priceTypeLogo.marketplaceOnlyImg %>\">\n            <% } %>\n        <% } %>\n    </div>";
};
TemplateManager.getShopListHeaderItemTemplate = function () {
    return "\n    <div data-rel=\"js-shoplist-min-product-item\" class=\"card-item sl-card-id-<%= data.product.article %>\"\n         data-ga-root\n     data-model-id=\"<%= data.product.modelCode %>\"\n        data-place=\"shopping-list-header\"\n         data-product-id=\"<%= data.product.article %>\"\n         data-product-name=\"<%= data.product.displayedName %>\"\n         data-product-price=\"<%= data.product.priceInt %>.<%= data.product.priceFractional %>\"\n         data-product-location=\"<%= data.product.gtmEventLocation %>\"\n         data-product-weight=\"<%= data.product.weight %>\"\n         data-product-brand=\"<%= data.product.brand %>\"\n         data-product-dimension65=\"<%= data.product.productPriceCategory %>\"\n         data-division-id=\"<%= data.product.departmentId %>\"\n         data-division=\"<%= data.product.department %>\"\n         data-sub-division-id=\"<%= data.product.subDepartmentId %>\"\n         data-sub-division=\"<%= data.product.subDepartment %>\"\n         data-unit=\"<%= data.product.unitOfMeasurement %>\"\n         data-category-id=\"<%= data.product.categoryId %>\"\n         data-category=\"<%= data.product.category %>\"\n         data-sub-category-id=\"<%= data.product.subCategoryId %>\"\n         data-sub-category=\"<%= data.product.subCategory %>\"\n         data-product-length=\"<%= data.product.length %>\"\n         data-product-width=\"<%= data.product.width %>\"\n         data-product-height=\"<%= data.product.height %>\"\n         data-product-material=\"<%= data.product.material %>\"\n         data-product-color=\"<%= data.product.color %>\"\n         data-product-gamma=\"<%= data.product.gamma %>\"\n         data-product-stock-value=\"<%= data.product.stockValue %>\"\n         data-product-web-saleable=\"<%= data.product.webSaleable %>\"\n         data-product-has-linked-how-tos=\"<%= Number(!_.isEmpty(data.product.linkedHowTo)) %>\">\n        <div class=\"lm icon-delete\" title=\"<%= data.i18n.areYouSure %>\"></div>\n\n        <div class=\"card-item-picture\">\n            <a href=\"<%= data.product.url %>\" class=\"card-info-tooltip\" data-js-product-link>\n                <img src=\"<%= data.mainPhoto %>\" alt=\"\" class=\"product-image\"/>\n            </a>\n        </div>\n\n        <div class=\"card-item-desc\">\n            <div class=\"card-item-name\">\n                <a class=\"standard-green-link\" href=\"<%= data.product.url %>\" data-js-product-link>\n                    <%= data.product.displayedName %>\n                </a>\n            </div>\n            <div class=\"card-item-article\">\n                <div class=\"characteristic-wrapper\">\n                    <span class=\"characteristic\"><%= data.i18n.SKU %></span> <%= data.product.article %>\n                </div>\n                <% if (data.product.weight) { %>\n                <div class=\"characteristic-wrapper\">\n                    <span class=\"characteristic\"><%= data.i18n.productWeight %></span> <%= data.product.weight %> <%=\n                    data.i18n.kg %>\n                </div>\n                <% } %>\n            </div>\n        </div>\n        <div class=\"card-item-total\">\n            <div class=\"card-item-sum\">\n                <p class=\"card-item-sum-price\">\n                    <span class=\"price-int\"><%= data.product.formattedPriceInt || 0 %></span>\n                    <span class=\"price-separator\"><%= data.i18n.priceSeparator %></span>\n                    <span class=\"price-fractional\"><%= data.product.priceFractional %></span>\n                    <span class=\"currency\"><%= data.i18n.currency %></span>\n                    <% if (data.product.formattedPriceInt) { %>\n                        <span class=\"unit\">/ <%= getDictMessage(data.product.priceUnit) %></span>\n                    <% } %>\n                </p>\n            </div>\n            <div class=\"counter-header counter-wrapper-<%= data.product.article %> pull-left\"\n                 data-product-id=\"<%= data.product.article %>\"\n                 data-no-gtm=\"true\">\n                <%= data.counterHtml %>\n            </div>\n        </div>\n    </div>";
};
TemplateManager.getShopListHeaderTemplate = function () {
    return "\n     <% if (data.productsCount) { %>\n        <div class=\"shop-list-not-empty\">\n            <div class=\"card-quick-scroll scroll mCustomScrollbar\"></div>\n            <div class=\"card-quick-total\">\n                <span class=\"card-quick-total-qt\">\n                    <%= data.i18n.shoppingListTotalProducts %>:\n                    <span class=\"products-count\">\n                        <%= data.productsCount %>\n                    </span>\n                </span>\n                <span class=\"card-quick-total-sum\" data-js-shopping-list-sum>\n                    <%= data.i18n.shoppingListOnSum %>:\n                    <span class=\"fractional-currency\"></span>\n                    <span class=\"currency\"><%= data.i18n.currency %></span>\n                </span>\n                <a class=\"btn green-button shopping-list-link\" href=\"<%= data.shopListUrl %>\"><%= data.i18n.shoppingListGoToShoppingList %></a>\n            </div>\n        </div>\n    <% } %>";
};
TemplateManager.getShopListSendEmailTemplate = function () {
    return "\n  <div id=\"sendShoplistByEmail\" class=\"fancybox-modal send-shop-list-email forgot-password-modal\">\n        <div class=\"title\"><%= data.sendShopListEmailTitle %></div>\n        <div class=\"send-shoplist-email-error error-message\">\n            <%= data.sendShopListEmailError %>\n        </div>\n        <div class=\"send-shoplist-email-success success-message\">\n            <%= data.sendShopListEmailSuccess %>\n        </div>\n        <div class=\"spinner-ajax\">\n            <div class=\"spinner-picture\"></div>\n        </div>\n        <div class=\"send-shoplist-email-form\"\n             action=\"<%= data.dataHeaderLink %>\">\n            <label for=\"send-shoplist-email-input\"><%= data.sendShopListEmailForgotLabelText %>:</label>\n            <input type=\"text\" id=\"send-shoplist-email-input\" class=\"form-control text-input send-shoplist-email-input\">\n            <div class=\"help-block\"><%= data.sendShopListEmailForgotError %></div>\n  <div class=\"send-shoplist-email__capture\">\n                <script src=\"https://www.google.com/recaptcha/api.js?onload=onloadCallbackSendShopList&render=<%=data.reCapturePublicKey%>\" async defer></script>\n                <input style=\"display: none;\" type=\"text\" id=\"g-recaptcha-response\" name=\"g-recaptcha-response\">\n            </div> \n            <button class=\"green-button-reg full-width send-shoplist-email-btn\"><%= data.sendShopListEmailButton %>\n            </button>\n        </div>\n    </div>";
};
TemplateManager.getShopListPopupContentTemplate = function () {
    return "\n     <div class=\"card-content\">\n        <div class=\"card-title\"><%= data.i18n.productAddedToShopList %></div>\n        <div class=\"card-wrapper\">\n            <div class=\"card-image\" title=\"<%= data.product.displayedName %>\">\n                <a class=\"standard-green-link\" href=\"<%= data.product.url %>\" data-js-product-link>\n                    <img class=\"product-image\" src=\"<%= data.mainPhoto %>\" alt=\"\"/>\n                </a>\n            </div>\n            <div class=\"card-main\">\n                <div class=\"card-name\">\n                    <a class=\"product-link\" href=\"<%= data.product.url %>\" data-js-product-link>\n                        <%= data.product.displayedName %>\n                    </a>\n                </div>\n                <div class=\"card-article\"><%= data.i18n.SKU %> <%= data.product.article %> &nbsp;\n                    <%= data.i18n.productWeight %>\n                    <%= data.product.weight %> <%= data.i18n.kg %>\n                </div>\n                <div class=\"card-price\">\n                    <span class=\"price-int\"></span>\n                    <% if (data.product.priceFractional) { %>\n                        <span class=\"price-separator\"><%= data.i18n.priceSeparator %></span>\n                        <span class=\"price-fractional\"><%= data.product.priceFractional %></span>\n                    <% } %>\n                    <span class=\"price-unit\">\n                        <span class=\"price-currency currency\"><%= data.i18n.currency %></span>\n                        <span class=\"unit-divider\">/</span>\n                        <span class=\"unit-item\"><%= data.priceUnit %></span>\n                    </span>\n                </div>\n                <div class=\"pull-left\"><%= data.counterHtml %></div>\n                <div class=\"pull-left unit-wrapper\"><%= data.unit %></div>\n                <div class=\"product-price-wrapper\">\n                    <div class=\"product-price-inner\">\n                        <%= data.i18n.sum %>:\n                        <p class=\"product-price\"></p>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"card-info\">\n            <div class=\"card-info-total\">\n                <a class=\"green-link hidden\"\n                   href=\"<%= data.shoppingListUrl %>\"></a>\n                <div class=\"card-info-label all-count-label\">\n                    <span class=\"card-info-text\">\n                        <span><%= data.i18n.shoppingListPopupCardInfoAll %></span>:\n                    </span>\n                    <span class=\"all-product-count\"></span>\n                </div>\n                <div class=\"card-info-label all-sum-label\">\n                    <span class=\"card-info-text\">\n                          <span><%= data.i18n.shoppingListPopupCardInfoSum %></span>:\n                    </span>\n                    <span class=\"all-product-price\"></span>\n                </div>\n            </div>\n            <div class=\"card-info-buttons-wrapper\">\n                <div class=\"card-info-buttons\">\n                    <button class=\"btn green-button print\"\n                       data-label=\"WishListPopUp\"\n                       data-print-url=\"<%= data.shoppingListUrl %>#print\"\n                       data-js-print-page>\n                        <span class=\"lm icon-print\"></span>\n                        <span class=\"hidden-md hidden-sm\"><%= data.i18n.shoppingListPopupPrint %></span>\n                        <span class=\"hidden-lg hidden-xs\"><%= data.i18n.shoppingListPopupPrintSimple %></span>\n                       \n                    </button>\n                    <button class=\"btn yellow-button send-via-email\" data-js-send-via-email data-captcha-load-shoplist>\n                        <span class=\"lm icon-email\"></span>\n                        <%= data.i18n.shoppingListPopupEmail %>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>"
};   
TemplateManager.getShoppingListAccountTitleTemplate = function () {
    return "\n    <% if (data.isProducts) { %>\n        <div class=\"lk-title\">\n            <span class=\"lm icon-shop-list\"></span>\n            <h2><%= data.i18n.shoppingListTitle %></h2>\n        </div>\n    <% } else { %>\n        <div class=\"lk-title\">\n            <span class=\"lm icon-shop-list\"></span>\n            <h2><%= data.i18n.shoppingListEmptyHeader %></h2>\n        </div>\n    <% } %>";
};
TemplateManager.getShoppingListAnnotationTemplate = function () {
    return "\n    <% if (data.isProducts) { %>\n        <div class=\"annotation-block__title annotation-block-title\">\n            <h1 class=\"annotation-block-title__title\"><%= data.i18n.shoppingListTitle %></h1>\n            <div class=\"annotation-block-title__text\">\n                (<%= data.i18n.amountForCurrentDay %>\n                <span class=\"annotation-block-title__text annotation-block-title__text--date\" data-js-annotation-block-title-date>\n                    <%= data.amountPerDay %>\n                </span>\n                )\n            </div>\n        </div>\n        <div class=\"annotation-block__description annotation-block-description\" data-js-shopping-annotation>\n            <%= data.i18n.shoppingListListNotEmptyLabel %>\n        </div>\n    <% } else { %>\n        <div data-rel=\"js-empty-shopping-list\" class=\"empty-shopping-list-header\">\n            <div class=\"annotation-block__title annotation-block__title--wide annotation-block-title\">\n                <% if (data.page === 'WishList') { %>\n                    <h1 class=\"annotation-block-title__title\"><%= data.i18n.shoppingListEmptyHeader %></h1>\n                <% } %>\n                <div class=\"annotation-block-title__text annotation-block-title__text--color_black\">\n                    <div class=\"shopping-annotation empty-list\">\n                        <%= data.i18n.justAddAndPrint %>.\n                        <p class=\"text-left\">\n                            <%= data.i18n.shoppingListEmptyReserve %>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    <% } %>";
};
TemplateManager.getShoppingListButtonsTemplate = function () {
    return "\n     <% if (data.isProducts) { %>\n        <button class=\"btn yellow-button buttons-block__item\" data-captcha-load-shoplist data-js-send-via-email>\n            <span class=\"lm icon-email\"></span>\n            <%= data.i18n.shoppingListSendViaEmail %>\n        </button>\n        <button class=\"btn green-button print buttons-block__item\" data-js-print-page data-label=\"WishListPage\">\n            <span class=\"lm icon-print\"></span>\n            <%= data.i18n.shoppingListPrintLabel %>\n        </button>\n        <button class=\"btn red-btn-link buttons-block__item\" data-js-clear-all>\n            <span class=\"lm icon-delete\"></span>\n            <%= data.i18n.shoppingListClearAll %>\n        </button>\n    <% } %>";
};
TemplateManager.getShoppingListCrosssellTemplate = function () {
    return "\n     <div class=\"item-extra-products\">\n        <div class=\"item-extra-products-inner\">\n            <span class=\"extra-products-block\">\n                <%= data.i18n.shoppingListDontForgetLabel %>\n                <a href=\"javascript:void(0);\" class=\"standard-green-link-sm extra-products-link\" data-product-id=\"<%= data.product.article %>\">\n                    <%= data.i18n.shoppingListDontForgetAdditionalProductLabel %>\n                </a>\n            </span>\n            <a class=\"standard-green-link hide-extra-products-link hidden\">\n                <%= data.i18n.shoppingListHideExtraProducts %>\n            </a>\n        </div>\n    </div>\n    <div class=\"crosssell-inner-wrapper\">\n        <div class=\"crosssell-spinner\">\n            <div class=\"spinner-ajax\">\n                <div class=\"spinner-picture\"></div>\n            </div>\n        </div>\n\n        <div class=\"empty-crosssell-block hidden\">\n            <h2><%= data.i18n.shoppingListCrosssellProductsNotFoundTitle %></h2>\n        </div>\n    </div>";
};
TemplateManager.getShoppingListGroupsTemplate = function () {
    return "\n     <% for (var i = 0; i < data.groups.length; i++) { %>\n        <div class=\"shopping-list-section__title section-title section-uid-<%= data.groups[i].uid %>\" data-uid=\"<%= data.groups[i].uid %>\">\n            <%= data.groups[i].name %>\n        </div>\n        <div class=\"section-items\" data-rel=\"js-shopping-list\"></div>\n    <% } %>";
};
TemplateManager.getShoppingListItemTemplate = function () {
    return "\n    <div>\n    <div data-ga-root data-rel=\"js-cat-product-item\"\n         class=\"shopping-list-item section-item shopping-list-item-<%= data.product.article %> clearfix\"\n         data-js-shopping-list-item=\"<%= data.product.article %>\"\n  data-model-id=\"<%= data.product.modelID %>\"\n     data-product-id=\"<%= data.product.article %>\"\n         data-product-name=\"<%= data.product.displayedName %>\"\n         data-product-price=\"<%= data.price.price %>\"\n         data-product-location=\"<%= data.product.gtmEventLocation %>\"\n         data-product-weight=\"<%= data.product.weight %>\"\n         data-product-brand=\"<%= data.product.brand %>\"\n         data-product-dimension65=\"<%= data.product.productPriceCategory %>\"\n         data-division-id=\"<%= data.product.departmentId %>\"\n         data-division=\"<%= data.product.department %>\"\n         data-sub-division-id=\"<%= data.product.subDepartmentId %>\"\n         data-sub-division=\"<%= data.product.subDepartment %>\"\n         data-unit=\"<%= data.product.unitOfMeasurement %>\"\n         data-category-id=\"<%= data.product.categoryId %>\"\n         data-category=\"<%= data.product.category %>\"\n         data-sub-category-id=\"<%= data.product.subCategoryId %>\"\n         data-sub-category=\"<%= data.product.subCategory %>\"\n         data-product-length=\"<%= data.product.length %>\"\n         data-product-width=\"<%= data.product.width %>\"\n         data-product-height=\"<%= data.product.height %>\"\n         data-product-material=\"<%= data.product.material %>\"\n         data-product-color=\"<%= data.product.color %>\"\n         data-product-gamma=\"<%= data.product.gamma %>\"\n         data-product-stock-value=\"<%= data.product.stock && data.product.stock[regionId] && data.product.stock[regionId][data.storeId] ? data.product.stock[regionId][data.storeId] : null %>\"\n         data-product-web-saleable=\"<%= data.product.eligibility && data.product.eligibility[regionId] && data.product.eligibility[regionId].web %>\"\n         data-product-has-linked-how-tos=\"<%= Number(!_.isEmpty(data.product.linkedHowTo)) %>\"\n         data-place=\"shopping-list-page\">\n\n        <div class=\"shopping-list-item__img\">\n            <div class=\"item-image\">\n                <div class=\"shopping-list-item__brand-logo\">\n                    <a href=\"<%= data.brand.pageUrl %>\">\n                        <img class=\"shopping-list-item__brand-logo-image\" src=\"<%= data.brand.image %>\"/>\n                    </a>\n                </div>\n                <div class=\"price-type-wrapper\"><%= data.priceTypeLogoHtml %></div>\n                <a class=\"item-image-link\" title=\"<%= data.product.displayedName %>\"\n                   href=\"<%= data.product.url %>\" data-js-product-link>\n                    <img class=\"item-image__img\" src=\"<%= data.mainPhoto %>\"/>\n                </a>\n            </div>\n        </div>\n        <div class=\"shopping-list-item__description shopping-list-description\">\n            <div class=\"item-title shopping-list-description__title\">\n                <a class=\"black-link item-link shopping-list-description__link\" href=\"<%= data.product.url %>\" data-js-product-link>\n                    <span class=\"product-name\"><%= data.product.displayedName %></span>\n                </a>\n            </div>\n            <div class=\"item-rating-block shopping-list-description__rating\">\n                <div class=\"sp-inline-rating-<%= data.product.article %>\"></div>\n            </div>\n            <div class=\"shopping-list-description__wrapper\">\n                <div class=\"shopping-list-description__param\">\n                    <div class=\"shopping-list-param shopping-list-description__line\">\n                        <span class=\"item-cat-label shopping-list-param__label\"><%= data.i18n.shoppingListVendorCode %>:</span>\n                        <span class=\"item-cat-number shopping-list-param__num\"><%= data.product.article %></span>\n                    </div>\n                    <% if (data.product.weight > 0) { %>\n                    <div class=\"shopping-list-param shopping-list-description__line\">\n                        <span class=\"item-weight-label shopping-list-param__label\"><%= data.i18n.productWeight %></span>\n                        <span class=\"item-weight shopping-list-param__num\"><%= data.productWeight %></span>\n                    </div>\n                    <% } %>\n                </div>\n            </div>\n        </div>\n        <div class=\"shopping-list-item__buttons\">\n            <div class=\"shopping-list-buttons__row\">\n                <%= data.priceHtml %>\n            </div>\n            <div class=\"shopping-list-buttons__row\">\n                <div class=\"shopping-list-buttons__block shopping-list-buttons__block--add-padding\">\n                    <div class=\"shopping-list-buttons__counter\">\n                        <%= data.counterHtml %>\n                    </div>\n                </div>\n\n                <div class=\"shopping-list-buttons__block shopping-list-buttons__block--add-padding\">\n                    <div class=\"price price--sum shopping-list-buttons__price\">\n                            <span class=\"price-container-<%= data.product.article %>\">\n                                <span class=\"price__int\"><%= data.price.totalPrice %></span>					    \n                            </span>\n                        <span class=\"currency price-currency\">q</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"shopping-list-buttons__row\">\n                <div class=\"item-compare shopping-list-buttons__block compare-check list\">\n                    <div class=\"modern-button modern-button--compare\"\n                         data-js-add-to-compare\n                         data-product-id=\"<%= data.product.article %>\"\n                         data-unit=\"<%= data.product.unitOfMeasurement %>\"\n                         data-value=\"shopping-list-counter-value\"\n                         data-place=\"shopping-list-page\">\n                        <span class=\"lm icon-ui icon-scales modern-button__icon\"></span>\n                        <span\n                            class=\"added-to-cart-text modern-button__text\"><%= data.i18n.compare %></span>\n\n                        <a class=\"modern-button__link\" href=\"<%= data.compareUrl %>\">\n                            <%= data.i18n.inComparison %>\n                        </a>\n                        <div class=\"modern-button__checked\">\n                            <span class=\"lm icon-done\"></span>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"item-additional shopping-list-buttons__block additional-column\">\n                    <% if (data.regionTransactional) { %>\n                    <div class=\"modern-button modern-button--basket add-to-cart\"\n                         data-js-add-to-basket\n         data-model-id=\"<%= data.product.modelID %>\"\n                data-product-id=\"<%= data.product.article %>\"\n                         data-unit=\"<%= data.product.unitOfMeasurement %>\"\n                         data-value=\"shopping-list-counter-value\"\n                         data-place=\"shopping-list-page\"\n                    <%= data.product.eligibility && data.product.eligibility[regionId] && data.product.eligibility[regionId].web ? '' : 'disabled' %>>\n                    <span class=\"lm icon-ui icon-basket-2 modern-button__icon\"></span>\n                    <span\n                        class=\"add-to-cart-text modern-button__text\"><%= data.i18n.shoppingListToCart %></span>\n                    <div class=\"modern-button__checked\">\n                        <span class=\"lm icon-done\"></span>\n                    </div>\n                </div>\n                <% } %>\n            </div>\n        </div>\n    </div>\n    <div class=\"remove-item shopping-list-item__remove\" title=\"<%= data.i18n.areYouSure %>\">\n        <span class=\"lm icon-close2\"></span>\n    </div>\n</div>";
};
TemplateManager.getShoppingListPriceTemplate = function () {
    return "\n    <% if (data.price.price) { %>\n        <div class=\"shopping-list-buttons__block shopping-list-buttons__block--add-padding\">\n            <div class=\"price price--size_bold shopping-list-buttons__price\">\n                <span class=\"price__int\"><%= PriceUtils.formatPrice(data.price.price) %></span>\n                <span class=\"item-currency\">\n                    <span class=\"currency price-currency\">q</span>\n                    <% if (data.price.priceUnit) { %>\n                        <span class=\"unit-separator\">/</span>\n                        <span class=\"item price-unit\"><%= data.priceUnit %></span>\n                    <% } %>\n                </span>\n            </div>\n        </div>\n    <% } %>\n    <% if (data.price.altPrice) { %>\n        <div class=\"shopping-list-buttons__block shopping-list-buttons__block--add-padding\">\n            <div class=\"price price--color_gray shopping-list-buttons__price\">\n                <span class=\"price__int\"><%= data.price.altPrice %></span>\n                <span class=\"item-currency\">\n                    <span class=\"currency alt-price-currency\">q</span>\n                    <% if (data.price.altPriceUnit) { %>\n                        <span class=\"unit-separator\">/</span>\n                        <span class=\"item price-unit\"><%= data.altPriceUnit %></span>\n                    <% } %>\n                </span>\n            </div>\n        </div>\n    <% } %>";
};
TemplateManager.getShoppingListSummaryTemplate = function () {
    return "\n    <% if (data.isProducts) { %>\n        <div class=\"summary-block__item summary-quantity\">\n            <span class=\"summary-quantity__label\"><%= data.i18n.shoppingListTotalProducts %>:</span>\n            <span class=\"items-quantity-count summary-quantity__count\"></span>\n        </div>\n        <div class=\"summary-block__item summary-quantity\">\n            <span class=\"summary-quantity__label\"><%= data.i18n.totalWeight %>:</span>\n            <span class=\"summary-weight-count summary-quantity__count\"></span>\n        </div>\n    \n        <div class=\"summary-block__total\">\n            <div class=\"summary-sum price price--big\">\n                <span class=\"summary-sum__label\">\n                    <%= data.i18n.shoppingListTotalLabel %>:\n                </span>\n                <span class=\"price__row\" data-js-total-sum></span>\n                <span class=\"price__currency\">\n                    <%= data.i18n.shoppingListCurrencyLabel %>\n                </span>\n            </div>\n        </div>\n    <% } %>";
};
TemplateManager.getBasketPageAdditionalInfoTemplate = function () {
    return "\n        <div class=\"add-info\" data-js-add-info>\n            <div class=\"add-info-item delivery-additional-icon\" data-js-delivery-additional-icon>\n                <div class=\"item-icon\">\n                    <span class=\"lm icon-delivery-5\"></span>\n                </div>\n                <div class=\"item-text\">\n                    <span><%= getDictMessage('basket.additional-info.delivery') %></span>\n                </div>\n            </div>\n            <div class=\"add-info-item\">\n                <div class=\"item-icon\">\n                    <span class=\"lm icon-100-r\"></span>\n                </div>\n                <div class=\"item-text\">\n                    <span><%= getDictMessage('basket.additional-info.100') %></span>\n                </div>\n            </div>\n            <div class=\"add-info-item\">\n                <div class=\"item-icon\">\n                    <span class=\"lm icon-guard\"></span>\n                </div>\n                <div class=\"item-text\">\n                    <span><%= getDictMessage('basket.additional-info.guard') %></span>\n                </div>\n            </div>\n        </div>";
};
TemplateManager.getBasketPageChangeRegionWarningTemplate = function () {
    return "\n    <div class=\"change-region-block change-region-info row change-region-wrapper\">\n        <div class=\"lm icon-exclamation2 col-xs-1\"></div>\n        <div class=\"col-xs-7 warning-text\"><%= getDictMessage('basket.region-change-text') %></div>\n        <div class=\"item-delete pull-right\">\n            <span class=\"lm icon-close2 item-delete-button item-close-region-warning\"></span>\n        </div>\n        <div class=\"btn return-btn\"><%= getDictMessage('basket.region-change-button-title') %><br><span class=\"old-region\"></span>\n        </div>\n        <div class=\"cancel-btn\">\n            <a href=\"#\" class=\"cancel-btn__text\"><%= getDictMessage('basket.region-change-button-cancel') %></a>\n        </div>\n    </div>        \n        ";
};
TemplateManager.getBasketPageItemsTemplate = function () {
    return "\n        <div class=\"basket-items-row\" data-js-basket-items-row>\n            <div class=\"available-products\" data-js-available-products></div>\n            <div class=\"col-xs-12 basket-title unavailable-title unavailable-type1-title hidden\"\n                 data-js-unavailable-type1-title>\n                <h2 data-js-unavailable-type1-text><%= getDictMessage('basket.unavailableType1-title') %></h2>\n            </div>\n            <div class=\"unavailable-type1-products\" data-js-unavailable-type1-products></div>\n            <div class=\"col-xs-12 basket-title unavailable-title unavailable-type2-title hidden\"\n                 data-js-unavailable-type2-title>\n                <h2 data-js-unavailable-type2-text><%= getDictMessage('basket.unavailableType2-title') %></h2>                \n            </div>\n            <div class=\"unavailable-type2-products\" data-js-unavailable-type2-products></div>\n        </div>\n        ";
};
TemplateManager.getBasketPageRightBlockTemplate = function () {
    return "\n        <div class=\"right-block-title\"> <%= getDictMessage('basket.type-of-get-order') %></div>\n        <div class=\"delivery-block-wrapper\" data-js-delivery-block-wrapper></div>\n        <%= data.totalDeliveryBlockHtml %>\n        <%= data.totalQuantityBlockHtml %>\n        <div class=\"weight-exceeded-wrapper\" data-js-weight-exceeded-wrapper></div>\n        <%= data.totalBlockHtml %>\n        ";
};
TemplateManager.getBasketPageTotalBlockTemplate = function () {
    return "\n        <div class=\"total-block mobile-menu-basket__total\" data-js-total-block>\n            <div class=\"total-block-title mobile-menu-basket__text mobile-menu-basket__text--hidden_mobile\" data-js-total-block-title><%= getDictMessage('basket.total-price-label') %>:</div>\n            <div class=\"total-block-title mobile-menu-basket__text mobile-menu-basket__text--hidden_wide-screen\" data-js-total-block-title><%= getDictMessage('shopping-list.total-label') %>:</div>\n            <div class=\"total-block-sum mobile-menu-basket__num mobile-menu-basket__num--total\" data-js-total-block-sum></div>\n        </div>\n        <div class=\"total-block mobile-menu-basket__button\">\n            <button type=\"button\" class=\"btn btn-sm-full start-checkout-btn mobile-menu-button\" data-js-start-checkout-btn><%= getDictMessage('checkout.checkout') %></button>\n            <button class=\"btn btn-sm-full select-checkout-btn mobile-menu-button\" data-js-open-delivery-menu><%= getDictMessage('basket.select-delivery-mode') %></button>\n        </div>";
};
TemplateManager.getBasketPageTotalDeliveryBlockTemplate = function () {
    return "\n    <div class=\"total-delivery-block mobile-menu-basket__delivery-block hidden\" data-js-total-delivery-block>\n        <div class=\"total-delivery-row mobile-menu-basket__delivery mobile-menu-basket__delivery--hidden_desktop\">\n            <span class=\"mobile-menu-basket__text\" data-js-delivery-text> <%= getDictMessage('basket.total-delivery-price') %></span>\n            <span class=\"delivery-price-val\" data-js-delivery-price-val></span>\n        </div>\n    </div>        \n        ";
};
TemplateManager.getBasketPageTotalQuantityBlockTemplate = function () {
    return "\n        <div class=\"total-quantity-block mobile-menu-basket__quantity-block\" data-js-total-quantity-block>\n            <div class=\"total-quantity-row mobile-menu-basket__quantity mobile-menu-basket__quantity--hidden_no-desktop\"\n                 data-js-total-quantity-row>\n                <div class=\"total-left-column\">\n                    <p><%= getDictMessage('basket.total-quantity-products') %></p>\n                </div>\n                <div class=\"total-right-column\">\n                    <p class=\"total-value\"><span class=\"quantity-products-val\" data-js-quantity-products-val></span></p>\n                </div>\n            </div>\n            <div class=\"total-quantity-row mobile-menu-basket__quantity mobile-menu-basket__quantity--hidden_no-desktop\"\n                 data-js-total-quantity-row>\n                <div class=\"total-left-column\">\n                    <p class=\"unavailable-products-attr\">\n                        <%= getDictMessage('basket.total-quantity-unavailable-products') %>\n                    </p>\n                </div>\n                <div class=\"total-right-column\">\n                    <a class=\"unavailable-anchor\" href=\"#\" data-js-unavailable-anchor>\n                        <p class=\"total-value\">\n                            <span class=\"unavailable-val\" data-js-unavailable-val></span>\n                        </p>\n                    </a>\n                </div>\n            </div>\n            <div class=\"total-quantity-row mobile-menu-basket__quantity\">\n                <div class=\"total-left-column weight-column\" data-js-weight-column>\n                    <p class=\"mobile-menu-basket__text mobile-menu-basket__text--hidden_no-desktop\">\n                     <%= getDictMessage('basket.total-weight') %>\n                    </p>\n                    <p class=\"mobile-menu-basket__text mobile-menu-basket__text--hidden_desktop\"\n                        data-js-mobile-menu-weight-label>\n                        <%= getDictMessage('basket.similar-popup.weight') %>\n                    </p>\n                </div>\n                <div class=\"total-right-column weight-column\">\n                    <p class=\"total-value\">\n                        <span class=\"total-weight-val mobile-menu-basket__num\" data-js-total-weight-val></span>\n                    </p>\n                </div>\n            </div>\n            <div\n                class=\"total-quantity-row mobile-menu-basket__quantity mobile-menu-basket__price mobile-menu-basket__quantity--hidden_mobile\">\n                <div class=\"total-left-column\">\n                    <p class=\"mobile-menu-basket__text\"><%= getDictMessage('basket.total-products-price') %> </p>\n                </div>\n                <div class=\"total-right-column\">\n                    <p class=\"total-value\">\n                        <span class=\"products-price-val mobile-menu-basket__num\" data-js-products-price-val></span>\n                    </p>\n                </div>\n            </div>\n            <div class=\"total-quantity-row mobile-menu-basket__quantity mobile-menu-basket__quantity--hidden_no-desktop\">\n                <div class=\"total-left-column\">\n                    <p> <%= getDictMessage('basket.total-delivery-price') %></p>\n                </div>\n                <div class=\"total-right-column\">\n                    <p class=\"total-value\">\n                        <span class=\"delivery-price-val\" data-js-delivery-price-val></span>\n                    </p>\n                </div>\n            </div>\n        </div>";
};

TemplateManager.getPaymentFormItem = function () {
    return "\n    <div class=\"pay-<%= data.person %>-<%= data.type %> form-item <%= data.value ? 'is-active' : '' %>\" data-js-form-item>\n        <div class=\"row\">\n            <div class=\"form-group form-item__row\">\n                <div class=\"form-item__label <%= data.person === 'payer' ? 'pay-label' : '' %>\">\n                    <label for=\"<%= data.person %>-<%= data.type %>\" class=\"control-label\">\n                        <%= data.description %>:\n                        <span class=\"green-label\">*</span>\n                    </label>\n                </div>\n                <div class=\"form-item__wrapper <%= data.person === 'payer' ? 'pay-input' : '' %>\">\n                    <div class=\"control-input\">\n                        <input type=\"text\"\n                            class=\"form-control form-item__input <%= data.person === 'recipient' ? 'form-item__input--bg-grey' : '' %>\"\n                            name=\"<%= data.person %>-<%= data.type %>\"\n                            id=\"<%= data.person %>-<%= data.type %>\"\n                            value=\"<%= data.value %>\"\n                            autocomplete=\"off\"\n                            data-js-form-input\n                            data-js-<%= data.person %>-<%= data.type %>\n                            <%= data.person === 'payer' ? 'required' : '' %>>\n                        <span class=\"help-block\"><%= data.person === 'payer' ? getDictMessage('registration.obligatory-field') : '' %></span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>";
};

TemplateManager.getPaymentErrorMessage = function () {
    return "\n    <div class=\"error-payment-message\" data-js-error-payment-message>\n        <div class=\"long-column\">\n            <div class=\"error-wrapper\">\n                <div class=\"error-title\">\n                    <i class=\"lm icon-exclamation2\"></i>\n                    <span class=\"text\"><%= getDictMessage('checkout.payment-error-title') %></span>\n                </div>\n                <div class=\"error-text-block\">\n                    <%= getDictMessage('checkout.payment-error-message') %>\n                </div>\n                <div class=\"error-text-block\">\n                    <%= getDictMessage('checkout.payment-error-retry') %>\n                </div>\n                <div class=\"error-text-block\">\n                    <%= getDictMessage('checkout.payment-text-apologize') %>\n                </div>\n            </div>\n        </div>\n    </div>";
};

TemplateManager.getPaymentTypesBlock = function () {
    return "\n    <div class=\"payment-type\">\n        <div class=\"checkout-header\"><%= getDictMessage('checkout.payment-type') %></div>\n        <div class=\"item-container <%= data.paymentTypes.length > 1 ? '' : 'hidden' %>\">\n            <% _.each(data.paymentTypes, function (paymentType) { %>\n                <div class=\"radio payment-type-item <%= paymentType.name %>\" data-js-payment-type-item>\n                    <input type=\"radio\" name=\"payment-type\" id=\"payment-type<%= paymentType.name %>\"\n                           value=\"<%= paymentType.name %>\"\n                           data-js-payment-type=\"<%= paymentType.name %>\"\n                           data-js-payment-type-option\n                           <%= paymentType.name === data.selectedPaymentType ? 'data-js-selected-payment-type' : '' %>>\n                    <label for=\"payment-type<%= paymentType.name %>\" class=\"payment-type<%= paymentType.name %>\">\n                        <span class=\"type-name\"><%= paymentType.description %></span>\n                    </label>\n                </div>\n            <% }) %>\n        </div>\n    </div>\n    <div class=\"payment-type-description-wrapper hidden\" data-js-payment-type-description=\"CASH\">\n        <div class=\"payment-type-message\"><%= getDictMessage('checkout.payment-CASH-description') %></div>\n    </div>\n    <div class=\"payment-type-description-wrapper hidden\" data-js-payment-type-description=\"SBERBANK\">\n        <div class=\"row\">\n            <div class=\"checkout-header\">\n                <span><%= getDictMessage('checkout.payment-client') %></span>\n                <span><%= getDictMessage('checkout.payment-card-description') %></span>\n            </div>\n            <div class=\"card-pictures\">\n                <img src=\"//res.cloudinary.com/lmru/image/upload/index/mir-logo.svg\"\n                     alt=\"logo mir\"\n                     class=\"picture-block\">\n                <img src=\"//res.cloudinary.com/lmru/image/upload/index/visa-logo.svg\"\n                     alt=\"logo visa\"\n                     class=\"picture-block\">\n                <img src=\"//res.cloudinary.com/lmru/image/upload/index/mastercard-horz.svg\"\n                     alt=\"logo master-card\"\n                     class=\"picture-block\">\n            </div>\n        </div>\n    </div>";
};

TemplateManager.getOrderSumData = function () {
    return "\n    <div class=\"row\">\n        <div class=\"long-column\">\n            <div class=\"checkout-header\">\n                <%= getDictMessage('checkout.sum-data') %>\n            </div>\n        </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"pay-info__info\">\n                <div class=\"sum-block\">\n                    <% _.each(data.amounts, function (amount) { %>\n                        <div class=\"row\">\n                            <div class=\"long-column\">\n                                <span class=\"sum-name grey-text\"><%= amount.description %></span>\n                                <span class=\"sum black-text\">\n                                    <%= amount.value %>\n                                    <span class=\"currency <%= amount.hideCurrency ? 'hidden' : '' %>\"><%= getDictMessage('currency') %></span>\n                                </span>\n                            </div>\n                        </div>\n                    <% }) %>\n                </div>\n            </div>\n            <div class=\"pay-info__sum\">\n                <div class=\"total-block\">\n                    <div class=\"total-price-text\">\n                        <%= getDictMessage('checkout.payment-total-sum') %>\n                    </div>\n                    <div class=\"total-price\">\n                        <%= data.totalAmount %>\n                        <span class=\"currency\"><%= getDictMessage('currency') %></span>\n                    </div>\n                </div>\n            </div>\n        </div>";
};

TemplateUtils.getDeliveryData = function () {
    return "\n    <div class=\"row\">\n        <div class=\"long-column\">\n            <div class=\"checkout-header\">\n                <%= data.headerTitle %>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"long-column\">\n            <% _.each(data.deliveryInfo, function (info) { %>\n                <div class=\"row\">\n                    <div class=\"long-column\">\n                        <span class=\"address-delivery-name grey-text\"><%= info.description %></span>\n                        <span class=\"address-delivery long-text\"><%= info.value %></span>\n                    </div>\n                </div>\n            <% }) %>\n        </div>\n    </div>";
};

TemplateManager.getPaymentNavigationButtons = function () {
    return "\n    <div class=\"payment-button-wrapper payment-buttons\">\n        <div class=\"row payment-buttons__list\">\n            <div class=\"back-btn-wrapper payment-buttons__wrapper\">\n                <button type=\"button\" class=\"white-button-reg backward-button payment-buttons__item\"\n                        data-js-prev-button>\n                    <%= getDictMessage('checkout.back-button') %>\n                </button>\n            </div>\n            <div class=\"pay-btn-wrapper payment-buttons__wrapper\">\n                <button type=\"button\" class=\"green-button-reg pay-button disabled payment-buttons__item\"\n                        data-js-next-button>\n                    <%= getDictMessage('checkout.pay-button') %>\n                </button>\n            </div>\n        </div>\n    </div>\n    <div class=\"bottom-wrapper clearfix payment-buttons\">\n        <div class=\"btn-back payment-buttons__back-wrapper\">\n            <button class=\"btn white-button-reg btn-sub payment-buttons__back\" data-js-return-to-basket>\n                <%= getDictMessage('checkout.auth.btn-back') %>\n            </button>\n            <div class=\"first-triangle\"></div>\n            <div class=\"second-triangle\"></div>\n        </div>\n    </div>";
};

TemplateManager.getPaymentExpressRegistration = function () {
    return "\n    <div class=\"registration-block container-fluid\">\n        <div class=\"row\">\n            <div class=\"long-column\">\n                <div class=\"form-group\">\n                    <div class=\"custom-checkbox checkbox\">\n                        <div class=\"custom-checkbox-wrapper\">\n                            <input type=\"checkbox\" id=\"expressReg\" name=\"expressReg\"\n                                   checked=\"<%= data.expressRegistration %>\"\n                                   required\n                                   data-js-express-reg-checkbox>\n                            <label for=\"expressReg\" class=\"custom-checkbox-label\">\n                                <%= getDictMessage('checkout.payment.express-reg') %>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"long-column\">\n                <div class=\"registration-annotation\" data-js-registration-annotation></div>\n            </div>\n        </div>\n    </div>\n    <div class=\"custom-form-dashed\"></div>";
};

TemplateManager.getPaymentComment = function () {
    return "\n    <div class=\"row\">\n        <div class=\"long-column\">\n            <label class=\"checkout-header\" for=\"comment-text\">\n                <%= getDictMessage('checkout.payment-comment') %>\n            </label>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"long-column\">\n            <textarea class=\"form-control not-required\" id=\"comment-text\" name=\"comment-text\" maxlength=\"1000\" rows=\"8\"\n                data-js-comment-text><%= data.comment %></textarea>\n        </div>\n    </div>";
};

if (typeof jQuery === 'undefined') {
    throw new Error('Bootstrap\'s JavaScript requires jQuery')
}

+function ($) {
    'use strict';
    var version = $.fn.jquery.split(' ')[0].split('.')
    if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1) || (version[0] > 3)) {
        throw new Error('Bootstrap\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4')
    }
}(jQuery);

/* ========================================================================
 * Bootstrap: transition.js v3.3.7
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: button.js v3.3.7
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element  = $(element)
    this.options   = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.VERSION  = '3.3.7'

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state += 'Text'

    if (data.resetText == null) $el.data('resetText', $el[val]())

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state])

      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d).prop(d, true)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d).prop(d, false)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked')) changed = false
        $parent.find('.active').removeClass('active')
        this.$element.addClass('active')
      } else if ($input.prop('type') == 'checkbox') {
        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
        this.$element.toggleClass('active')
      }
      $input.prop('checked', this.$element.hasClass('active'))
      if (changed) $input.trigger('change')
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
      this.$element.toggleClass('active')
    }
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  var old = $.fn.button

  $.fn.button             = Plugin
  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document)
    .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      var $btn = $(e.target).closest('.btn')
      Plugin.call($btn, 'toggle')
      if (!($(e.target).is('input[type="radio"], input[type="checkbox"]'))) {
        // Prevent double click on radios, and the double selections (so cancellation) on checkboxes
        e.preventDefault()
        // The target component still receive the focus
        if ($btn.is('input,button')) $btn.trigger('focus')
        else $btn.find('input:visible,button:visible').first().trigger('focus')
      }
    })
    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
    })

}(jQuery);

/* ========================================================================
 * Bootstrap: collapse.js v3.3.7
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

/* jshint latedef: false */

+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.3.7'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function () {
    return $(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function (i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target')
      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

    return $(target)
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this   = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: dropdown.js v3.3.7
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.3.7'

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $this         = $(this)
      var $parent       = getParent($this)
      var relatedTarget = { relatedTarget: this }

      if (!$parent.hasClass('open')) return

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.attr('aria-expanded', 'false')
      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))
    })
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement('div'))
          .addClass('dropdown-backdrop')
          .insertAfter($(this))
          .on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this
        .trigger('focus')
        .attr('aria-expanded', 'true')

      $parent
        .toggleClass('open')
        .trigger($.Event('shown.bs.dropdown', relatedTarget))
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.disabled):visible a'
    var $items = $parent.find('.dropdown-menu' + desc)

    if (!$items.length) return

    var index = $items.index(e.target)

    if (e.which == 38 && index > 0)                 index--         // up
    if (e.which == 40 && index < $items.length - 1) index++         // down
    if (!~index)                                    index = 0

    $items.eq(index).trigger('focus')
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.dropdown

  $.fn.dropdown             = Plugin
  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

}(jQuery);

/* ========================================================================
 * Bootstrap: tab.js v3.3.7
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element)
    // jscs:enable requireDollarBeforejQueryAssignment
  }

  Tab.VERSION = '3.3.7'

  Tab.TRANSITION_DURATION = 150

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var $previous = $ul.find('.active:last a')
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    })
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    })

    $previous.trigger(hideEvent)
    $this.trigger(showEvent)

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      })
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
          .removeClass('active')
        .end()
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', false)

      element
        .addClass('active')
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', true)

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu').length) {
        element
          .closest('li.dropdown')
            .addClass('active')
          .end()
          .find('[data-toggle="tab"]')
            .attr('aria-expanded', true)
      }

      callback && callback()
    }

    $active.length && transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab             = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  var clickHandler = function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  }

  $(document)
    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);

/* ========================================================================
 * Bootstrap: tooltip.js v3.3.7
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var TooltipB = function (element, options) {
    this.type       = null
    this.options    = null
    this.enabled    = null
    this.timeout    = null
    this.hoverState = null
    this.$element   = null
    this.inState    = null

    this.init('tooltipB', element, options)
  }

  TooltipB.VERSION  = '3.3.7'

  TooltipB.TRANSITION_DURATION = 150

  TooltipB.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  TooltipB.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
    this.inState   = { click: false, hover: false, focus: false }

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
    }

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  TooltipB.prototype.getDefaults = function () {
    return TooltipB.DEFAULTS
  }

  TooltipB.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  TooltipB.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  TooltipB.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
    }

    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in'
      return
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  TooltipB.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true
    }

    return false
  }

  TooltipB.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
    }

    if (self.isInStateTrue()) return

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  TooltipB.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
      this.$element.trigger('inserted.bs.' + this.type)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var viewportDim = this.getPosition(this.$viewport)

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        var prevHoverState = that.hoverState
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null

        if (prevHoverState == 'out') that.leave(that)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(TooltipB.TRANSITION_DURATION) :
        complete()
    }
  }

  TooltipB.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  += marginTop
    offset.left += marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var isVertical          = /top|bottom/.test(placement)
    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
  }

  TooltipB.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
      .css(isVertical ? 'top' : 'left', '')
  }

  TooltipB.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  TooltipB.prototype.hide = function (callback) {
    var that = this
    var $tip = $(this.$tip)
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      if (that.$element) { // TODO: Check whether guarding this code with this `if` is really necessary.
        that.$element
          .removeAttr('aria-describedby')
          .trigger('hidden.bs.' + that.type)
      }
      callback && callback()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && $tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(TooltipB.TRANSITION_DURATION) :
      complete()

    this.hoverState = null

    return this
  }

  TooltipB.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  TooltipB.prototype.hasContent = function () {
    return this.getTitle()
  }

  TooltipB.prototype.getPosition = function ($element) {
    $element   = $element || this.$element

    var el     = $element[0]
    var isBody = el.tagName == 'BODY'

    var elRect    = el.getBoundingClientRect()
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
    }
    var isSvg = window.SVGElement && el instanceof window.SVGElement
    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.
    // See https://github.com/twbs/bootstrap/issues/20280
    var elOffset  = isBody ? { top: 0, left: 0 } : (isSvg ? null : $element.offset())
    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

    return $.extend({}, elRect, scroll, outerDims, elOffset)
  }

  TooltipB.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

  }

  TooltipB.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  TooltipB.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  TooltipB.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  TooltipB.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template)
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
      }
    }
    return this.$tip
  }

  TooltipB.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  TooltipB.prototype.enable = function () {
    this.enabled = true
  }

  TooltipB.prototype.disable = function () {
    this.enabled = false
  }

  TooltipB.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  TooltipB.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    if (e) {
      self.inState.click = !self.inState.click
      if (self.isInStateTrue()) self.enter(self)
      else self.leave(self)
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
    }
  }

  TooltipB.prototype.destroy = function () {
    var that = this
    clearTimeout(this.timeout)
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type)
      if (that.$tip) {
        that.$tip.detach()
      }
      that.$tip = null
      that.$arrow = null
      that.$viewport = null
      that.$element = null
    })
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.tooltip', (data = new TooltipB(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltipB

  $.fn.tooltipB             = Plugin
  $.fn.tooltipB.Constructor = TooltipB


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltipB.noConflict = function () {
    $.fn.tooltipB = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: popover.js v3.3.7
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltipB) throw new Error('Popover requires tooltip.js')

  Popover.VERSION  = '3.3.7'

  Popover.DEFAULTS = $.extend({}, $.fn.tooltipB.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltipB.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
    ](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.popover

  $.fn.popover             = Plugin
  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.7
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    this.$body          = $(document.body)
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target || '') + ' .nav li > a'
    this.offsets        = []
    this.targets        = []
    this.activeTarget   = null
    this.scrollHeight   = 0

    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
    this.refresh()
    this.process()
  }

  ScrollSpy.VERSION  = '3.3.7'

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
  }

  ScrollSpy.prototype.refresh = function () {
    var that          = this
    var offsetMethod  = 'offset'
    var offsetBase    = 0

    this.offsets      = []
    this.targets      = []
    this.scrollHeight = this.getScrollHeight()

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position'
      offsetBase   = this.$scrollElement.scrollTop()
    }

    this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        that.offsets.push(this[0])
        that.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.getScrollHeight()
    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (this.scrollHeight != scrollHeight) {
      this.refresh()
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null
      return this.clear()
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
        && this.activate(targets[i])
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    this.clear()

    var selector = this.selector +
      '[data-target="' + target + '"],' +
      this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }

  ScrollSpy.prototype.clear = function () {
    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.scrollspy

  $.fn.scrollspy             = Plugin
  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      Plugin.call($spy, $spy.data())
    })
  })

}(jQuery);

var basketI18n = {
    shoppingListVendorCode: I18nUtils.get('shopping-list.vendor-code'),
    productWeight: I18nUtils.get('product-weight'),
    basketOnStorageAvailable: I18nUtils.get('basket.on-storage-available'),
    basketOnStorage: I18nUtils.get('basket.on-storage'),
    basketAdditionalProducts: I18nUtils.get('basket.additional-products'),
    basketBuyLater: I18nUtils.get('basket.buy-later'),
    basketFindAnalogBut: I18nUtils.get('basket.find-analog-but'),
    basketBuyStock: I18nUtils.get('basket.buy-stock'),
    basketCurrencyLabel: I18nUtils.get('shopping-list.currency-label'),
    basketPickupFromStoreSelect: I18nUtils.get('basket.pickup-from-store-select'),
    basketDeliveryTransport: I18nUtils.get('basket.delivery-transport'),
    basketPickupFromStore: I18nUtils.get('basket.pickup-from-store'),
    basketEmptyCartTitle: I18nUtils.get('basket.empty-cart-title'),
    basketEmptyCartText: I18nUtils.get('basket.empty-cart-text')
};


var checkoutConfig;

$(document).ready(function () {
    checkoutConfig = $('[data-js-checkout-config]').data();
});

var CompareButton = (function () {
    "use strict";

    function init() {
        bindChangeState();
        showState();
    }

    function addToCompare($el, i) {
        return function (e) {
            var $target = $(e.target),
                $relatedList = $target.closest('[data-js-complements]'),
                $purchaseHistory = $el.closest('[data-js-purchase-history]'),
                productRelationType = $relatedList.data('js-complements'),
                productId = $el.attr('data-product-id'),
                $gaRoot = $el.closest('[data-ga-root]'),
                changeStateParams = {
                    productRelationType: productRelationType,
                    productId: productId,
                    $el: $el,
                    $gaRoot: $gaRoot,
                    event: e,
                    id: i
                };
            if ($target.hasClass('compare-input') ||
                $target.hasClass('compare-link') ||
                $target.hasClass('checkbox')) {
                return;
            }
            changeState(changeStateParams);
            var isQuickView = $('.product-quick-view').length > 0;
            var isPurchaseHistory = $purchaseHistory.length > 0;
            if (isQuickView || isPurchaseHistory) {
                showState();
            }
        };
    }


    function bindChangeState() {
        var selector = '[data-js-add-to-compare]';
        $(selector).each(function (i, el) {
            var $el = $(el);
            $el.off('click').on('click', addToCompare($el, i));
        });
    }

    function changeState(params) {
        var productId = params.productId,
            $el = params.$el,
            inStorage = StorageUtils.isObjectInStorage(CookieUtils.COMPARISON_COOKIE_NAME, productId),
            compareCheckBox = $el.data('compare-checkbox'),
            $catalogProductList = $('[data-js-catalog-product-list]');

        if (_.isUndefined(compareCheckBox)) {
            compareCheckBox = false;
        }

        if (inStorage) {
            CookieUtils.removeComparison(productId);
            inStorage = false;
        } else {
            CookieUtils.setComparison(productId);
            inStorage = true;
        }
        globalConfig.aemServiceLayer.gtmEventPush(inStorage ? 'comparison-add' : 'comparison-remove', {
            additionalParams: {
                productRelationType: params.productRelationType,
                location: CommonGAUtils.promoOrCatalog(CommonGAUtils.isPromo($catalogProductList, /\bpredlozhenie-ogranicheno\b/)),
                id: ++params.id
            },
            root: params.$gaRoot
        });
        toggleButton({compareCheckBox: compareCheckBox, status : inStorage, inStorage: inStorage, $el: $el});
    }

    function showState() {
        var selector = '[data-js-add-to-compare]',
            comparisonProducts = CookieUtils.getAsArray(CookieUtils.COMPARISON_COOKIE_NAME);
        $(selector).each(function (i, el) {
            var $el = $(el),
                productId = $el.attr('data-product-id'),
                compareCheckBox = $el.data('compare-checkbox');

            if (_.isUndefined(compareCheckBox)) {
                compareCheckBox = false;
            }

            if (_.isNotUndefined(productId)) {
                var inStorage = comparisonProducts.indexOf(productId) !== -1;
                toggleButton({compareCheckBox: compareCheckBox, status : inStorage, $el: $el, inStorage: inStorage, showState: true});
            }
        });
    }

    function toggleButton(params) {
        var compareCheckBox = params.compareCheckBox,
            $el = params.$el,
            inStorage = params.inStorage,
            status = params.status;

        $el.closest('[data-element-id="ui-product-card"], [data-rel="js-cat-product-item"]').attr('comparison-checked', status);
        if (params.showState) {
            $el.find('input.checkbox').prop('checked', status);
        }

        if (compareCheckBox === true) {
            $el.toggleClass('active', inStorage);
        } else {
            $el.toggleClass('added-to-compare', inStorage);
        }
    }

    return {
        init: init,
        bindChangeState: bindChangeState,
        changeState: changeState,
        showState: showState
    };

})();

var ShopListButton = (function () {

    var shopListHeaderSelector = '[data-js-shop-list-header]';

    function init() {
        bindHandler();
        showState();
    }

    function bindHandler() {
        var selector = '[data-js-add-to-shop-list]';
        $(selector).each(function (i, el) {
            var $el = $(el);
            var _productId = $el.attr('data-product-id');
            document.body.addEventListener('wishlist:update', ()=>{
                showState(_productId);
            });

            $el.off('click').on('click', function (e) {
                var $this = $(this);
                if ($this.hasAttr('disabled')) {
                    return;
                }

                var productId = $this.attr('data-product-id'),
                    $pdpCounterInput = $('.pdp-counter-wrapper-' + productId + ' .item-counter-input'),
                    parentProductId = $this.attr('data-parent-product-id'),
                    unit = $this.attr('data-unit'),
                    place = $this.attr('data-place'),
                    value = $this.attr('data-value'),
                    $gaRoot = $el.closest('[data-ga-root]');
                if ($el.is("[data-quick-view='#productCalculator']")) {
                    place = 'calc';
                    $gaRoot = $('.product-detailed-page');
                }

                if (_.isUndefined(value) && $pdpCounterInput.length > 0) {
                    value = $pdpCounterInput.val();
                }
                var count = ProductUtils.getProductNewQuantity({productId: productId, modelType: 'shopList', value: value});
                addToShopList({
                    productId: productId,
                    $el: $el,
                    $gaRoot: $gaRoot,
                    count: count,
                    place: place,
                    parentProductId: parentProductId
                });
                e.stopPropagation();
                if (e.preventDefault) {
                    e.preventDefault();
                }
            });
        });
    }

    function addToShopList(params) {
        if (_.isUndefined(params.count) || !_.isNumber(params.count)) {
            return;
        }
        var count,
            $shopListHeader = $(shopListHeaderSelector);

        count = parseFloat(params.count);

        if (count > 0) {
            StorageUtils.updateStorage(CookieUtils.SHOP_LIST_COOKIE_NAME, params.productId, count, {
                selector: params.$gaRoot,
                place: params.place
            });

            document.body.dispatchEvent(new CustomEvent('wishlist:update', { cancelable: true, bubbles: true }));

            CookieUtils.setLastConfirmedRegionId(CookieUtils.getRegionId(), true);
            if (!params.batchMode) {
                $shopListHeader.trigger('*:reloadContent');
            }
        }

        if ($('.shopping-list-container').length > 0
            && typeof shoppingListController !== 'undefined') {
            addToListFromShopListPage();
            return;
        }
    }

    function addToShopListBatch(products) {
        products.forEach(function (item) {
            item['batchMode'] = true;
            addToShopList(item);
        });
        $(shopListHeaderSelector).trigger('*:reloadContent');
    }

    function addToListFromShopListPage() {
        shoppingListController.load({});
        var $shopListHeader = $('[data-js-shopping-list-header]');
        $shopListHeader.trigger('*:reloadContent');
    }

    function showState(id) {
        var selector = '[data-js-add-to-shop-list]';
        if (!_.isUndefined(id)) {
            selector += '[data-product-id="' + id + '"]';
        }
        var ids = _.map(StorageUtils.getTransitStorage(CookieUtils.SHOP_LIST_COOKIE_NAME), function (obj) {
            return obj.article;
        });
        $(selector).each(function (i, el) {
            var $el = $(el),
                $cardToList = $el.find('.card-to-list'),
                $buttonBlock = $el.find('.btn-block'),
                $label = $el.find('.shop-list-text'),
                productId = $el.attr('data-product-id'),
                inStorage = ids.indexOf(productId) !== -1,
                cardSelector = '[data-rel="js-cat-product-item"]';
            if (inStorage) {
                $el.closest(cardSelector).attr('shopping-list-checked', true);
                $label.html(I18nUtils.get('added'));
            } else {
                $el.closest(cardSelector).attr('shopping-list-checked', false);
                $label.html(I18nUtils.get('add-to-wish-list-redux'));
            }

            $cardToList.toggleClass('active', inStorage);
            $buttonBlock.toggleClass('active', inStorage);
            $el.toggleClass('added-to-list', inStorage).trigger('added-to-list');
        });
    }

    return {
        init: init,
        bindHandler: bindHandler,
        addToShopList: addToShopList,
        addToShopListBatch: addToShopListBatch,
        showState: showState,
        addToListFromShopListPage: addToListFromShopListPage
    };
})();

var BasketButton = (function () {

    var basketHeaderSelector = '[data-js-basket-header]',
        reloadContentTrigger = '*reloadContent',
        updateProductCountTrigger = '*updateProductCount';

    function init() {
        bindHandler();
        showState();
    }

    function bindHandler() {
        $('[data-js-add-to-basket]').each(function (i, el) {
            var $el = $(el);
            var _productId = $el.attr('data-product-id');
            document.body.addEventListener('basket:update', ()=>{
                showState(_productId);
            });

            $el.off('click').on('click', function (e) {
                var $this = $(this),
                    productId = $this.attr('data-product-id'),
                    parentProductId = $this.attr('data-parent-product-id'),
                    quickViewSelector = $this.attr('data-quick-view'),
                    place = $this.attr('data-place'),
                    modelId = $this.attr('data-model-id'),
                    value = $this.attr('data-value'),
                    $gaRoot = $el.closest('[data-ga-root]'),
                    productQuickView = '.product-quick-view',
                    $productQuickView = $(productQuickView),
                    $productCarousel = $el.closest('[data-js-product-carousel], [data-js-elbrus-carousel]');

                if ($this.hasAttr('disabled')) {
                    return;
                }

                if ($el.is("[data-quick-view='#productCalculator']")) {
                    $gaRoot = $('.product-detailed-page');
                }

                if (_.isUndefined(quickViewSelector)) {
                    quickViewSelector = '.product-quick-view';
                }

                closePopup(quickViewSelector);

                if (_.isNotUndefined(value)) {
                    if (value === 'shopping-list-counter-value') {
                        value = $(this)
                            .closest('.section-item')
                            .find('.change-product-quantity .item-counter-input')
                            .val();

                    } else if (value === 'pdp-counter-value') {
                        if ($productQuickView.is(':visible')) {
                            value = $productQuickView.find('.item-counter-input').val();
                        } else {
                            value = $('[data-rel="js-detail-product-page"]').find('.item-counter-input').val();
                        }
                    }
                }

                if (_.isNotUndefined(value) && _.isString(value)) {
                    value = parseFloat(value.replace(',', '.'));
                }

                var oldQty = getCurrentProductQty('cartInfo', productId);
                var quantity = ProductUtils.getProductNewQuantity({productId: productId, modelType: 'basket', value: value}),
                    product;

                if(quantity > 0 && oldQty <= 0){
                    document.body.dispatchEvent(new CustomEvent('iapSDK:event', {
                        detail: { event: 'ADD_TO_CART', data: { productId: productId } },
                        bubbles: true,
                        cancelable: false,
                        composed: true
                    }));

                    dbBasketEvents.addDB(productId, modelId);
                }

                if ($productCarousel.length > 0) {
                    var linkedProducts = $el.closest('[data-linked-products]').data('linked-products');
                    if (!_.isUndefined(linkedProducts)) {
                        product = _.find(linkedProducts, function (item) {
                            return item.article === productId;
                        });
                    }
                }

                if ('basket' === globalConfig.checkoutStep) {
                    var $searchPopup = $('[data-search-popup]');
                    if (e.target.dataset.place === "search-popup") {
                        var $searchPopupBasketButton = $searchPopup.find('[data-js-add-to-basket][data-product-id=' + productId + ']');
                        $gaRoot = $searchPopupBasketButton.closest('[data-ga-root]');
                        BasketProducts.addToBasket({
                            productId: productId,
                            product: createProductFromSearchPopup($gaRoot),
                            quantity: quantity,
                            $gaRoot: $gaRoot
                        });
                    } else {
                        var $crossells = $('.item-code-' + parentProductId).find('.item-crosssell');
                        if ($crossells.length > 0) {
                            var crosssells = $crossells.data('linked-products');
                            product = _.find(crosssells, function (item) {
                                return item.article === productId;
                            });
                            BasketProducts.addToBasket({
                                productId: productId,
                                product: product,
                                parentProductId: parentProductId,
                                quantity: quantity,
                                $gaRoot: $gaRoot
                            });
                        }
                    }
                } else {
                    addToBasket({
                        productId: productId,
                        product: product,
                        $el: $el,
                        $gaRoot: $gaRoot,
                        quantity: quantity,
                        place: place
                    });
                }

                document.body.dispatchEvent(new CustomEvent('basket:update', { cancelable: true, bubbles: true }));
            });
        });
    }

    function addToBasket(params) {
        var quantity = params.quantity,
            $el = params.$el,
            $catalogProductList = $('[data-js-catalog-product-list]'),
            promo = CommonGAUtils.isPromo($catalogProductList, /\bpredlozhenie-ogranicheno\b/);

        if (!params || !params.productId) {
            return;
        }

        var maxValue = 999;
        if (quantity > maxValue) {
            quantity = maxValue;
        }

        var foundProduct = BasketUtils.getCartProduct(params.productId),
            found = checkObject(foundProduct);

        var gtmRoot = $el;
        if (_.isEmpty(params.place) && params.$el.is("[data-quick-view='#productCalculator']")) {
            params.place = 'calc';
            gtmRoot = $('.product-detailed-page');
        }

        globalConfig.aemServiceLayer.addToCart(gtmRoot, found ? quantity - foundProduct.quantity : quantity, params.place, promo);
        BasketUtils.updateCartInfo(params.productId, quantity);

        var $basketHeader = $(basketHeaderSelector),
            showPopup = !params.batchMode && $el.closest('.shop-list-popup, .basket-popup').length === 0;

        if (showPopup) {
            $basketHeader.trigger(reloadContentTrigger);
        } else if (!found) {
            $basketHeader.trigger('*addProductToBasket', {product: params.product, quantity: params.quantity});
            $basketHeader.trigger(reloadContentTrigger);
        } else {
            $basketHeader.trigger(updateProductCountTrigger, {productId: params.productId, value: params.quantity});
        }
        CookieUtils.setLastConfirmedRegionId(CookieUtils.getRegionId(), true);
    }

    function addToBasketBatch(products) {
        products.forEach(function (item) {
            item['batchMode'] = true;
            addToBasket(item);
        });
        $(basketHeaderSelector).trigger(reloadContentTrigger);
    }

    function showState(id) {
        var selector = '[data-js-add-to-basket]';
        if (!_.isUndefined(id)) {
            selector += '[data-product-id="' + id + '"]';
        }
        var cartInfo = CookieUtils.getBasketCookie(),
            ids = [],
            basketAddedToCart = I18nUtils.get('basket.added-to-cart'),
            addToCart = I18nUtils.get('add-to-cart');
        if (checkObject(cartInfo) && _.isNotUndefined(cartInfo.products)) {
            ids = _.map(cartInfo.products, function (item) {
                return item.code;
            });
        }

        var $selector = $(selector),
            $selectorForPDPButton = $('.card-order-product-quantity-busked-button ' + selector),
            $selectorFiltred = $selector.not($selectorForPDPButton),
            pdpCardFunc = setBuyButtonText(basketAddedToCart, addToCart, ids),
            cardFunct = setBuyButtonText(basketAddedToCart, addToCart, ids);

        $selectorFiltred.each(cardFunct);
        $selectorForPDPButton.each(pdpCardFunc);


    }

    function setBuyButtonText(buyText, alterBuyText, ids) {
        var _buyText = buyText,
            _alterBuyText = alterBuyText,
            _ids = ids;
        return function (i, el) {
            var $el = $(el),
                productId = $el.attr('data-product-id'),
                found = _ids.indexOf(productId) !== -1,
                cardSelector = '[data-rel="js-cat-product-item"]',
                $productCard = $el.closest(cardSelector),
                $buttonTitle = $el.find('.cart-text, .add-to-cart-text'),
                text;

            text = found ? _buyText : _alterBuyText;

            $buttonTitle.html(text);

            $productCard.attr('shop-cart-checked', found);
            $el.toggleClass('added-to-cart', found).trigger('added-to-cart');
        };
    }

    /**
     * Create product from search popup.
     *
     * @param {Object} $element element with product data
     * @return {Object}
     */
    function createProductFromSearchPopup($element) {
        var crosssells = $element.attr('data-product-crosssell-ids'),
            similars = $element.attr('data-product-similar-ids'),
            price = $element.data('product-price');

      return {
            article: $element.attr('data-product-id'),
            displayedName: $element.attr('data-product-name'),
            price: _.isNotEmpty(price) ? price : 0,
            mainPhoto: $element.attr('data-product-main-photo'),
            gtmEventLocation: $element.attr('data-product-location'),
            similarIds: _.isNotEmpty(similars) ? similars.split(',') : [],
            crosssellIds: _.isNotEmpty(crosssells) ? crosssells.split(',') : [],
            width: $element.attr('data-product-width'),
            length: $element.attr('data-product-length'),
            height: $element.attr('data-product-height'),
            material: $element.attr('data-product-material'),
            color: $element.attr('data-product-color'),
            gamma: $element.attr('data-product-gamma'),
            stockValue: $element.data('product-stock-value'),
            webSaleable: $element.data('product-web-saleable'),
            linkedHowTo: $element.attr('data-product-has-linked-how-tos'),
            categoryId: $element.attr('data-category-id'),
            category: $element.attr('data-category'),
            subCategoryId: $element.attr('data-sub-category-id'),
            subCategory: $element.attr('data-sub-category'),
            priceUnit: $element.attr('data-price-unit'),
            unitOfMeasurement: $element.attr('data-unit'),
            weight: $element.data('product-weight'),
            brand: $element.attr('data-product-brand'),
            productPriceCategory: $element.attr('data-product-dimension65'),
            departmentId: $element.attr('data-division-id'),
            department: $element.attr('data-division'),
            subDepartmentId: $element.attr('data-sub-division-id'),
            subDepartment: $element.attr('data-sub-division'),
            url: $element.attr('data-product-url')
        };
    }

    return {
        init: init,
        bindHandler: bindHandler,
        addToBasket: addToBasket,
        addToBasketBatch: addToBasketBatch,
        showState: showState
    };

    function getCurrentProductQty(key, productId){
        var cookie = CookieUtils.getTransitCookie(key);
        var productLine = _.find(cookie.products, function (item) {
            return item['code'] === productId;
        });
        var productQuantity = checkObject(productLine) ? productLine['quantity'] : 0;
        return productQuantity;
    }
})();

var ProductButtons = (function () {

    function init() {
        CompareButton.init();
        ShopListButton.init();
        BasketButton.init();
    }

    function showState() {
        CompareButton.showState();
        ShopListButton.showState();
        BasketButton.showState();
    }

    return {
        init: init,
        showState: showState
    }
})();

var shopListI18n = {
    areYouSure: I18nUtils.get('are-you-sure'),
    compare: I18nUtils.get('compare'),
    inComparison: I18nUtils.get('shopping-list.in-comparison'),
    currency: I18nUtils.get('currency'),
    goToComparison: I18nUtils.get('go-to-comparison'),
    justAddAndPrint: I18nUtils.get('just-add-and-print'),
    kg: I18nUtils.get('kg'),
    localizationLookInOtherShops: I18nUtils.get('localization.look-in-other-shops'),
    priceSeparator: I18nUtils.get('price-separator'),
    productAddedToShopList: I18nUtils.get('product-added-to-shop-list'),
    productWeight: I18nUtils.get('product-weight'),
    shoppingListClearAll: I18nUtils.get('shopping-list.clear-all'),
    shoppingListClearCart: I18nUtils.get('shopping-list.clear-cart'),
    shoppingListCrosssellProductsNotFoundTitle: I18nUtils.get('shopping-list.crosssell-products-not-found-title'),
    shoppingListCurrencyLabel: I18nUtils.get('shopping-list.currency-label'),
    shoppingListDontForgetAdditionalProductLabel: I18nUtils.get('shopping-list.dont-forget-additional-product-label'),
    shoppingListDontForgetLabel: I18nUtils.get('shopping-list.dont-forget-label'),
    shoppingListEmptyAdvice: I18nUtils.get('shopping-list.empty-advice'),
    shoppingListEmptyHeader: I18nUtils.get('shopping-list.empty-header'),
    shoppingListEmptyReserve: I18nUtils.get('shopping-list.empty-reserve'),
    shoppingListGoToShoppingList: I18nUtils.get('shop-list.go-to-shopping-list'),
    shoppingListHideExtraProducts: I18nUtils.get('shopping-list-hide-extra-products'),
    shoppingListListNotEmptyLabel: I18nUtils.get('shopping-list.list-not-empty-label'),
    shoppingListOnSum: I18nUtils.get('shop-list.on-sum'),
    shoppingListOrderLabel: I18nUtils.get('shopping-list.order-label'),
    shoppingListPopupCardInfoAll: I18nUtils.get('shopping-list-popup.card-info-all'),
    shoppingListPopupCardInfoSum: I18nUtils.get('shopping-list-popup.card-info-sum'),
    shoppingListPopupEmail: I18nUtils.get('shopping-list-popup.email'),
    shoppingListPopupPrint: I18nUtils.get('shopping-list-popup.print'),
    shoppingListPopupPrintSimple: I18nUtils.get('shopping-list-popup.print-simple'),
    shoppingListPriceAndAmountForCurrentDay: I18nUtils.get('shopping-list.price-and-amount-for-current-day'),
    shoppingListPrintLabel: I18nUtils.get('shopping-list.print-label'),
    shoppingListSendViaEmail: I18nUtils.get('shopping-list.send-via-email'),
    shoppingListSummaryLabel: I18nUtils.get('shopping-list.summary-label'),
    shoppingListTitle: I18nUtils.get('shopping-list.title'),
    shoppingListToCart: I18nUtils.get('shopping-list.to-cart'),
    shoppingListTotalLabel: I18nUtils.get('shopping-list.total-label'),
    shoppingListTotalProducts: I18nUtils.get('shopping-list.total-products'),
    shoppingListVendorCode: I18nUtils.get('shopping-list.vendor-code'),
    sendShopListEmailTitle: I18nUtils.get('send-shop-list-email.title'),
    sendShopListEmailError: I18nUtils.get('send-shop-list-email.error'),
    sendShopListEmailSuccess: I18nUtils.get('send-shop-list-email.success'),
    sendShopListEmailForgotLabelText: I18nUtils.get('forgot.label-text'),
    sendShopListEmailForgotError: I18nUtils.get('forgot.email-error'),
    sendShopListEmailButton: I18nUtils.get('send-shop-list-email.btn'),
    SKU: I18nUtils.get('SKU:'),
    amountForCurrentDay: I18nUtils.get('shopping-list.price-and-amount-for-current-day'),
    sum: I18nUtils.get('sum'),
    totalWeight: I18nUtils.get('total-weight')
};

function ProductCounter() {

}

ProductCounter.prototype.init = function (params) {
    var self = this;
    this.$rootSelector = $(params.rootSelector);
    this.$input = this.$rootSelector.find('.item-counter-input');
    this.value = params.value;
    this.customClass = params.customClass;
    this.place = params.place;
    this.disabled = params.disabled;
    this.small = params.small;
    this.productId = params.productId;
    this.maxStock = params.maxStock;
    this.unit = params.unit;
    this.changeCallback = params.changeCallback;
    this.modelType = params.modelType;
    // Block send GA events flag
    this.sendGtmOff = params.sendGtmOff;

    if (this.customClass) {
        this.$rootSelector.find('.item-counter').addClass(this.customClass.split(',').join(' '));
    }

    this.counterSettings = params.unitSettings || '';
    this.minValue = this.counterSettings.minValue;
    this.maxValue = this.counterSettings.maxValue;
    this.delta = this.counterSettings.delta;

    this.isInteger = this.delta % 1 === 0;
    this.floatNum = this.isInteger
        ? 0
        : NumberUtils.getDecimalCount(this.delta);

    this.defineMaxValueByStock();

    this.$input.off('change').on('change', function () {
        self.changeValue({selector: this, operation: 'change'});
    });

    this.$input.off('focusin').on('focusin', function () {
        self.saveOldValue();
    });

    this.initValidate(params);

    var $plusButton = this.$rootSelector.find('.item-counter-button-plus'),
        $minusButton = this.$rootSelector.find('.item-counter-button-minus');

    $plusButton.off('click').on('click', function () {
        self.changeValue({selector: this, operation: '+'});
    });

    $minusButton.off('click').on('click', function () {
        self.changeValue({selector: this, operation: '-'});
    });

    if (this.disabled) {
        this.initDisabled();
    }
};

ProductCounter.prototype.filterValue = function (stringValue) {
    var firstDotPosition;

    stringValue = stringValue.replaceAll(/[^\d.,]/g, '');
    stringValue = stringValue.replaceAll(/,/g, '.');
    firstDotPosition = stringValue.search(/\./) + 1;
    stringValue = stringValue.substr(0, firstDotPosition) + stringValue.slice(firstDotPosition).replaceAll(/\./g, '');
    if (stringValue[0] === '.') {
        stringValue = '0' + stringValue;
    }
    if (_.isEmpty(stringValue)) {
        return stringValue;
    }

    return stringValue;
};

ProductCounter.prototype.formatValue = function (value) {
    return value.toFixed(this.floatNum).replace(/\./g,',');
};

ProductCounter.prototype.saveValue = function (value) {
    this.value = value;
    this.$input.val(this.formatValue(value));
    this.saveOldValue();
};

ProductCounter.prototype.changeValue = function (params) {
    var selector = params.selector,
        operation = params.operation,
        valueString = this.getCurrentValue(),
        previousValue = this.getPreviousValue();

    valueString = this.filterValue(valueString);

    if (_.isEmpty(valueString)) {
        this.saveValue(this.minValue);
        this.notifyChange();
        return;
    }

    var newValue = this.isInteger ? parseInt(valueString, 10) : parseFloat(valueString),
        difference;
    switch (operation) {
        case '+':
            newValue = parseFloat((newValue + this.delta).toFixed(this.floatNum));
            break;
        case '-':
            newValue = parseFloat((newValue - this.delta).toFixed(this.floatNum));
            break;
        case 'change':
            newValue = parseFloat((newValue).toFixed(this.floatNum));
            break;
        default:
            break;
    }

    if (newValue > this.maxValue) {
        newValue = this.maxValue;
    } else if (newValue < this.minValue) {
        newValue = this.minValue;
    }

    difference = newValue - previousValue;

    this.saveValue(newValue);

    if (difference !== 0) {
        this.sendGTM(selector, difference);
        this.notifyChange();
        this.addToDb(selector);
    }
};

ProductCounter.prototype.addToDb = function (el) {
    var root = el.closest('[data-ga-root]');
    dbBasketEvents.addDB(root.dataset.productId, root.dataset.modelId);
};

ProductCounter.prototype.saveOldValue = function () {
    this.$input.attr('data-old-val', this.value);
};

ProductCounter.prototype.isModelChanged = function () {
    var productId = this.productId,
        product = {},
        quantityField = '',
        shopListCookie = {};
    if (this.modelType === 'basket') {
        product = BasketUtils.getCartProduct(this.productId);
        quantityField = 'quantity';
    } else {
        shopListCookie = CookieUtils.getTransitCookie('shoppingList');
        product = _.find(checkObject(shopListCookie) ? shopListCookie.products : [], function (item) {
            return item.article === productId;
        });
        quantityField = 'count';
    }

    var currentValue = checkObject(product) ? product[quantityField] : 0;

    return this.value !== currentValue;
};

ProductCounter.prototype.sendGTM = function (selector, difference) {
    if (this.$rootSelector.data('no-gtm')) {
        return;
    }

    if (difference > 0) {
        globalConfig.aemServiceLayer.addToCart(selector, difference);
    } else {
        globalConfig.aemServiceLayer.removeFromCart(selector, -difference);
    }
};

ProductCounter.prototype.initDisabled = function () {
    this.$input.attr('disabled', 'disabled').addClass('disabled');
    this.$rootSelector.find('.item-counter-button-plus, .item-counter-button-minus').addClass('disabled').off('click');
};

ProductCounter.prototype.getCurrentValue = function () {
    var currentValue = this.$input.val();
    return this.replaceComma(currentValue);
};

ProductCounter.prototype.getPreviousValue = function () {
    var previousValue = this.$input.attr('data-old-val');
    return this.isInteger ? parseInt(previousValue, 10) : parseFloat(previousValue);
};

ProductCounter.prototype.defineMaxValueByStock = function () {
    if (this.disabled) {
        return;
    }
    if (!_.isUndefined(this.maxStock)) {
        var min = NumberUtils.min(this.maxValue, this.maxStock);
        this.maxValue = NumberUtils.truncate(min, this.floatNum);
    }
};

/**
 * @param {String} value
 * @returns {*}
 */
ProductCounter.prototype.replaceComma = function (value) {
    return checkObject(value) ? value.replaceAll(',', '.') : value;
};

ProductCounter.prototype.notifyChange = function () {
    if (this.changeCallback) {
        this.changeCallback({
            productId: this.productId,
            value: this.value,
            selector: this.$rootSelector.closest('[data-ga-root]')
        });
    }
};

/**
 * @param {Object} params
 */
ProductCounter.prototype.initValidate = function (params) {
    var value;

    if (_.isUndefined(params.value)) {
        value = this.minValue;
    } else {
        value = Math.min(Math.max(parseFloat(this.value), this.minValue), this.maxValue);
    }

    this.saveValue(value);
};

var SubscriptionHandler = (function () {
    function Controller(settings, validator) {
        _.extend(this, new BasicComponent(settings));

        if (this.el.length > 0) {
            this.validator = validator;
            this.dataStatusName = this.datadataClickCookieName + "value";
            this.dataEnableOpenAnimation = JSON.parse(this.dataEnableOpenAnimation);
            this.subblock = $(".subscription .sub-block");


            this.excludedPages = ["/"];


            this.userClickCounter;
            this.subscriptionViewedStatus;
            var that = this;


            this.userClickCounter = $.cookie(this.dataClickCookieName);
            this.subscriptionViewedStatus = $.cookie(this.dataStatusName);
            if (this.dataEnableOpenAnimation) {
                $("a[href]").on('click', function () {
                    var userClickCounter = $.cookie(that.dataClickCookieName);

                    if (_.isUndefined(userClickCounter)) {
                        $.cookie(that.dataClickCookieName, 1);
                        $.cookie(that.dataStatusName, false);
                    } else {
                        userClickCounter++;
                        $.cookie(that.dataClickCookieName, userClickCounter);
                    }
                });
            }

            this.init();
        }
    }


    Controller.prototype.init = function () {
        var excludedPagesCheck = this.excludedPagesCheck();

        if (!(_.isUndefined(this.userClickCounter))) {

            if ((this.userClickCounter > this.dataClickTriggerCount) && (!(JSON.parse(this.subscriptionViewedStatus))) && this.dataEnableOpenAnimation && excludedPagesCheck) {
                this.openPanel();
            }
        }

        if (!this.dataEnableOpenAnimation) {
            $(".subscription-wrapper").attr('view-mode', 'stable');
        }
        this.bindActions();
    };


    Controller.prototype.bindActions = function () {
        var that = this;
        $(".subscription-close").off("click").on("click", function () {
            that.postSubscribe(that);
        });

        $(".subscription-submit").off("click").on("click", function () {
            that.subscribeEmail();
        });
    };


    Controller.prototype.closePanel = function () {
        this.el.attr("view-mode", "hidden");
    };


    Controller.prototype.openPanel = function () {
        $(".subscription-wrapper").attr('view-mode', 'visible');
    };

    Controller.prototype.excludedPagesCheck = function () {

        var path = window.location.pathname;
        var result = true;
        if (_.contains(this.excludedPages, path)) {
            result = false;
        }

        return result;
    };

    Controller.prototype.subscribeEmail = function () {
        var $subscriptionEmail = $(".subscription-email"),
            email = $subscriptionEmail.val(),
            name = $subscriptionEmail.val(),
            url = globalConfig.pathPrefix + '/_jcr_content.subscribeemail.json' + "?email=" + email + "&name=" + name,
            that = this,
            validateResult = this.validator.validate(true);

        if (validateResult) {
            $.ajax(url, {
                dataType: "text",
                success: function (rawData) {
                    var data;
                    try {
                        data = $.parseJSON(rawData);
                        that.proccedServiceResponse(data);
                    } catch (err) {

                    }
                },
                error: function (xhr, status, err) {

                }
            });
        }
    };


    Controller.prototype.proccedServiceResponse = function (data) {
        var resultCode = data.resultCode;
        var that = this;

        switch (resultCode) {
            case 200:
                this.setSubBlockStatus("success");
                _.delay(this.postSubscribe, 2000, that);
                break;
            case 400:
                this.setSubBlockStatus("subscribed");
                _.delay(this.postSubscribe, 2000, that);
                break;
            case 401:
                this.setSubBlockStatus("");
                break;
        }
    };
    Controller.prototype.setSubBlockStatus = function (status) {
        var block = this.subblock;
        block.attr("sub-block-status", status);
    };
    Controller.prototype.postSubscribe = function (thisInstance) {
        thisInstance.closePanel();
        $.cookie(thisInstance.dataStatusName, true);
    };
    return Controller;
})();

$(document).ready(function () {
  var validatorSettings = {
  	elements: [
  		{selector: ".subscription-email", type: "email", checkEmpty: true, mask: /\S+@\S+\.\S+/, showError: true},
  		{selector: ".subscription-name", type: "input", checkEmpty: true, showError: true}
  	],
  	errorMessages: {
  		empty: "Элемент пуст",
  		mask: "Неправильный элемент"
  	},
  	submitElementSelector: ".subscription-submit",
  	disableSubmitOnInit: true,
  	showMessage: true,
    silentMode: true
  };

  var subscriptionHandlerSettings = {
    elSelector: ".subscription-wrapper"
  };


 });

'use strict';

var Header = {};

Header.forgotSettings = {};
Header.forgotSettings.form = '[data-js-forgot-form]';
Header.forgotSettings.input = '[data-js-forgot-input]';
Header.forgotSettings.error = '[data-js-forgot-error-mail]';
Header.forgotSettings.passwordError = '[data-js-forgot-error]';
Header.forgotSettings.success = '[data-js-forgot-success]';
Header.forgotSettings.help = Header.forgotSettings.form + ' .help-block';
Header.forgotSettings.button = '[data-js-forgot-btn]';
Header.forgotSettings.spinner = '.forgot-password .spinner-ajax';

Header.sendShoplistByEmail = {};
Header.sendShoplistByEmail.form = '.send-shoplist-email-form';
Header.sendShoplistByEmail.input = '.send-shoplist-email-input';
Header.sendShoplistByEmail.error = '.send-shoplist-email-error';
Header.sendShoplistByEmail.success = '.send-shoplist-email-success';
Header.sendShoplistByEmail.button = '.send-shoplist-email-btn';
Header.sendShoplistByEmail.spinner = '.send-shop-list-email .spinner-ajax';
Header.sendShoplistByEmail.help = Header.sendShoplistByEmail.form + ' .help-block';

Header.resetPasswordSettings = {};
Header.resetPasswordSettings.success = '.reset-password-success';
Header.resetPasswordSettings.form = '[data-js-reset-password-form]';
Header.resetPasswordSettings.$form = $(Header.resetPasswordSettings.form);
Header.resetPasswordSettings.button = '.reset-password-btn';
Header.resetPasswordSettings.input = '.reset-password-new';
Header.resetPasswordSettings.inputRepeat = '.reset-password-new-repeat';
Header.resetPasswordSettings.help = Header.resetPasswordSettings.form + ' .help-block-equal-error';
Header.resetPasswordSettings.$help = $(Header.resetPasswordSettings.help);
Header.resetPasswordSettings.helpReg = Header.resetPasswordSettings.form + ' .help-block-reg-error';
Header.resetPasswordSettings.$helpReg = $(Header.resetPasswordSettings.helpReg);

Header.regionSettings = {};
Header.regionSettings.modal = '.change-region-modal';
Header.regionSettings.link = '.region-link:not(.new)';
Header.regionSettings.confirmLink = '.confirm-region-link';

Header.shopSettings = {};
Header.shopSettings.modal = '.change-city-modal';
Header.shopSettings.searchInput = '.search-input';
Header.shopSettings.searchElement = '.search-field';
Header.shopSettings.searchCard = '.shop-card';
Header.shopSettings.shopButton = '.shop-button';
Header.shopSettings.searchTextMin = 1;

Header.iframe = '.oauth-iframe';
Header.iframeId = 'oauth-iframe';

Header.getShopListSendEmailPopupContent =
    _.memoize(function () {
        return TemplateUtils.compileUnderscore(TemplateManager.getShopListSendEmailTemplate(), {
            sendShopListEmailTitle: shopListI18n.sendShopListEmailTitle,
            sendShopListEmailError: shopListI18n.sendShopListEmailError,
            sendShopListEmailSuccess: shopListI18n.sendShopListEmailSuccess,
            sendShopListEmailForgotLabelText: shopListI18n.sendShopListEmailForgotLabelText,
            sendShopListEmailForgotError: shopListI18n.sendShopListEmailForgotError,
            sendShopListEmailButton: shopListI18n.sendShopListEmailButton,
            dataHeaderLink: globalConfig.sendShopListUrl,
            reCapturePublicKey: globalConfig.recaptchaSiteKey
        });
    });

Header.authModal = function () {
    var $templateData = $('body').find('*[data-js-lk-menu-template]'),
        loginIframeUrl = $templateData.attr('data-login-url'),
        homePath = $templateData.attr('data-home-path'),
        registerPath = $templateData.attr('data-register-path'),
        html = TemplateUtils.compileUnderscore(TemplateManager.getAuthModalTemplate(), {
            loginIframeUrl: loginIframeUrl,
            homePath: homePath,
            registerPath: registerPath,
            translate: {
                lost: I18nUtils.get('auth.lost-password-link'),
                title: I18nUtils.get('auth.title'),
                additional: I18nUtils.get('auth.additional-text'),
                registration: I18nUtils.get('auth.registration-link')
            }
        });
    var $iframe = $(Header.iframe);
    Header.initializeIframes();
    $iframe.load(function() {
        var email = $('[data-js-registration-wrapper]').find('#mail').val();
        if (_.isNotEmpty(email)) {
            var iframeWindow = document.getElementById(Header.iframeId),
                iframeContent = iframeWindow && iframeWindow.contentWindow;
            iframeContent && $(iframeContent.document.getElementById('username')).val(email);
        }
    });
};

Header.forgotModal = function () {
    var $templateData = $('body').find('*[data-js-lk-menu-template]'),
        registerPath = $templateData.attr('data-register-path'),
        html = TemplateUtils.compileUnderscore(TemplateManager.forgotPasswordTemplate(), {
            forgotPath: globalConfig.forgotPasswordAjaxHref,
            registerPath: registerPath,
            reCapturePublicKey: globalConfig.recaptchaSiteKey,
            translate: {
                title: I18nUtils.get('forgot.lost-password-link'),
                existText: I18nUtils.get('forgot.exist-text'),
                sendedText: I18nUtils.get('forgot.sended-text'),
                labelText: I18nUtils.get('forgot.label-text'),
                emailError: I18nUtils.get('forgot.email-error'),
                regLink: I18nUtils.get('forgot.reg-link'),
                errorPassword: I18nUtils.get('forgot.error-password'),
                btnText: I18nUtils.get('forgot.button-text')
            }
        });
    var settings = function () {
        Header.initForgotPass();
    };

    openPopUp(html, 'html', settings);
};

Header.forgotShowError = function () {
    $(Header.forgotSettings.error).show();
    $(Header.forgotSettings.success).hide();
    $(Header.forgotSettings.form).show();
};

Header.forgotShowPasswordError = function () {
    Header.resetPasswordSettings.$form.hide();
    $(Header.forgotSettings.passwordError).show();
};

Header.forgotShowSuccess = function () {
    $(Header.forgotSettings.success).show();
    $(Header.forgotSettings.error).hide();
    $(Header.forgotSettings.form).hide();
};
Header.showSendShopListToEmailPopup = function () {
    var html = Header.getShopListSendEmailPopupContent();

    $.fancybox.open({
        src: html,
        type: 'html',
        touch: false,
        afterLoad: function () {
            Header.initSendShopListEmail();

            $(Header.sendShoplistByEmail.input).val('');
            $([Header.sendShoplistByEmail.error, Header.sendShoplistByEmail.success].join(', ')).hide();
            $(Header.sendShoplistByEmail.form).removeClass('has-error has-success').show();
            $(Header.sendShoplistByEmail.button).attr('disabled', 'disabled');
            $(Header.sendShoplistByEmail.help).hide();
        }
    });
};
Header.sendShopListToEmailShowError = function () {
    $(Header.sendShoplistByEmail.error).show();
    $(Header.sendShoplistByEmail.success).hide();
};

Header.sendShopListToEmailShowSuccess = function () {
    $(Header.sendShoplistByEmail.success).show();
    $(Header.sendShoplistByEmail.error).hide();
};

Header.mailValidate = function(settings) {
    var isValid = !!$(settings.input).val().match(globalConfig.emailReg),
        $form = $(settings.form),
        $help = $(settings.help),
        captureToken = $form.find('#g-recaptcha-response').val();
    $form.toggleClass('has-error', !isValid);
    $form.toggleClass('has-success', isValid);
    $(settings.button).attr('disabled', function(){
        return isValid && captureToken ? null : 'disabled'
    });

    isValid ? $help.hide() : $help.show();
};


Header.sendMailMessage = function (settings, success, error, products, isShopList) {
    var data = {};
    var $spinner = $(settings.spinner);
    var $form = $(settings.form);

    if (isShopList) {
        data['body'] = JSON.stringify({
            'clientEmail': $(settings.input).val(),
            'storeId': globalConfig.defaultStoreId,
            'products': products
        });
        sendAjax($spinner, $form, success, error, data);
    } else if(settings.form === '[data-js-forgot-form]') {
        grecaptcha.ready(function() {
            grecaptcha.execute(globalConfig.recaptchaSiteKey).then(function(token) {
                data['email'] = $(settings.input).val();
                data['g-recaptcha-response'] = token;
                sendAjax($spinner, $form, success, error, data);
            });
        });
    } else {
        data['email'] = $(settings.input).val();
        sendAjax($spinner, $form, success, error, data);
    }
};

function sendAjax($spinner, $form, success, error, data) {
    $spinner.addClass('loading');
    $.ajax({
        type: 'POST',
        url: $form.attr('action'),
        dataType: 'json',
        data: data
    }).done(function (result) {
        $spinner.removeClass('loading');
        if (result.data === true) {
            success();
        } else {
            error();
        }
    }).fail(function () {
        $spinner.removeClass('loading');
        error();
    });
}

Header.resetPasswordModal = function () {
    var html = TemplateUtils.compileUnderscore(TemplateManager.resetPasswordTemplate(), {
        lkPath: $('[data-js-lk-menu-template]').attr('data-js-lk-path'),
        isUserAuth: CookieUtils.isUserAuth(),
        translate: {
                title: I18nUtils.get('reset-password.title'),
                goToLk: I18nUtils.get('reset-password.go-to-lk'),
                successText: I18nUtils.get('reset-password.success-text'),
                passwordText: I18nUtils.get('reset-password.password-text'),
                repeatText: I18nUtils.get('reset-password.password-repeat-text'),
                passwordError: I18nUtils.get('reset-password.password-error'),
                btnText: I18nUtils.get('reset-password.button-text')
            }
        });

    var settings = function () {
        $(Header.resetPasswordSettings.button).click(function () {
            Header.resetPasswordSend();
        });
        $(Header.resetPasswordSettings.inputRepeat).on(' change keyup ', function () {
            Header.resetPasswordValidate();
        });
        $(Header.resetPasswordSettings.input).keyup(function () {
            Header.resetPasswordValidate();
        });
    };

    openPopUp(html, 'html', settings);
};

Header.activateAccountModal = function () {
    var html = TemplateUtils.compileUnderscore(TemplateManager.resetPasswordTemplate(), {
        lkPath: $('[data-js-lk-menu-template]').attr('data-js-lk-path'),
        isUserAuth: CookieUtils.isUserAuth(),
        translate: {
            title: I18nUtils.get('checkout.payment.express-reg'),
            goToLk: I18nUtils.get('reset-password.go-to-lk'),
            successText: I18nUtils.get('registration.success'),
            passwordText: I18nUtils.get('reset-password.password-text'),
            repeatText: I18nUtils.get('reset-password.password-repeat-text'),
            passwordError: I18nUtils.get('reset-password.password-error'),
            btnText: I18nUtils.get('registration.button-text')
        }
    });

    var settings = function () {
        $(Header.resetPasswordSettings.button).click(function () {
            Header.activateAccountSend();
        });
        $(Header.resetPasswordSettings.inputRepeat).on(' change keyup ', function () {
            Header.resetPasswordValidate();
        });
        $(Header.resetPasswordSettings.input).keyup(function () {
            Header.resetPasswordValidate();
        });
    };

    openPopUp(html, 'html', settings);
};

Header.resetPasswordSuccess = function () {
    $(Header.resetPasswordSettings.form).hide();
    $(Header.resetPasswordSettings.success).show();
};

Header.resetPasswordValidate = function () {
    var inputValue = $(Header.resetPasswordSettings.input).val(),
        inputValueRep = $(Header.resetPasswordSettings.inputRepeat).val();

    if (!inputValue) {
        Header.resetPasswordRegError(true, true);
        Header.resetPasswordEqualError(true, true);
        return;
    }
    Header.resetPasswordEqualError(false);
    Header.resetPasswordRegError(false);
    if (inputValue !== inputValueRep) {
        if (!inputValue.match(globalConfig.passwordReg)) {
            Header.resetPasswordRegError(true);
        }
        Header.resetPasswordEqualError(true);
    } else {
        if (inputValue.match(globalConfig.passwordReg)) {
            Header.resetPasswordRegError(false);
            Header.resetPasswordEnableButton();
        } else {
            Header.resetPasswordRegError(true);
        }
    }
};

Header.resetPasswordError = function(help, text) {
    return function(isError, isEmpty) {
        var $help =$(help),
            errorText = !isEmpty
                ? I18nUtils.get(text)
                : I18nUtils.get('registration.obligatory-field');
        $help.parent().toggleClass('has-success', !isError);
        $help.parent().toggleClass('has-error', isError);
        isError ? $help.show() : $help.hide();
        if (isError) {
            $help.html(errorText);
            $(Header.resetPasswordSettings.button).attr('disabled', 'disabled');
        }
    };
};

Header.resetPasswordRegError = Header.resetPasswordError(
    Header.resetPasswordSettings.helpReg,
    'reset-password.password-format-error'
);

Header.resetPasswordEqualError = Header.resetPasswordError(
    Header.resetPasswordSettings.help,
    'reset-password.password-error'
);

Header.resetPasswordEnableButton = function () {
    $(Header.resetPasswordSettings.button).removeAttr('disabled');
};

Header.resetPasswordSend = function () {
    $.ajax({
        type: 'POST',
        url: globalConfig.resetPasswordAjaxHref,
        data: {
            'password': $(Header.resetPasswordSettings.input).val(),
            'token': UrlUtils.getParameter(location.search, 'token')
        }
    }).done(function (result) {
        if (result.data === true) {
            Header.resetPasswordSuccess();
        } else {
            Header.resetPasswordRegError();
        }
    }).fail(function () {
        Header.resetPasswordRegError();
    });
};

Header.activateAccountSend = function () {
    $.ajax({
        type: 'POST',
        url: globalConfig.activateAccountAjaxHref,
        data: {
            'password': $(Header.resetPasswordSettings.input).val(),
            'token': UrlUtils.getParameter(location.search, 'token')
        }
    }).done(function (result) {
        if (result && result.data === true) {
            Header.resetPasswordSuccess();
        } else {
            Header.resetPasswordRegError();
        }
    }).fail(function () {
        Header.resetPasswordRegError();
    });
};

Header.initializeIframes = function () {
    var $iframes = $(Header.iframe);
    if (!CookieUtils.isUserAuth()) {
        Header.setOauthIFramesSrc($iframes.data('init-url'));
    } else if (window.location.pathname.indexOf('/login') !== -1) {
        window.location = $iframes.data('home-path');
    }
};

Header.setNewIFrame = function (src) {
    var iframe = document.createElement('iframe');
    iframe.setAttribute('src', src);
    $('body').append(iframe);
    iframe.onload = function () {
        window.location = globalConfig.homePath;
    };
};

Header.setOauthIFramesSrc = function (src) {
    var $oauthIFrames = $(Header.iframe),
        loginFormValidator = new FormValidator();
    $oauthIFrames.each(function (i) {
        var iframe = $oauthIFrames[i];
        iframe.onload = function () {
            loginFormValidator.addListenerLogin('.auth-modal input[name="j_username"]', true, loginFormValidator.maxEmailLength, globalConfig.emailReg);
            loginFormValidator.addListenerLogin('.auth-modal input[name="j_password"]', true);
        };
        iframe.src = src;
    });
};

Header.initSendShopListEmail = function () {
    $(Header.sendShoplistByEmail.button).click(function () {
        globalConfig.aemServiceLayer.gtmEventPush('wishlist-send');
        $(Header.sendShoplistByEmail.form).hide();
        var products = _.map(StorageUtils.getTransitStorage(CookieUtils.SHOP_LIST_COOKIE_NAME),
            function (product) {
                return {
                    productId: product.article,
                    quantity: product.count
                };
            });
        Header.sendMailMessage(Header.sendShoplistByEmail, Header.sendShopListToEmailShowSuccess, Header.sendShopListToEmailShowError, products ,true);
    });
    $(Header.sendShoplistByEmail.input).on('input', function () {
        Header.mailValidate(Header.sendShoplistByEmail);
    });
};

Header.initForgotPass = function () {
    $(Header.forgotSettings.form).submit(function (e) {
        e.preventDefault();
        Header.sendMailMessage(Header.forgotSettings, Header.forgotShowSuccess, Header.forgotShowError, false);
    });
    $(Header.forgotSettings.input).keyup(function () {
        Header.mailValidate(Header.forgotSettings);
    });
};

Header.initRecapture = function (cb) {
    CaptchaUtils.processToken(cb, globalConfig.recaptchaSiteKey);
};

Header.redirectAfterWrongLogin = function () {
    // for override
};

Header.bindEmptyProductListPreview = function (params) {
    $(params.eventSelector).on('mouseenter', function () {
        var productsCount,
            $emptyListContainer = $(params.emptyListContainer);

        if (params.emptyListType === 'shopList') {
            var products = ShopListStorageUtils.getProducts();
            productsCount = _.isNotEmpty(products) ? products.length : 0;
            $('[data-js-icon-help]').attr('title', params.emptyListIconTooltip);
        } else {
            productsCount = BasketHeader.getProductsCount();
        }

        if ($emptyListContainer.length === 0) {
            $(params.emptyListContent).append(params.emptyListTemplate);
            $emptyListContainer = $(params.emptyListContainer);
        }

        $emptyListContainer.toggleClass('hidden', productsCount !== 0);
    });
};

Header.initLkMenuNav = function() {
    var accessTokenValueEmpty = !CookieUtils.isUserAuth();
    $('*[data-mobile-not-auth]').find('.mobile-lk__icon').toggleClass('hidden', !accessTokenValueEmpty);
    $('*[data-mobile-auth]').find('.mobile-lk__icon').toggleClass('hidden', accessTokenValueEmpty);

    if (accessTokenValueEmpty) {
        return;
    }
    var $body = $('body'),
        $lkMenuWrapper = $('*[data-js-lk-menu-wrapper]');
    if ($lkMenuWrapper.length === 0) {
        var $templateData = $body.find('*[data-js-lk-menu-template]'),
            lkPath = $templateData.attr('data-js-lk-path'),
            suffixIndex = lkPath.indexOf('.html'),
            prefix = suffixIndex === -1 ? lkPath : lkPath.substr(0, suffixIndex) + '/',
            postfix = suffixIndex === -1 ? '' : '.html',
            userData = CookieUtils.getUserData(),
            loualtyCategory = _.isNotUndefined(userData) ? JSON.parse(userData).loyaltyCategory : '0',
            isServiceCard = loualtyCategory === '1',
            isProfCard = loualtyCategory === '3',
            compileLkMenu = TemplateUtils.compileUnderscore(TemplateManager.getLkMenuTemplate(), {
                isServiceCard: isServiceCard,
                isProfCard: isProfCard,
                prefix: prefix,
                postfix: postfix,
                logoutUrl: $templateData.attr('data-logout-url'),
                showPurchaseHistory: $templateData.attr('data-show-purchase-history') === 'true',
                showHistoryReturns: $templateData.attr('data-show-history-returns') === 'true',
                showCostAnalysis: $templateData.attr('data-show-cost-analysis') === 'true',
                showServiceHistory: $templateData.attr('data-show-service-history') === 'true',
                showToolsRent: $templateData.attr('data-show-tools-rent') === 'true',
                showTaxDeduction: $templateData.attr('data-show-tax-deduction') === 'true',
                showPersonalManager: $templateData.attr('data-show-personal-manager') === 'true',
                translate: {
                    lk : I18nUtils.get('lk.nav-menu.lk'),
                    close : I18nUtils.get('lk.nav-menu.close'),
                    main2 : I18nUtils.get('lk.nav.main2'),
                    shopList : I18nUtils.get('lk.nav.shop-list'),
                    history : I18nUtils.get('lk.nav.history'),
                    historyReturn : I18nUtils.get('lk.nav.history-returns'),
                    costAnalysis : I18nUtils.get('lk.nav.cost-analysis'),
                    services : I18nUtils.get('lk.nav.services'),
                    info : I18nUtils.get('lk.nav.info'),
                    addresses : I18nUtils.get('lk.nav.addresses'),
                    changepass : I18nUtils.get('lk.nav.changepass'),
                    changeemail : I18nUtils.get('lk.nav.changeemail'),
                    toolRents : I18nUtils.get('lk.nav.tool-rents'),
                    viewedProducts : I18nUtils.get('lk.nav.viewed-products'),
                    nalog : I18nUtils.get('lk.nav.nalog'),
                    logout2 : I18nUtils.get('lk.nav.logout2'),
                    manager : I18nUtils.get('lk.info.manager')
                }
            });
        $body.append(compileLkMenu);
        $lkMenuWrapper = $body.find('*[data-js-lk-menu-wrapper]');
    }
    $lkMenuWrapper.find('*[data-js-close-lk-menu]').click(function() {
        hideNavMenu();
    });

    $body.find('*[data-js-open-lk-menu]').click(function () {
        $body.addClass('is_blocked');
        $lkMenuWrapper.addClass('is_open');
    });

    $lkMenuWrapper.find('*[data-js-lk-logout]').click(function (e) {
        e.preventDefault();
        CookieUtils.logoutUser();
        var $this = $(this);
        globalConfig.aemServiceLayer.gtmEventPush('signout');
        $.ajax({
            url: $this.attr('data-resource'),
            type: 'POST'
        });
        Header.setNewIFrame($this.attr('data-logout-url'));
    });
    $(document).on('lk-menu.close', function() {
        hideNavMenu();
    });

    function hideNavMenu() {
        $body.removeClass('is_blocked');
        $lkMenuWrapper.removeClass('is_open');
    }
};

Header.showSpinnerBeforeToken = function(params) {
    var $spinner = $(params.spinner);
    var $form = $(params.form);

    $spinner.addClass('loading');

    Header.initRecapture(function(token) {
        $form.find('#g-recaptcha-response').val(token);

        if (params.callback) {
            params.callback();
        }

        $spinner.removeClass('loading');
    });
};

Header.checkRegistrationEmail = function() {
    var $email = $('.custom-form input[type="email"]');
    var emailValue = $email.val();

    if (emailValue) {
        $(Header.forgotSettings.input).val(emailValue);
        Header.mailValidate(Header.forgotSettings);
    }
};

$(document).ready(function () {
    if ($(Header.iframe).attr('src')) {
        CookieUtils.removeUserAuth();
        $('.header-panel .register-block').removeClass('hidden');
        $('.header-panel .user-account').addClass('hidden');
    }
    
    const FORM_FORGOT_PASS_OPEN = 'form:forgotPass:open';
    if (window.location.hash === '#wrongresetlink') {
        document.dispatchEvent(new CustomEvent(FORM_FORGOT_PASS_OPEN));
    }

    const FORM_AUTH_OPEN = 'form:auth:open';
    $('*[data-js-login-button]').click(function () {
        globalConfig.aemServiceLayer.gtmEventPush('signin');
        document.dispatchEvent(new CustomEvent(FORM_AUTH_OPEN));
    });

    $('.register-button').click(function (e) {
        e.stopPropagation();
        globalConfig.aemServiceLayer.gtmEventPush('registration');
        window.location = $(this).attr('data-href');
    });

    Header.initLkMenuNav();

    $('.social-links .social-icon').click(function (e) {
        e.stopPropagation();
        e.preventDefault();

        var $this = $(this);

        globalConfig.aemServiceLayer.gtmEventPush('social-click', {root: $this});
        window.open($this.attr('href'), '_blank');
    });

    $(Header.regionSettings.link).click(function (e) {
        var $self = $(this),
            newRegion = $self.data('region-name');
        globalConfig.aemServiceLayer.gtmEventPush('city-switch', {root: newRegion});
        RegionUtils.changeRegionFromRegionLink($self, e);

        if (e.target.dataset.regionId === '34') {
            const city = e.target.dataset.regionName;
            if (city !== 'Москва и область') localStorage.setItem('currcite', city);
        }
    });

    $(document).on('mouseup', '[data-js-send-via-email]', Header.showSendShopListToEmailPopup);

    $(document).on('keyup', Header.shopSettings.modal + ' ' + Header.shopSettings.searchInput, function () {
        var searchText = $(this).val().trim().toLowerCase(),
            $searchCard = $(Header.shopSettings.modal + ' ' + Header.shopSettings.searchCard);
        if (searchText.length >= Header.shopSettings.searchTextMin) {
            $searchCard.hide();
            $searchCard.find(Header.shopSettings.searchElement + ":contains('" + searchText + "')").parent().show();
        } else {
            $searchCard.show();
        }
    });

    $(document).on('click', Header.shopSettings.modal + ' ' + Header.shopSettings.shopButton, function () {
        var $this = $(this),
            redirectLink = $this.data('redirectLink'),
            $productListMediator = $('.products-list-mediator[data-element-id="products-list-mediator"]'),
            $shopButton = $(Header.shopSettings.modal + ' ' + Header.shopSettings.shopButton);
        globalConfig.aemServiceLayer.gtmEventPush('city-switch', {root: $this});
        $.fancybox.close();
        $shopButton.removeClass('red-button');
        $shopButton.html(I18nUtils.get('localization.change-shop'));
        $shopButton.addClass('green-button');
        $this.removeClass('green-button');
        $this.addClass('red-button');
        $this.html(I18nUtils.get('localization.my-shop'));
        $(Header.shopSettings.shopSelectLink).html($this.data('store-name'));

        $productListMediator.trigger('mediator:externalViewChange');

        if (redirectLink) {
            window.location.href = redirectLink;
        }
    });
    
    $(document).on('click', '[data-fancybox-forgot]', function () {
        document.dispatchEvent(new CustomEvent(FORM_FORGOT_PASS_OPEN));
    });

    $(document).on("captcha_password_filled_right", function () {
        Header.mailValidate(Header.forgotSettings);
    });
    $(document).on("captcha_shoplist_filled_right", function () {
        Header.mailValidate(Header.sendShoplistByEmail);
    });

    $(document).on('captcha-send-shoplist.load', function() {
        Header.showSpinnerBeforeToken({
            form: Header.sendShoplistByEmail.form,
            spinner: Header.sendShoplistByEmail.spinner
        });
    });
    $(document).on('captcha-forgot-password.load', function() {
        Header.showSpinnerBeforeToken({
            form: Header.forgotSettings.form,
            spinner: Header.forgotSettings.spinner,
            callback: Header.checkRegistrationEmail
        });
    });
});

window.onloadCallbackSendShopList = function () {
    CaptchaUtils.scriptTagCallback('send-shoplist');
};

window.onloadCallbackForgotPassword = function () {
    CaptchaUtils.scriptTagCallback('forgot-password');
};

$(document).ready(function () {
    var HEADER_MAIN = '.header-block',
        HEADER_MAIN_INNER = '.header-inner',
        IS_STICKY = 'is-sticky',
        CATALOG_MENU = '.catalog-menu',
        CATALOG_MENU_DROP = 'uc-dropdown-container',
        CHECKOUT_BREADCRUMBS = '.checkout-bread',
        CHECKOUT_SUCCESS_HEADER = '.success-page-header',
        EMPTY_URL = '.html',
        prevHeaderFixedPosition = 0;
    $(CATALOG_MENU).mouseleave(function () {
        if ($(CATALOG_MENU + ':hover').length === 0) {
            if ($(HEADER_MAIN_INNER).hasClass(IS_STICKY)) {
                $(HEADER_MAIN_INNER).css('top', '0');
                prevHeaderFixedPosition = window.scrollY;
            }
        }
    });

    TooltipUtils.init({selector: '.header-block .icon-help', position: {my: "right top-70"}});

    var pagesNotNeedFixedHeader = globalConfig.pagesNotNeedFixedHeader ? globalConfig.pagesNotNeedFixedHeader.split(',') : [],
        needFixedCurrentPage = pagesNotNeedFixedHeader.length === 0 || _.some(pagesNotNeedFixedHeader, function (page) {
                return page === EMPTY_URL || document.URL.indexOf(page) === -1;
            }),
        $headerMain = $(HEADER_MAIN),
        $checkoutHeader = $(CHECKOUT_SUCCESS_HEADER + ', ' + CHECKOUT_BREADCRUMBS),
        $stickyElement = $(HEADER_MAIN_INNER);

    $(window).scroll(function () {
        if (!needFixedCurrentPage) {
            return;
        }
        var heightAllElements = 0,
            scrollPosition = this.scrollY;

        $headerMain.prevAll().add($checkoutHeader).each(function (index, item) {
            var $item = $(item);
            if (!$item.is('script') && $item.is(':visible')) {
                heightAllElements += $item.outerHeight();
            }
        });
        var needSticky = scrollPosition >= heightAllElements;
        $stickyElement.toggleClass(IS_STICKY, needSticky);

        if (prevHeaderFixedPosition < heightAllElements) {
            prevHeaderFixedPosition = heightAllElements;
        }
        if (isDropdownDisplayed() && !bootstrapGridCheck.isMobile()) {
            var delta = prevHeaderFixedPosition - scrollPosition;
            if (delta > 0) {
                prevHeaderFixedPosition = scrollPosition;
                delta = 0;
            }
            $stickyElement.css('top', delta + 'px');
        } else {
            if (!bootstrapGridCheck.isMobile()) {
                $stickyElement.css('top', '0');
            }
            prevHeaderFixedPosition = scrollPosition;
        }
    });

    function isDropdownDisplayed() {
        var dropdown = document.querySelector(CATALOG_MENU_DROP);
        return dropdown ? window.getComputedStyle(dropdown).display !== 'none' : false;
    }
});

var footerController = (function () {
    function controller(settings) {
        this.settings = settings;
        // Implement Inheritance!
        _.extend(this, new BasicComponent(settings));

        this.init();
    }

    controller.prototype.init = function () {
        var $headers = $(this.settings.footerMenuHeaderSelector);
        if (bootstrapGridCheck.isXs()) {
            $headers.each(function () {
                $(this).children("a").attr("data-toggle", "collapse");
            })
        } else {
            $(this.settings.footerMenuItemsBlockSelector).addClass("in");
        }
    };

    return controller;
}());

var footerInit = (function () {
    function controller() {
        'use strict';
        var settings = {
            footerRoot: "footer",
            elSelector: ".container[data-element-id='footer']",
            footerMenuHeaderSelector: ".footer-header",
            footerMenuItemsBlockSelector: ".panel-collapse"
        };

        var elements = $(settings.elSelector);

        _.each(elements, function (element) {
            var elementSettings = {};
            elementSettings.el = $(element);

            _.extend(elementSettings, settings);
            new footerController(elementSettings);

        });
    }

    return controller;
}());

// ===========================  Entry Point ==================
// Entry point: Don't change!
// =========================================================== 

$(document).ready(function () {
    new footerInit();
});

$(document).on("click", ".localization-product-stores a, .localization-product-stores .other-shops-link", function () {
    var button = $(this).parent();
    getProductStock(button, true);
});

$(document).ready(function () {
    showProductStock();
});

function showProductStock(callback) {
    getProductsStock('.localization-product-stores a, .localization-product-stores .other-shops-link', callback);
}

var localizationFirstStockLoaded;
function getProductsStock(selector, callback) {
    if (localizationFirstStockLoaded) {
        return
    }
    if (_.isUndefined(localizationFirstStockLoaded)) {
        localizationFirstStockLoaded = true;
    }

    var ids = [],
        stockPlaces = [];
    $(selector).each(function (index, obj) {
        var $button = $(obj.parentElement);
        if (!$button.find('.localization-product-stores-list').html()) {
            var productId = $button.data('product-id');
            ids.push(productId);
            stockPlaces.push({
                $place: $button,
                id: productId
            })
        }
    });

    if (_.isEmpty(ids)) {
        return;
    }
    $.ajax({
        url: globalConfig.storeStockAjaxUrl,
        data: {
            productId: ids.join(',')
        }
    }).done(function (response) {
        var $response = $(response);
        stockPlaces.forEach(function(obj) {
            obj.$place.find('.localization-product-stores-list')
                .html($response.filter('div[data-product-id="' + obj.id + '"]'));
            var htmlCount = obj.$place.find('.localization-product-stores-list .stock-title').data('count'),
               emptyStock = _.isUndefined(htmlCount);

            if (!emptyStock) {
                $('.localization-product-stock[data-product-id="' + obj.id + '"]').html(htmlCount);
            }
            if (_.isNotUndefined(callback)) {
                callback(obj.id, emptyStock);
            }
        });
        localizationFirstStockLoaded = false;
    });
}

function getProductStock(button, needOpen) {
    if (!button.find('.localization-product-stores-list').html()) {
        $.ajax({
            url: globalConfig.storeStockAjaxUrl,
            data: {
                favoriteStoreId: globalConfig.defaultStoreId,
                productId: button.data('product-id')
            }
        }).done(function (response) {
            button.find('.localization-product-stores-list').html(response);
            bindLocalizationPopUp(needOpen, button)
        });
    } else {
        bindLocalizationPopUp(needOpen, button);
    }
}

function bindLocalizationPopUp(needOpen, button) {
    if (needOpen) {
        $('.localization-product-stores-list:not(".hidden")').addClass('hidden');
        button.find('.localization-product-stores-list').removeClass('hidden');
        var $localizationProductStoresList = $('.localization-product-stores-list');


        $('body').on('click touchstart', function(e){
            if(!$localizationProductStoresList.is(e.target)){
                $localizationProductStoresList.addClass('hidden');
            }
            return;
        });

        $localizationProductStoresList.mouseleave(function () {
            $(this).addClass('hidden');
        });
    }
}

$(document).click(function(e){
    var $target = $(e.target);
    if ($target.closest('.localization-product-stores-list').length) {
        return;
    }
    $('.localization-product-stores-list:not(".hidden")').addClass('hidden');
    e.stopPropagation();
});

$(document).on('click', '.stores-content .shop-button, .store-card-popup .shop-button', function () {
    var $this = $(this),
        newRegion = $this.attr('data-region-id');
    if (newRegion !== globalConfig.regionId) {
        var regionLink, regionCode, legacyCode;
        $('.regions-list a').each(function (index, e) {
            var $e = $(e),
                regId = $e.attr('data-region-id');
            if (regId === newRegion) {
                regionLink = $e.attr('data-region-link');
                regionCode = $e.attr('data-region-code');
                legacyCode = $e.data('legacy-code');
            }
        });
        CookieUtils.setRegionId({
            regionId: newRegion,
            storeId: $this.attr('data-store-short-id'),
            regionCode: regionCode,
            storeName: $this.attr('data-store-name'),
            legacyCode: legacyCode,
            bitrixDomain: $('#bitrixDomain').attr('data-bitrix-domain'),
            aemDomain: $('#aemDomain').attr('data-aem-domain'),
            legacyPath: $('#legacyPath').attr('data-legacy-path'),
            url: regionLink,
            needReload: false
        });
    }
});

$(document).ready(function () {
    if (!CookieUtils.getChangeShopMessage()) {
        var $localizationBlock = $('.localization-block'),
            $popoverContainer = $localizationBlock.find('.popover-container');
        $popoverContainer.show();
        $localizationBlock.popover({
            container: '.popover-container',
            trigger: 'manual',
            html: true,
            content: I18nUtils.get('localhost.change-shop-text') + '<span class="pull-right">&times;</span>',
            placement: 'top'
        });
        $localizationBlock.popover('show');
        $('.popover-container span').click(function () {
            $popoverContainer.hide();
            CookieUtils.setChangeShopMessage();
        });
    }
});

var ShopListController = (function (settings) {

    function controller(settings) {
        this.settings = settings;
        this.shopListProductsController = new ShopListProductsController(settings, this);
        this.countProductsBeforeScroll = settings.countProductsBeforeScroll;
        this.updateCountInHeader(StorageUtils.getStorageItemsIds(CookieUtils.SHOP_LIST_COOKIE_NAME).length);

        this.whishlistUpdateHandler = function(){
            this.onReloadContent()
        }.bind(this);

        this.loadContent();
    }

    controller.prototype.loadContent = function () {
        var self = this,
            callback = function () {
                self.shopListProductsController.showProducts();
            };
        ShopListStorageUtils.loadShopList(callback);
    };

    controller.prototype.init = function () {
        var shopListWrapper = '.shop-list-wrapper',
            $shopListWrapper = $(shopListWrapper),
            self = this,
            productsCount = ShopListStorageUtils.getProducts().length;

        function handlerIn() {
            $shopListWrapper.addClass('hovered');
            self.refreshViewHeight();
        }

        function handlerOut(event) {
            var relatedTarget = event.relatedTarget;
            if (relatedTarget && relatedTarget.firstChild &&
                $(relatedTarget.firstChild).hasClass('ui-tooltip-content')) {
                return;
            }
            $shopListWrapper.find('.shop-list-not-empty .item-counter-input').blur();
            $shopListWrapper.removeClass('hovered');
        }

        if (productsCount >= 0 && !bootstrapGridCheck.isMobile()) {
            $shopListWrapper.hover(handlerIn, handlerOut);
        } else {
            $shopListWrapper.removeClass('hovered');
            $shopListWrapper.off('mouseenter mouseleave');
        }

        this.initCounter();
        this.initTooltip();
        this.updateTotalFields();
        this.initScrollArea();
        this.bindHandlers();
        this.showHeaderEmptyShopList();
    };

    controller.prototype.bindHandlers = function () {
        var self = this,
            el = this.settings.elSelector,
            $el = $(el);

        $('.shop-list-not-empty .card-item').each(function (i, element) {
            var $element = $(element),
                productId = $element.attr('data-product-id');
            $element.find('.icon-delete').off('click').on('click', _.bind(self.handleRemoveProduct, self, {
                productId: productId,
                $element: $element
            }));
        });

        $el.off('shoppingListController:removeProduct').on('shoppingListController:removeProduct',
            _.bind(this.onRemoveProductInShoppingListPage, this));

        $el.off('shoppingListController:clearAll').on('shoppingListController:clearAll',
            _.bind(this.onClearAllInShoppingListPage, this));

        $el.off('*:reloadContent').on('*:reloadContent',
            _.bind(this.onReloadContent, this));

        $el.off('*:updateProductCount').on('*:updateProductCount',
            _.bind(this.onUpdateProductCount, this));

        document.body.removeEventListener('wishlist:update', this.whishlistUpdateHandler);
        document.body.addEventListener('wishlist:update', this.whishlistUpdateHandler);
    };

    controller.prototype.initScrollArea = function () {
        var scrollArea = '.shop-list-wrapper .card-quick-scroll',
            $scrollArea = $(scrollArea);
        if ($scrollArea.length > 0) {
            $scrollArea.mCustomScrollbar("destroy");
            if (ShopListStorageUtils.getProducts().length > this.countProductsBeforeScroll) {
                $scrollArea.mCustomScrollbar({});
            }
        }
        this.refreshViewHeight();
    };

    controller.prototype.initCounter = function () {
        var self = this;

        $('.card-quick.shop-list-wrapper .card-item').each(function (i, el) {
            var $el = $(el),
                id = $el.attr('data-product-id'),
                unit = $el.attr('data-unit'),
                count = StorageUtils.getStorageItemCount(CookieUtils.SHOP_LIST_COOKIE_NAME, id),
                unitSettings = BasketUtils.createMeasuresSettings($el.find('[data-js-counter-root]'));

            var params = {
                rootSelector: '.shop-list-wrapper.card-quick .shop-list-not-empty .counter-wrapper-' + id,
                customClass: 'small header', value: count, unit: unit, productId: id,
                unitSettings: unitSettings
            };

            params.changeCallback = function (params) {
                self.updateProductCount(params.productId, params.value, {selector: params.selector});
            };
            var counter = new ProductCounter();
            counter.init(params);
        });
    };

    controller.prototype.updateTotalFields = function () {
        var productsCount = this.getProductsCount();
        this.updateCountInHeader(productsCount);
        $('.shop-list-not-empty .card-quick-total .products-count').html(productsCount);
        $('.shop-list-not-empty .card-quick-total-sum .fractional-currency').html(this.getProductsPrice());
    };

    controller.prototype.initTooltip = function () {
        TooltipUtils.init({
            selector: '.shop-list-not-empty .icon-delete', position: {my: 'left top', at: 'right top-45'}
        });

        TooltipUtils.init({
            selector: '.shop-list-not-empty .card-item .card-info-tooltip',
            position: {
                my: 'left-40 bottom', at: 'center bottom+75'
            }
        });
    };

    controller.prototype.updateCountInHeader = function (value) {
        var selector = '.card-quick.shop-list .card-quick-qt',
            $selector = $(selector);
        if (value === 0) {
            $selector.removeClass('active');
        } else {
            $selector.addClass('active');
            if (!bootstrapGridCheck.isXs()) {
                $selector.html(value);
            } else {
                $selector.html('');
            }
        }
    };

    controller.prototype.getEmptyShopListTemplate = function () {
        return _.memoize(function () {
            return TemplateUtils.compileUnderscore(TemplateManager.getShopListHeaderEmptyProductsTemplate(), {
                shoppingListEmptyHeader: shopListI18n.shoppingListEmptyHeader,
                shoppingListEmptyAdvice: shopListI18n.shoppingListEmptyAdvice,
                shoppingListEmptyReserve: shopListI18n.shoppingListEmptyReserve
            });
        });
    };

    controller.prototype.showHeaderEmptyShopList = function () {
        var html = this.getEmptyShopListTemplate(),
            shopListIconHelp = I18nUtils.get('just-add-and-print'),
            params = {
                eventSelector: '[data-js-shop-list-header-wrapper]',
                emptyListContainer: '[data-js-shop-list-empty]',
                emptyListContent: '[data-js-shop-list-header-wrapper]',
                emptyListType: 'shopList',
                emptyListIconTooltip: shopListIconHelp,
                emptyListTemplate: html
            };

        Header.bindEmptyProductListPreview(params);
    };

    controller.prototype.getProductsPrice = function () {
        var price = 0,
            products = ShopListStorageUtils.getProducts();
        if (products) {
            for (var j = 0; j < products.length; j++) {
                var product = products[j],
                    obj = StorageUtils.getStorageItem(CookieUtils.SHOP_LIST_COOKIE_NAME, product.article);

                if (obj) {
                    price = parseFloat((price + this.calcProductPrice(product, obj.count)).toFixed(2));
                }
            }

            if (price > 0) {
                ShopListUtils.setShoppingListTotalPrice(price);
                var priceData = price.toString().split('.');
                price = '<span class="item-price-int">' + NumberUtils.formatSum(priceData[0]) + '</span>';
                if (!priceData[1]) {
                    priceData[1] = '00';
                }
                if (priceData[1].length === 1) {
                    priceData[1] = priceData[1] + '0';
                }
                price += '<span class="item-price-separator">,</span>';
                price += '<span class="item-price-fractional">' + priceData[1] + '</span>';
            }
        }
        return price;
    };

    controller.prototype.calcProductPrice = function (product, count) {
        var productPrice = parseFloat(product.priceInt + '.' + product.priceFractional);
        if (_.isNaN(productPrice)) {
            return 0;
        }
        var value = productPrice * count;
        return parseFloat(value.toFixed(2));
    };

    controller.prototype.getProductsCount = function () {
        var products = ShopListStorageUtils.getProducts();
        if (!products) {
            return 0;
        }
        return products.length;
    };

    controller.prototype.refreshViewHeight = function () {
        var products = ShopListStorageUtils.getProducts(),
            productsCount = products && products.length,
            cardScroll = '.card-quick-scroll',
            $cardScroll = $(cardScroll);
        $cardScroll.css('height', 'auto');
        if (productsCount > this.countProductsBeforeScroll) {
            var height = 0;
            $('.shop-list-not-empty .card-item').slice(0, this.countProductsBeforeScroll).each(function (key, element) {
                height += $(element).outerHeight();
            });
            $cardScroll.css('height', height + 'px');
        }
    };

    controller.prototype.updateProductCount = function (productId, value, params) {
        if (StorageUtils.needUpdateItemInStorage(CookieUtils.SHOP_LIST_COOKIE_NAME, productId, value)) {
            StorageUtils.updateStorage(CookieUtils.SHOP_LIST_COOKIE_NAME, productId, value, params);
            this.updateTotalFields();
            var targetEl = $(this.settings.shoppingListPageElSelector);
            targetEl.trigger("shopListController:updateProductCount", {productId: productId, value: value});
            CookieUtils.setLastConfirmedRegionId(CookieUtils.getRegionId());
        }
    };

    controller.prototype.updateUIAfterRemoveProduct = function (productId) {
        $('.shop-list-not-empty .sl-card-id-' + productId).remove();
        ShopListButton.showState();
        jQueryDataUtils.exclude('.shopping-list', 'products', productId);
        this.updateTotalFields();

        document.body.dispatchEvent(new CustomEvent('wishlist:update'));
    };

    controller.prototype.handleRemoveProduct = function (params) {
        var productId = params.productId,
            count = StorageUtils.getStorageItemCount(CookieUtils.SHOP_LIST_COOKIE_NAME, productId);
        ShopListUtils.removeFromShopList(productId);
        globalConfig.aemServiceLayer.gtmEventPush('wishlist-remove', {
            root: _.isNotUndefined(params.$element) && params.$element.length > 0
                ? params.$element
                : $('.sl-card-id-' + productId),
            action: 'remove',
            count: count
        });
        this.updateUIAfterRemoveProduct(productId);
        var cardProcessorEl = $(this.settings.productCardProcessorElSelector),
            shoppingListPageEl = $(this.settings.shoppingListPageElSelector);

        cardProcessorEl.trigger('shopListController:removeProduct', {ids: StorageUtils.getStorageItemsIds(CookieUtils.SHOP_LIST_COOKIE_NAME)});
        shoppingListPageEl.trigger('shopListController:removeProduct', {productId: productId});
        document.body.dispatchEvent(new CustomEvent('shopListController:removeProduct', {
            detail: {productId: productId},
            bubbles: true,
            cancelable: true
        }));
        CookieUtils.setLastConfirmedRegionId(CookieUtils.getRegionId());
        ShopListUtils.myAccountUpdateShopList();
    };

    /**
     *   Handle external event.
     *   shoppingListController:removeProduct {productId: string}
     */
    controller.prototype.onRemoveProductInShoppingListPage = function (event, params) {
        this.updateUIAfterRemoveProduct(params.productId);
    };

    /**
     *   Handle external event.
     *   shoppingListController:clearAll
     */
    controller.prototype.onClearAllInShoppingListPage = function () {
        this.loadContent();
    };

    /**
     *   Handle external event.
     *   *:event for reloadContent
     */
    controller.prototype.onReloadContent = function () {
        this.loadContent();
    };

    /**
     *   Handle external event.
     */
    controller.prototype.onUpdateProductCount = function (event, params) {
        var productId = params.productId,
            value = params.value,
            $shopListItem = $('.card-quick.shop-list-wrapper .sl-card-id-' + productId);
        $shopListItem.find('.counter-wrapper-' + productId).find('.item-counter-input').val(value);
        this.updateTotalFields();
    };
    return controller;
})();

var ShopListProductsController = (function () {
    "use strict";

    function controller(settings, shopListController) {
        this.settings = settings;
        this.shopListController = shopListController;
    }

    controller.prototype.showProducts = function () {
        var self = this,
            products = ShopListStorageUtils.getProducts(),
            $shoppingList = $('.shop-list-content .shopping-list'),
            items = TemplateUtils.compileUnderscore(TemplateManager.getShopListHeaderTemplate(), {
                i18n: shopListI18n,
                shopListUrl: globalConfig.shoppingListUrl,
                productsCount: _.isNotUndefined(products) ? products.length : 0
            }),
            $items = $(items),
            $quickScroll = $items.find('.card-quick-scroll');
        $quickScroll.append(_.map(products, function (product) {
            return self.initItem(product);
        }));

        $shoppingList.empty().append($items);
        self.shopListController.init();
    };


    controller.prototype.initItem = function (product) {
        var counterHtml = TemplateUtils.compileUnderscore(TemplateManager.getCounterTemplate(), {
            rootSelector: 'shop-list-item-header',
            product: product,
            unit: I18nUtils.get(product.unitOfMeasurement),
            noGtm: true
        });

        return TemplateUtils.compileUnderscore(TemplateManager.getShopListHeaderItemTemplate(), {
            product: product,
            mainPhoto: ProductPictureUtils.getUrl(product, 58, 58),
            i18n: shopListI18n,
            counterHtml: counterHtml
        });
    };

    return controller;

})();

var shopListControl;

$(document).ready(function () {
    var settings = {
        elSelector: '.shop-list-wrapper .shop-list-content .shopping-list',
        shopListPopupElSelector: '.shop-list-popup',
        productCardProcessorElSelector: '.product-card-processor',
        shoppingListPageElSelector: '.shopping-list-page',
        countProductsBeforeScroll: 3
    };
    shopListControl = new ShopListController(settings);
});

var uiProductCardInit = (function () {
    function controller() {
        var settings = {
                elSelector: ".ui-product-card[data-element-id='ui-product-card']",
                parentListenerElSelector: ".product-card-processor[data-element-id='product-card-processor']",

                addToComparisonElSelector: "[add-to-comparison]",
                coreElComparisonStatusAttr: "comparison-checked",

                addToShoppingListElSelector: "[add-to-shoping-list]",
                addedToShoppingListElSelector: "[added-to-shoping-list]",
                coreElShoppingListStatusAttr: "shopping-list-checked",

                addToCartElSelector: "[add-to-cart]",
                fastViewElSelector: "[open-fast-view]",

                imageWrapperElSelector: "[image-wrapper]"
            },

            elSettings = settings,
            els = $(settings.elSelector);

        _.each(els, function (el) {
            elSettings.el = $(el);
            new uiProductCardController(settings);
        })
    }

    return controller;
})();

var uiProductCardController = (function(){
    function controller(settings) {
        _.extend(this, new BasicComponent(settings));
        this.allowFireEvents = true;

        this.init();
    }


    controller.prototype.init = function(){
        this.bindHandlers();
    };


    controller.prototype.bindHandlers = function(){
        var comparisonHandlerEl = this.getInnerEl("addToComparisonElSelector"),
            shoppingListHandlerEl = this.getInnerEl("addToShoppingListElSelector"),
            addedToShoppingListHandlerEl = this.getInnerEl("addedToShoppingListElSelector"),
            addToCartBtnHandlerEl = this.getInnerEl("addToCartElSelector"),
            imageWrapperEl = this.getInnerEl("imageWrapperElSelector");

        comparisonHandlerEl.off('change').on('change', _.bind(this.onComparisonHandlerChange, this));
        shoppingListHandlerEl.off('click').on('click', _.bind(this.onShoppingListHandlerClick, this));
       
        addToCartBtnHandlerEl.off('click').on('click', _.bind(this.onAddToCartBtnHandlerClick, this));
        addedToShoppingListHandlerEl.off('click').on('click', _.bind(this.onAddedToShoppingListHandlerClick, this));
        
        imageWrapperEl.off('click').on('click', _.bind(this.onImageWrapperElClick, this));
        this.el.off('comparison:changeStatus').on('comparison:changeStatus', _.bind(this.onExternalChangeComparisonStatus, this));
        this.el.off('shoppingList:changeStatus').on('shoppingList:changeStatus', _.bind(this.onExternalChangeShoppingListStatus, this));

        $('.ui-product-card .product-name .product-name-inner .hover-image-buttons .hover-image-buttons-inner').off('click').on('click', function() {
            var card = $(this).parents('[data-element-id="ui-product-card"]');
            globalConfig.aemServiceLayer.gtmEventPush('product-open', {root: $(card)});
        });
    };

    controller.prototype.onExternalChangeComparisonStatus = function(event, status){
        var el = this.getInnerEl("addToComparisonElSelector");

        this.allowFireEvents = false;
        el.prop('checked', status).trigger("change");
        this.allowFireEvents = true;
    };


    controller.prototype.onExternalChangeShoppingListStatus = function(event, status){
        this.allowFireEvents = false;
        this.el.attr(this.elSettings.coreElShoppingListStatusAttr, status.toString());
        this.allowFireEvents = true;
    };


    controller.prototype.onAddToCartBtnHandlerClick = function(){
        //TODO Implement method onAddToCartBtnHandlerClick
        return;
    };

    controller.prototype.onImageWrapperElClick = function(){
        //TODO Implement method onImageWrapperElClick
        return;
    };

    controller.prototype.getGTMParams = function() {
        var params = {
            productId: this.productId,
            name: this.gtmCardName,
            location: this.gtmCardLocation,
            price: this.gtmCardPrice,
            categoryId: this.gtmCardCategoryId,
            variant: this.gtmCardVariant,
            brand: this.gtmCardBrand,
            dimension65: this.gtmCardDimension65
        };

        return params;       
    };


    controller.prototype.onComparisonHandlerChange = function(){
        var attr = this.elSettings.coreElComparisonStatusAttr,
            parent = $(this.elSettings.parentListenerElSelector),
            value = this.getInnerEl("addToComparisonElSelector").is(':checked');

        if (!_.isUndefined(value)) {
            var prId = this.productId;

            this.el.attr(attr, value);
    
            $('.ui-sorting-cards').find('[data-element-id="ui-product-card"]').each(function (i, x) {
                var $x = $(x),
                    id = $x.attr('product-id');
                if (prId === id) {
                    $x.attr(attr, value);
                    var $input = $x.find('input');
                    $input.attr('comparison-checked', value).prop('checked', value);
                }
            });

            if (this.allowFireEvents) {
                var params = this.getGTMParams();
                params.status = value;
                parent.trigger("productCard:comparisonAdd", params);
            }
        }
    };

    controller.prototype.onShoppingListHandlerClick = function(){
        var attr = this.elSettings.coreElShoppingListStatusAttr,
            parent = $(this.elSettings.parentListenerElSelector),
            value = this.el.attr(attr),
            status = $.parseJSON(value),
            params;

        if (!status) {
        
            this.el.attr(attr, !status);

            if (this.allowFireEvents) {
                params = this.getGTMParams();
                params.status = !status;
                parent.trigger("productCard:productListAdd", params);
            }
        }
    };

    controller.prototype.onAddedToShoppingListHandlerClick = function(){
        var parent = $(this.elSettings.parentListenerElSelector),
        params = {productId: this.productId};
        
        parent.trigger("productCard:productListAdded", params);
    };

    return controller; 
})();

var productListPaginationController = (function () {
    function controller(settings) {
        _.extend(this, new BasicComponent(settings));
        this.init();
    }


    controller.prototype.init = function () {
        this.bindElemsActions();
    }


    controller.prototype.bindElemsActions = function () {
        var arrows = this.getInnerEl("arrowElSelector"),
            number = this.getInnerEl("numberElSelector");

        arrows.off("click").on("click", _.bind(this.onArrowClickAction, this));
        number.off("click").on("click", _.bind(this.onNumberClickAction, this));
        this.el.off("external:update").on("external:update", _.bind(this.onExternalUpdate, this));
    }


    controller.prototype.onArrowClickAction = function (event) {
        var el = $(event.target),
            type = el.attr(this.elSettings.arrowTypeAttrName),
            currentNum = parseInt(this.el.attr(this.elSettings.elActiveNumberAttrName), 10),
            leftLimit = 1,
            rightLimit, plannedValue, type,
            numberEls = this.getInnerEl("numberElSelector"),
            lastEl = _.last(numberEls);

        rightLimit = parseInt($(lastEl).attr(this.elSettings.numberAttrName), 10);
        type = el.attr(this.elSettings.arrowTypeAttrName);

        switch (type) {
            case "prev":
                plannedValue = currentNum - 1;
                break;
            case "next":
                plannedValue = currentNum + 1;
                break;
            default:
                return;
        }

        if ((plannedValue <= rightLimit) && (plannedValue > leftLimit)) {
            this.setActiveNumber(plannedValue);
        }
    }


    controller.prototype.onNumberClickAction = function (event) {
        event.preventDefault();

        var el = $(event.target),
            num = el.attr(this.elSettings.numberAttrName),
            currentNum = this.el.attr(this.elSettings.elActiveNumberAttrName);

        if (num != currentNum) {
            this.setActiveNumber(num);
        }
    }


    controller.prototype.setActiveNumber = function (num) {
        this.el.attr(this.elSettings.elActiveNumberAttrName, num);
        this.synchronizeViews(num);
        this.callMediator();
    }


    controller.prototype.callMediator = function () {
        var mediator = $(this.elSettings.productListMediator);
        type = this.viewType,
            settings = {};

        switch (type) {
            case "primary" :
                settings.scrollToView = false;
                break;
            case "secondary" :
                settings.scrollToView = true;
                break;
            default:
                return;
        }

        mediator.trigger("paginator:paginatorChanged", settings);
    }


    controller.prototype.synchronizeViews = function (num) {
        var elType = this.el.attr(this.elSettings.viewTypeAttrName),
            selectorType, otherElSelector;

        switch (elType) {
            case "primary":
                selectorType = "secondary";
                break;
            case "secondary":
                selectorType = "primary";
                break;
            default:
                return;
        }

        otherElSelector = ".product-list-pagination[view-type='" + selectorType + "']";

        otherEl = $(otherElSelector);

        otherEl.trigger("external:update", num);

    }


    controller.prototype.onExternalUpdate = function (target, num) {
        this.el.attr(this.elSettings.elActiveNumberAttrName, num);
    }


    return controller;
})();

var ProductListPaginationInit = (function () {
    function controller() {
        var settings = {
                elSelector: ".product-list-pagination[data-element-id='product-list-pagination']",

                arrowTypeAttrName: "navy-arrow",
                arrowElSelector: "[navy-arrow]",
                numberElSelector: "[navy-number]",
                numberAttrName: "navy-number",
                elActiveNumberAttrName: "active-number",
                productListMediator: ".products-list-mediator[data-element-id='products-list-mediator']",
                viewTypeAttrName: "view-type"
            },
            elSettings = settings,
            els = $(settings.elSelector);

        _.each(els, function (el, key) {
            elSettings.el = $(el);
            new productListPaginationController(settings);
        })
    }

    return controller;
})();

$(document).ready(function () {
    var $feedbackSticky = $('.feedback-sticky');
    if (!$feedbackSticky.length || bootstrapGridCheck.isMobile()) return;
    var $window = $(window);

    function serviceSticky () {
        $feedbackSticky.toggleClass('is-visible', $window.scrollTop() > 200);
    };

    $window.on('load scroll', serviceSticky);
});
var productCardProcessorController = (function () {
    function controller(settings) {
        _.extend(this, new BasicComponent(settings));
        this.init();
    }

    controller.prototype.init = function () {
        this.bindHandlers();
        this.initCards();
    };

    /**
     *   External API
     *   this.trigger("productCard:updateComparisonStatus", {ids: cards}) ;      // cards array<String>
     *   processor.trigger("productCard:updateProductListStatus", {ids: cards})  // cards array<String>
     *   processor.trigger("productCard:updateBasketStatus", {ids: cards})  // cards array<String>
     */
    controller.prototype.bindHandlers = function () {
        this.el.off("cardsProcessor:updateRaiting").on("cardsProcessor:updateRaiting", _.bind(this.onUpdateRating, this));
        this.el.off("cardsProcessor:reInitCards").on("cardsProcessor:reInitCards", _.bind(this.onReInitCards, this));

        this.el.off("productCard:initCardCheckedStatuses").on("productCard:initCardCheckedStatuses", _.bind(this.onInitCardCheckedStatuses, this));
    };

    controller.prototype.onUpdateCartStatus = function () {

    };

    controller.prototype.initCardCheckedStatuses = function () {

    };

    controller.prototype.onInitCardCheckedStatuses = function (event) {
        this.initCardCheckedStatuses();
    };

    controller.prototype.getAllCards = function () {
        return $(this.elSettings.cardElSelector);
    };

    controller.prototype.onReInitCards = function () {
        this.initCards();
    };


    controller.prototype.initCards = function () {
        new uiProductCardInit();
        this.initRaiting();
        this.initCardCheckedStatuses();
    };


    controller.prototype.onUpdateRating = function (event, param) {
        this.initRaiting(param);
    };


    controller.prototype.initRaiting = function (param) {
        var cardEls = this.collectCards(param),
            ids;

        this.cardEls = cardEls;
        ids = this.collectCardsIds(cardEls);

        this.requestRaitingService(ids);
    };


    controller.prototype.requestRaitingService = function (ids) {
        this.requestShoppilotApi();
    };


    controller.prototype.requestShoppilotApi = function () {
        var id, card,
            that = this;

        if (this.elSettings.useShoppilotApi && (typeof ShoppilotAPI !== 'undefined')) {
            ShoppilotAPI.then(function (Shoppilot) {
                var cardEls = that.cardEls,
                    ProductWidget = Shoppilot.require('product_widget'),
                    MultiWidget = Shoppilot.require('multi_widget'),
                    inlineRatings;

                inlineRatings = _.map(cardEls, function (cardEl) {
                    card = $(cardEl);
                    id = parseInt(card.attr(that.elSettings.cardIdAttrName), 10);

                    return new ProductWidget({
                        name: 'category-inline-rating',
                        product_id: id,
                        container: $(card.find(that.elSettings.cardRaitingElSelector))
                    });
                });

                return MultiWidget.render(inlineRatings);
            });
        }
    };


    controller.prototype.collectCards = function (param) {
        var result = [];

        if (_.isUndefined(param)) {
            result = $(this.elSettings.cardElSelector);
        }

        if (_.isString(param)) {
            result = $(param).find(this.elSettings.cardElSelector);
        }

        return result;
    };


    controller.prototype.collectCardsIds = function (cards) {
        var result = [],
            that = this,
            card, id;

        _.each(cards, function (item) {
            card = $(item);
            id = parseInt(card.attr(that.elSettings.cardIdAttrName), 10);
            result.push(id);
        });

        return result;
    };


    return controller;
})();

$(document).ready(function () {
    var settings = {
            elSelector: ".product-card-processor[data-element-id='product-card-processor']",
            cardElSelector: ".ui-product-card[data-element-id='ui-product-card']",
            cardRaitingElSelector: "[rating-section]",
            cardCommonParamedElSelector: ".ui-product-card[product-id='",
            extLayerComparisonElSelector: ".compare-processor",
            extLayerProductListElSelector: ".shop-list-wrapper .shopping-list",
            extLayerBasketElSelector: ".basket-wrapper .basket-list",

            cardIdAttrName: "product-id",
            comparisonStatusAttrName: "comparison-checked",
            shoppingListStatusAttrName: "shopping-list-checked",

            allowComponentServiceRequest: true,
            allowExternalComponentRequest: true,
            allowInternalComponentRequest: true,
            useShoppilotApi: true
        },

        elSettings = settings,
        els = $(settings.elSelector);

    _.each(els, function (el, key) {
        elSettings.el = $(el);
        new productCardProcessorController(settings);
    })
});

$(document).ready(function () {
    var $scrollTop = $('.scroll-top');
    if (!$scrollTop.length || bootstrapGridCheck.isMobile()) return;

    var $homeAndBody = $('html, body');
    var $window = $(window);

    function scrollTop() {
        $scrollTop.toggleClass('hidden', $window.scrollTop() < 200);
    };

    function goToTop() {
        $homeAndBody.animate({scrollTop: 0}, 800);
    };

    $window.on('load scroll', scrollTop);
    $scrollTop.on('click', '.scroll-top-button', goToTop);
});

$(document).ready(function () {
    $(document).on('click', '[data-js-print-page]', function () {
        var $this = $(this),
            label = $this.data('label');
        if (label) {
            switch (label) {
                case 'WishListPage':
                    globalConfig.aemServiceLayer.gtmEventPush('wishlist-print');
                    window.print();
                    break;
                case 'WishListPopUp':
                    globalConfig.aemServiceLayer.gtmEventPush('wishlist-print');
                    window.open($this.data('print-url'), '_blank');
                    break;
                default:
                    $.event.trigger({
                        type: "evt-ga",
                        to: "print",
                        selector: $('[data-rel="js-detail-product-page"]'),
                        label: label
                    });
                    window.print();
                    break;
            }
        }
    });
});

function Counter(rootSelector, value, small) {
    this.rootSelector = rootSelector;
    this.value = value;
    this.listeners = {};
    this.maxValue = parseInt(globalConfig.inputCounterMax,10);
    var that = this;

    if (small) {
        $(this.rootSelector + ' .item-counter').addClass('small');
    }
    $(this.rootSelector + ' .item-counter-button-minus').click(function () {
        that.decrement();
        that.sendListeners();
        if ($(this).closest(
                globalConfig.aemServiceLayer
                .settings.shoplistMinimizedProductItem).length == 0) {
            globalConfig.aemServiceLayer.removeFromCart(this, 1);
        }
    });

    $(this.rootSelector + ' .item-counter-button-plus').click(function () {
        that.increment();
        that.sendListeners();
        if ($(this).closest(
                globalConfig.aemServiceLayer
                .settings.shoplistMinimizedProductItem).length == 0) {
            globalConfig.aemServiceLayer.addToCart(this, 1);
        }
    });

    $(this.rootSelector + ' .item-counter-input').keydown(this.validateNumber);
    $(this.rootSelector + ' .item-counter-input').keyup(this.validateNumberAfter.bind(this));

    var parentEl = $(this.rootSelector + ' .item-counter');
    parentEl.focusout(function () {
        setTimeout(function () {
            if (parseInt(parentEl.find('input').val(),10) != value) {
                if (parentEl.find(":focus").length === 0) {
                    that.sendListeners();
                }
            }
        }, 50);
    });

    this.changeValue();
}

Counter.prototype.validateNumberAfter = function (e) {
    var targetValue = e.target.value;

    var result = targetValue.replace(/[^0-9]/gim, '').trim();

    if (result !== '') {
        result = parseInt(result,10);
        if (result > this.maxValue) {
            result = this.maxValue;
        } else if (result === 0) {
            result = 1;
        }
    }

    this.value = result;
    this.changeValue();
};

Counter.prototype.validateNumber = function (e) {
    // Allow: backspace, delete, tab, escape, enter and .
    if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
            // Allow: Ctrl+A,Ctrl+C,Ctrl+V, Command+A
                    ((e.keyCode == 65 || e.keyCode == 86 || e.keyCode == 67 || e.keyCode == 88)
                            && (e.ctrlKey === true || e.metaKey === true)) ||
                    // Allow: home, end, left, right, down, up
                            (e.keyCode >= 35 && e.keyCode <= 40)) {
                // let it happen, don't do anything
                return;
            }
            // Ensure that it is a number and stop the keypress
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                e.preventDefault();
            }
        };

        Counter.prototype.increment = function () {
            this.value++;
            if (this.value > this.maxValue) {
                this.value = this.maxValue;
            }
            if (this.value === this.maxValue) {
                this.disableIncrement(true);
            } else {
                this.disableIncrement(false);
            }
            this.changeValue();
        };

        Counter.prototype.decrement = function () {
            var tmp = this.value - 1;
            if (tmp < 1) {
                tmp = 1;
            }
            // if (tmp === 1) {
            //     this.disableDecrement(true);
            // } else {
            //     this.disableDecrement(false);
            // }
            this.value = tmp;
            this.changeValue();
        };

        Counter.prototype.changeValue = function () {
            $(this.rootSelector + ' .item-counter-input').val(this.value);
        };

        Counter.prototype.sendListeners = function () {
            if (!this.value) {
                this.value = 1;
                $(this.rootSelector + ' .item-counter-input').val(this.value);
            }
            var that = this,
                    productId = $(that.rootSelector).attr('data-product-id');
            _.mapObject(this.listeners, function (val) {
                val(productId, that.value);
            });
        };

        Counter.prototype.disableDecrement = function (value) {
            if (value) {
                $(this.rootSelector + ' .item-counter-button-minus').addClass('disabled');
            } else {
                $(this.rootSelector + ' .item-counter-button-minus').removeClass('disabled');
            }
        };
        Counter.prototype.disableIncrement = function (value) {
            if (value) {
                $(this.rootSelector + ' .item-counter-button-plus').addClass('disabled');
            } else {
                $(this.rootSelector + ' .item-counter-button-plus').removeClass('disabled');
            }
        };

        Counter.prototype.addListener = function (listener, listenerName) {
            this.listeners[listenerName] = listener;
        };
        Counter.prototype.removeListener = function (listenerName) {
            delete this.listeners[listenerName];
        };

$(document).ready(function () {
    var $subscriptionFooterForm = $('.subscription-footer-form'),
        $footerSubscribeButton = $subscriptionFooterForm.find('.footer-subscribe-button'),
        $footerSubscribeInput = $subscriptionFooterForm.find('.footer-subscribe-input'),
        $footerSubscribeText = $subscriptionFooterForm.find('.footer-subscribe-text'),
        maxEmailLength = 60;


    $footerSubscribeButton.click(function () {
        var isValid = isValidEmail(),
            isValidCount = setCountOfSymbols();
        if (isValid && isValidCount) {
            var emailUser = $footerSubscribeInput.val();
            $.ajax({
                type: 'POST',
                dataType: 'json',
                url: $subscriptionFooterForm.data('action'),
                data: {
                    email: emailUser,
                    personal_city: globalConfig.regionId,
                    listId: 102
                }
            }).done(function (response) {
                if (_.isNotUndefined(response.errors) && response.errors.length !== 0) {
                    setInvalidEmail(getDictMessage('subscribe.error-footer'));
                    $footerSubscribeText.addClass('subscribe-error');
                } else {
                    var $content = TemplateUtils.compileUnderscore(TemplateManager.getSubscriptionModal(), {
                            homeUrl: globalConfig.homePath,
                            translate: {
                                topText: I18nUtils.get('footer.subscribe-popup-top-text'),
                                bottomText: I18nUtils.get('footer.subscribe-popup-bottom-text'),
                                smallText: I18nUtils.get('footer.subscribe-popup-small-text')
                            }
                        });
                    if (response.data === 'ok') {
                        globalConfig.aemServiceLayer.gtmEventPush('subscribe-open');
                        $footerSubscribeInput.val('');
                        openPopUp($content, 'html');
                    } else {
                        setInvalidEmail(response.data);
                    }
                }
            }).fail(function () {
                setInvalidEmail(getDictMessage('subscribe.error-footer'));
                $footerSubscribeText.addClass('subscribe-error');
            });
        }
    });

    $footerSubscribeInput.change(function () {
        if ($footerSubscribeInput.val().length && !isValidEmail()) {
            setInvalidEmail(I18nUtils.get('registration.email-error'));
        } else if (!setCountOfSymbols()) {
            setInvalidEmail(I18nUtils.get('feedback.more than {0} symbols', maxEmailLength));
        } else {
            setInvalidEmail('');
        }
    });

    function setCountOfSymbols() {
        return $footerSubscribeInput.val().length < maxEmailLength;
    }

    function isValidEmail() {
        return $footerSubscribeInput.val().match(globalConfig.emailReg);
    }

    function setInvalidEmail(text) {
        $footerSubscribeText.text(text);
    }
});

$(document).ready(function () {
    $('.howto-subscribe .howto-subscribe-button').click(function () {
        var isValid = isValidEmail(),
            isValidEmailCount = isCountValid();
        globalConfig.aemServiceLayer.gtmEventPush('howto-subscribe');
        if (isValid && isValidEmailCount) {
            var emailUser = $('.howto-subscribe .howto-subscribe-input').val();
            $.ajax({
                type: 'POST',
                dataType: 'json',
                url: $('.howto-subscribe').data('action'),
                data: {
                    email: emailUser,
                    personal_city: globalConfig.regionId
                }
            }).done(function (response) {
                if (response.data === 'ok') {
                    var $content = TemplateUtils.compileUnderscore(TemplateManager.getSubscriptionModal(), {
                        homeUrl: globalConfig.homePath,
                        translate: {
                            topText: getDictMessage('footer.subscribe-popup-top-text'),
                            bottomText: getDictMessage('footer.subscribe-popup-bottom-text'),
                            smallText: getDictMessage('footer.subscribe-popup-small-text')
                        }
                    });
                    globalConfig.aemServiceLayer.gtmEventPush('subscribe-open');
                    $('.howto-subscribe .howto-subscribe-input').val('');
                    openPopUp($content, 'html');
                } else {
                    setInvalidEmail(response.data);
                }
            }).fail(function () {
                setInvalidEmail(I18nUtils.get('subscribe.error'));
            });
        }
    });

    $('.howto-subscribe .howto-subscribe-input').change(function () {
        var field = $('.howto-subscribe .howto-subscribe-form'),
            maxEmailLength = 60;
        if (field.children().val().length) {
            if (!isValidEmail()) {
                setInvalidEmail(I18nUtils.get("registration.email-error"));
                field.addClass('has-error');
            } else if (!isCountValid()) {
                setInvalidEmail(I18nUtils.get('feedback.more than {0} symbols', maxEmailLength));
            } else {
                setInvalidEmail('');
                field.removeClass('has-error');
            }
        } else {
            setInvalidEmail('');
        }
    });

    function isCountValid() {
        var maxEmailLength = 60,
            field = $('.howto-subscribe .howto-subscribe-form').children();
        return field.val().length < maxEmailLength;
    }

    function isValidEmail() {
        return $('.howto-subscribe .howto-subscribe-input').val().match(globalConfig.emailReg);
    }

    function setInvalidEmail(text) {
        $(".howto-subscribe .howto-subscribe-text").text(text);
    }
});

var lightBoxOpened = false;
var productPictureController = (function () {
    var $window = $(window);
    function controller(settings) {
        var $elSelector = $(settings.elSelector);

        _.extend(this, new BasicComponent(settings));
        this.init();

        TooltipUtils.init({selector: settings.elSelector + '.product-picture-container .card-brand-logo',
            position: {my: 'right+5 bottom', at: 'center bottom+45'}
        });

        TooltipUtils.init({selector: settings.elSelector + '.lightbox-container .card-brand-logo',
            position: {my: 'right+5 bottom', at: 'center bottom+45'}
        });

        var productImage = settings.elSelector + '.product-picture img.loader';
        var $productImage = $(productImage);
        if ($productImage[0]) {
            $productImage.parent().find('.spinner').hide();
            if (lightBoxOpened) {
                $window.resize();
            }
        } else {
            $productImage.on('load', function () {
                $(this).parent().find('.spinner').hide();
                if (lightBoxOpened) {
                    $window.resize();
                }
            });
        }

        var countPhoto = $elSelector.find('.jcarousel.additional ul li').length;
        var isBig = $elSelector.find('.product-picture .product-picture-container').hasClass('big');
        if (countPhoto > 5) {
            $elSelector.find('.jcarousel.additional').addClass('has-buttons');
            $elSelector.find('.product-picture a').show();
        }

        // if(!bootstrapGridCheck.isMobile()) {
        //     $elSelector.find(".product-picture .zoomed").imagezoomsl({
        //         magnifierborder: '1px solid #ececec',
        //         zoomrange: [2, 2],
        //         cursorshadeborder: 'none',
        //         magnifiereffectanimate: 'fadeIn',
        //         magnifiersize: [400, 400],
        //         descarea: settings.elSelector + '.zoom',
        //         zindex: 2
        //     });
        // }

        // var carouselStage = $(settings.elSelector + '.product-picture .jcarousel.main').jcarousel(),
        //     self = this,
        //     carouselAdditionalItems = '.jcarousel.additional li';

        // $(settings.elSelector).find(carouselAdditionalItems).off('click').on('click', function () {
        //     var imageSrc = $(this).find('img').attr('src'),
        //         mainImageIndex = self.findMainImageIndex(imageSrc);
        //     $(settings.elSelector).find(carouselAdditionalItems).removeClass('active');
        //     $(this).addClass('active');
        //     if (mainImageIndex != -1) {
        //         carouselStage.jcarousel('scrollIntoView', mainImageIndex);
        //     }
        // });

        // $(settings.elSelector).find(carouselAdditionalItems).removeClass('active');
        // $($(settings.elSelector).find(carouselAdditionalItems)[0]).addClass('active');
        // carouselStage.jcarousel('scrollIntoView', 0);

        // $(settings.elSelector + '.product-picture .product-picture-container .jcarousel-prev')
        //     .on('jcarouselcontrol:inactive', function () {
        //         $(this).addClass('inactive');
        //     })
        //     .on('jcarouselcontrol:active', function () {
        //         $(this).removeClass('inactive');
        //     })
        //     .jcarouselControl({
        //         target: '-=1'
        //     });
        // $(settings.elSelector + '.product-picture .product-picture-container .jcarousel-next')
        //     .on('jcarouselcontrol:inactive', function () {
        //         $(this).addClass('inactive');
        //     })
        //     .on('jcarouselcontrol:active', function () {
        //         $(this).removeClass('inactive');
        //     })
        //     .jcarouselControl({
        //         target: '+=1'
        //     });

        var connector = function (itemNavigation, scrollStage) {
            return scrollStage.jcarousel('items').eq(itemNavigation.index());
        };
        var scrollStage = $(settings.elSelector + '.product-picture .main').jcarousel(),
            scrollNavigation = $(settings.elSelector + '.product-picture .additional').jcarousel();

        scrollNavigation.jcarousel('items').each(function () {
            var item = $(this),
                target = connector(item, scrollStage);
            item
                .on('jcarouselcontrol:active', function () {
                    scrollNavigation.jcarousel('scrollIntoView', this);
                    // item.addClass('active');
                })
                .on('jcarouselcontrol:inactive', function () {
                    // item.removeClass('active');
                })
                .jcarouselControl({
                    target: target,
                    carousel: scrollStage
                });
        });

        var $elSelectorThreesixty = $(settings.elSelector + '.product-picture .jcarousel.main .threesixty');

        if ($elSelectorThreesixty.length) {
            $elSelectorThreesixty.ThreeSixty({
                totalFrames: $elSelectorThreesixty.attr('data-total'),
                endFrame: $elSelectorThreesixty.attr('data-total'),
                currentFrame: 1,
                imgList: '.threesixty_images',
                progress: '.spinner',
                imagePath: $elSelectorThreesixty.attr('data-path'),
                filePrefix: $elSelectorThreesixty.attr('data-prefix'),
                ext: '.' + $elSelectorThreesixty.attr('data-ext'),
                height: 500,
                width: '100%',
                navigation: false,
                responsive: true
            });
        }
        $elSelector.find('.product-picture .hide-light-box').tooltip({});
        if (isBig) {
            $window.resize(function () {
                if (lightBoxOpened) {
                    lightboxSize(settings);
                }
            });
            $elSelector.find('.show-light-box').click(function () {
                showLightbox(settings);
            });
            $(document).on("click", ".tracker", function () {
                showLightbox(settings);
            });
            $elSelector.find('.hide-light-box').click(function () {
                hideLightbox(settings);
            });
            $window.keydown(function (button) {
                if (button.keyCode === 27 && isBig) {
                    hideLightbox(settings);
                }
            });
        }
    }

    function showLightbox(settings) {
        lightBoxOpened = true;
        lightboxSize(settings);
        lightboxCarousel(settings);
        checkLightboxButtons(settings);
        $window.resize();
    }

    function hideLightbox(settings) {
        lightBoxOpened = false;
        $(settings.elSelector + '.product-picture .lightbox-container').hide();
        $('body').attr('style', '');
    }

    function lightboxSize(settings) {
        var windowHeight = $window.height(),
            windowWidth = $window.width(),
            size = ((windowHeight - 100) > settings.maxPhotoSize) ? settings.maxPhotoSize : (windowHeight - 100),
            $settingsElSelector = $(settings.elSelector + '.product-picture .lightbox-container'),
            $settingsElSelectorTopLine = $settingsElSelector.find('.top-line'),
            $settingsElSelectorMainPageView = $settingsElSelectorTopLine.find('.main-page-view'),
            blockSize = {
                'height': size,
                'width': size,
            };

        $('body').height(windowHeight).width(windowWidth).css('overflow', 'hidden');
        $settingsElSelector.height(windowHeight);
        $settingsElSelectorTopLine.find('ul').css('max-height', size);
        $settingsElSelectorTopLine.find('ul img').css('max-width', size);
        $settingsElSelectorMainPageView.css(blockSize);
        $settingsElSelectorMainPageView.find('ol').css(blockSize);
        $settingsElSelectorMainPageView.find('li.pictures').css(blockSize);
        $settingsElSelector.find('.spinner').css(blockSize);
    }

    function lightboxCarousel(settings) {
        var $elSelector = $(settings.elSelector),
            $elSelectorThreesixty = $elSelector.find('.product-picture .jcarousel.main-page-view .threesixty');
        if ($elSelectorThreesixty.length) {
            $elSelectorThreesixty.ThreeSixty({
                totalFrames: $elSelectorThreesixty.attr('data-total'),
                endFrame: $elSelectorThreesixty.attr('data-total'),
                currentFrame: 1,
                imgList: '.threesixty_images',
                progress: '.spinner',
                imagePath: $elSelectorThreesixty.attr('data-path'),
                filePrefix: $elSelectorThreesixty.attr('data-prefix'),
                ext: '.' + $elSelectorThreesixty.attr('data-ext'),
                height: 500,
                width: '100%',
                navigation: false,
                responsive: true
            });
        }
        var connector = function (itemNavigation, carouselStage) {
            return carouselStage.jcarousel('items').eq(itemNavigation.index());
        };
        var carouselStage = $elSelector.find('.product-picture .main-page-view').jcarousel();
        var carouselNavigation = $elSelector.find('.product-picture .additional-full').jcarousel();

        carouselNavigation.jcarousel('items').each(function () {
            var item = $(this);
            var target = connector(item, carouselStage);
            item
                .on('jcarouselcontrol:active', function () {
                    carouselNavigation.jcarousel('scrollIntoView', this);
                    item.addClass('active');
                })
                .on('jcarouselcontrol:inactive', function () {
                    item.removeClass('active');
                })
                .jcarouselControl({
                    target: target,
                    carousel: carouselStage
                });
        });
        $elSelector.find('.product-picture .lightbox-container .jcarousel-prev').click(function () {
            $('.product-picture .main-page-view').jcarousel('scroll', '-=1');
            checkLightboxButtons(settings);
        });
        $elSelector.find('.product-picture .lightbox-container .jcarousel-next').click(function () {
            $('.product-picture .main-page-view').jcarousel('scroll', '+=1');
            checkLightboxButtons(settings);
        });
        $elSelector.find('.product-picture .lightbox-container .additional-full li').click(function () {
            checkLightboxButtons(settings);
        });
        $elSelector.find('.product-picture .lightbox-container').show();
        $elSelector.find('.product-picture .main-page-view').jcarousel('scroll', $elSelector.find('.product-picture .jcarousel.additional li.active').index());
    }

    function checkLightboxButtons(settings) {
        if ($(settings.elSelector + '.product-picture .additional-full li:first').hasClass('active')) {
            $(settings.elSelector + '.product-picture .lightbox-container .jcarousel-prev').addClass('inactive');
        } else {
            $(settings.elSelector + '.product-picture .lightbox-container .jcarousel-prev').removeClass('inactive');
        }
        if ($(settings.elSelector + '.product-picture .additional-full li:last').hasClass('active')) {
            $(settings.elSelector + '.product-picture .lightbox-container .jcarousel-next').addClass('inactive');
        } else {
            $(settings.elSelector + '.product-picture .lightbox-container .jcarousel-next').removeClass('inactive');
        }
    }

    controller.prototype.findMainImageIndex = function (naviImage) {
        var index = naviImage.lastIndexOf('/'),
            self = this,
            naviImageShort = index >= 0 ? naviImage.substring(index, naviImage.length).replace('/', '') : '',
            mainImagesLi = $(self.elSettings.elSelector).find('.jcarousel.main li'),

            el = _.find(mainImagesLi, function (item) {
                var mainImage = $(item).find('img').attr('src'),
                    index2 = mainImage.lastIndexOf('/'),
                    mainImageShort = index2 >= 0 ? mainImage.substring(index2, mainImage.length).replace('/', '') : '';
                return mainImageShort === naviImageShort;
            });

        return el ? $(el).index() : -1;
    };

    controller.prototype.init = function () {
    };

    return controller;
}());

var productPictureInit = (function () {
    function controller() {
        var settings = {
            elSelector: "[data-js-details-photo]",
            maxPhotoSize: 800
        };
        new productPictureController(settings);
    }
    return controller;
}());

// ===========================  Entry Point ==================
// Entry point: Don't change!
// =========================================================== 
$(document).ready(function () {
    new productPictureInit();
});

var GTMForms = (function () {
    var pageGeneratedTime = 0,
        forms = {},
        fieldActivatedTime,
        formAjaxStartTime,
        formSubmitsCount = 0,
        GTM_FORM_SELECTOR = '[data-js-gtm-form]',
        firstFieldActivatedTime = false,
        lastFieldActivatedName = false,
        hasForms = false;

    function init() {
        if (pageGeneratedTime === 0) {
            pageGeneratedTime = new Date().getTime();
        }

        var $gtmFormSelector = $(GTM_FORM_SELECTOR);
        if ($gtmFormSelector.length === 0) {
            return;
        }

        $gtmFormSelector.each(function(key, value) {
            var $value = $(value),
                formAction = getFormAction($value);
            hasForms = formAction;
            forms[formAction] = {
                'event': 'LeroyMerlin_Forms',
                'timingCategory': 'Forms',
                'timingVar': '',
                'timingValue': '',
                'timingLabel': null,
                'eventContent': $value.attr('data-form-name'),
                'eventContext': null,
                'errorCode': null,
                'eventAttemptCount': null
            };
        });

        $gtmFormSelector.find('input, textarea, select').focusin(function () {
            var $this = $(this),
                formAction = getFormAction($this.closest(GTM_FORM_SELECTOR)),
                elementName = getInputName($this);

            fieldActivatedTime = (new Date()).getTime();
            if (!firstFieldActivatedTime) {
                firstFieldActivatedTime = fieldActivatedTime;
            }
            formElementClicked(formAction, elementName);
            lastFieldActivatedName = elementName;
        });

        $gtmFormSelector.find('input, textarea, select').focusout(function() {
            var $this = $(this),
                formAction = getFormAction($this.closest(GTM_FORM_SELECTOR)),
                elementName = getInputName($this),
                gtmData = _.extend({}, forms[formAction]);

            gtmData.timingVar = 'unfocus';
            gtmData.eventContext = replaceEmptySpace(elementName);
            gtmData.timingValue = (new Date()).getTime() - fieldActivatedTime;
            sendGtmDataForm(gtmData);
        });

        $gtmFormSelector.find('input[type="checkbox"]').change(function() {
            var $this = $(this),
                elementName = replaceEmptySpace(getInputName($this));
            formElementClicked(getFormAction($this.closest(GTM_FORM_SELECTOR)), elementName);
        });

        $(document).ajaxSend(function(event, jqxhr, settings) {
            if (forms[getAjaxUrl(settings)]) {
                formSubmitsCount++;
                var currentTime = (new Date()).getTime();
                if (formSubmitsCount === 1) {
                    var gtmData = _.extend({}, forms[getAjaxUrl(settings)]);
                    gtmData.timingVar = 'send';
                    gtmData.timingLabel = 'first';
                    gtmData.timingValue = currentTime - firstFieldActivatedTime;
                    sendGtmDataForm(gtmData);
                }
                formAjaxStartTime = currentTime;
            }
        });

        $(document).ajaxSuccess(function(event, xhr, settings) {
            if (forms[getAjaxUrl(settings)]) {
                var gtmData = _.extend({}, forms[getAjaxUrl(settings)]),
                    currentTime = (new Date()).getTime();
                gtmData.timingVar = 'send';
                gtmData.timingLabel = 'successful';
                gtmData.eventAttemptCount = formSubmitsCount;
                gtmData.timingValue = currentTime - firstFieldActivatedTime;
                sendGtmDataForm(gtmData);

                var gtmDataResponse = _.extend({}, forms[getAjaxUrl(settings)]);
                gtmDataResponse.timingVar = 'response';
                gtmDataResponse.timingLabel = 'successful';
                gtmDataResponse.timingValue = currentTime - formAjaxStartTime;
                sendGtmDataForm(gtmDataResponse);
            }
        });

        $(document).ajaxError(function (event, request, settings) {
            if (forms[getAjaxUrl(settings)]) {
                var gtmData = _.extend({}, forms[getAjaxUrl(settings)]),
                    currentTime = (new Date()).getTime();
                gtmData.timingVar = 'send';
                gtmData.timingLabel = 'unsuccessful';
                gtmData.eventAttemptCount = formSubmitsCount;
                gtmData.timingValue = currentTime - firstFieldActivatedTime;
                sendGtmDataForm(gtmData);

                var gtmDataResponse = _.extend({}, forms[getAjaxUrl(settings)]);
                gtmDataResponse.timingVar = 'response';
                gtmDataResponse.timingLabel = 'unsuccessful';
                gtmDataResponse.eventAttemptCount = formSubmitsCount;
                gtmDataResponse.timingValue = currentTime - formAjaxStartTime;
                sendGtmDataForm(gtmDataResponse);
            }
        });

        window.addEventListener('onbeforeunload', function () {
            if (hasForms) {
                var gtmData = _.extend({}, forms[hasForms]),
                    currentTime = (new Date()).getTime();
                gtmData.timingVar = 'leave';
                gtmData.eventContext = replaceEmptySpace(lastFieldActivatedName);
                gtmData.timingValue = currentTime - firstFieldActivatedTime;
                gtmData.timingLabel = 'close';
                sendGtmDataForm(gtmData);
            }
        });
    }

    function getInputName($element) {
        var text = $element.closest(GTM_FORM_SELECTOR).find('[for="' + $element.attr('id') + '"]').text();
        if (_.isUndefined(text)) {
            return '';
        }
        return text.trim().replace(/[*:]/g, '');
    }

    function getFormAction($element) {
        var action = $element.attr('action');
        return _.isUndefined(action)
            ? $element.attr('data-form-name')
            : action;
    }

    function formElementClicked(formAction, elementName) {
        var gtmData = _.extend({}, forms[formAction]);
        gtmData.timingVar = 'focus';
        gtmData.eventContext = replaceEmptySpace(elementName);
        gtmData.timingValue = (new Date()).getTime() - pageGeneratedTime;
        sendGtmDataForm(gtmData);
    }

    function getAjaxUrl(settings) {
        return settings.url.split('?')[0];
    }

    function sendGtmDataForm(data) {
        globalConfig.aemServiceLayer.gtmPush(data);
    }

    function replaceEmptySpace(str) {
        if (_.isUndefined(str) || _.isEmpty(str)) {
            return str;
        }
        str = str.replace(/(\r\n|\n|\r)/gm," ");
        str = str.replaceAll(/\s+/g, " ");
        return $.trim(str);
    }

    return {
        init: init
    }
})();

$(document).ready(function () {
    GTMForms.init();
});

var BasketHeader = (function () {
    'use strict';

    var settings = {
        countProductsBeforeScroll: 3,
        basketHeaderItemSelector: "[data-rel='js-basket-min-product-item']",
        basketHeaderSelector: '[data-js-basket-header]',
        basketHeaderWrapperSelector: '[data-js-basket-header-wrapper]',
        emptyBasketHeaderSelector: '[data-js-empty-basket-header]',
        nonEmptyBasketHeaderSelector: '[data-js-non-empty-basket-header]',
        basketHeaderContentSelector: '[data-js-basket-header-content]',
        itemCounterInputSelector: '[data-js-counter-input]',
        basketQuantitySelector: '[data-js-basket-quantity]',
        basketHeaderIconDeleteSelector: '[data-js-basket-header-icon-delete]',
        basketHeaderScrollSelector: '[data-js-basket-header-scroll]',
        hoveredClass: 'hovered',
        productImageWidth: 58,
        productImageHeight: 58
    };

    function init() {
        loadData();
    }

    function getEmptyBasketListTemplate() {
        return _.memoize(function () {
            return TemplateUtils.compileUnderscore(TemplateManager.getBasketHeaderEmptyProductsTemplate(), {
                basketEmptyCartTitle: basketI18n.basketEmptyCartTitle,
                basketEmptyCartText: basketI18n.basketEmptyCartText
            });
        });
    }

    function initBasketEmptyBlock() {
        var html = getEmptyBasketListTemplate(),
            params = {
                eventSelector: '[data-js-basket-header-wrapper]',
                emptyListContainer: '[data-js-basket-list-empty]',
                emptyListContent: '[data-js-empty-basket-header]',
                emptyListType: 'basketList',
                emptyListTemplate: html
            };

        Header.bindEmptyProductListPreview(params);
    }

    function sendBasketAjax(cbSuccess, cbFailure) {
        if (CheckoutUtils.isCheckoutPage()) {
            return;
        }
        updateCountInHeader();
        $.ajax({
            url: globalConfig.basketTypeAjaxHref,
            cache: false,
            data: {
                eventType: 'BASKET_HEADER_LOAD'
            }
        }).done(cbSuccess).fail(cbFailure);
    }

    function loadData() {
        sendBasketAjax(function (response) {
            renderHtmlContent(response);
            initHeader();
        }, _.noop);
    }

    /**
     * Render Html content.
     *
     * @param {Object} response
     */
    function renderHtmlContent(response) {
        var $basketHeaderContent = $(settings.basketHeaderContentSelector),
            products = response.products,
            itemsHtml = '';
        _.each(products, function (product) {
            product.mainPhoto = ProductPictureUtils.getUrl(product, settings.productImageWidth, settings.productImageHeight);
            itemsHtml += getBasketItemHtml(product);
        });

        var basketHeaderHtml = TemplateUtils.compileUnderscore(TemplateManager.getBasketHeaderTemplate(), {
            itemsHtml: itemsHtml,
            basketPageUrl: globalConfig.basketPagePopupUrl
        });

        $basketHeaderContent.html(basketHeaderHtml);
    }

    /**
     * Get basket item html.
     *
     * @param {Object} product
     * @return {string} html
     */
    function getBasketItemHtml(product) {
        var counterHtml = TemplateUtils.compileUnderscore(TemplateManager.getCounterTemplate(), {
                product: product,
                rootSelector: 'basket-header-item-counter',
                counterClass: 'small header',
                unit: I18nUtils.get(product.priceUnit)
            }),
            basketCookie = CookieUtils.getBasketCookie(),
            cartItem = _.find(basketCookie.products, function (item) {
                return item.code === product.article;
            }),
            quantity = cartItem.quantity;

        return TemplateUtils.compileUnderscore(TemplateManager.getBasketHeaderItemTemplate(), {
            product: product,
            productWeight: product.weight ? product.weight + ' ' + getDictMessage('kg') : 0,
            globalConfig: globalConfig,
            quantity: quantity,
            counterHtml: counterHtml
        });
    }

    function initHeader() {
        var $basketWrapper = $(settings.basketHeaderWrapperSelector);

        if (!CheckoutUtils.isCheckoutPage() && !bootstrapGridCheck.isMobile()) {
            $basketWrapper.hover(function () {
                    $basketWrapper.addClass(settings.hoveredClass);
                    refreshViewHeight();
                }, function (event) {
                    var relatedTarget = event.relatedTarget;
                    if (relatedTarget && relatedTarget.firstChild &&
                        $(relatedTarget.firstChild).hasClass('ui-tooltip-content')) {
                        return;
                    }
                    $basketWrapper.find('{0} {1}'.format(settings.nonEmptyBasketHeaderSelector, settings.itemCounterInputSelector)).blur();
                    $basketWrapper.removeClass(settings.hoveredClass);
                }
            );
        } else {
            $basketWrapper.removeClass(settings.hoveredClass);
            $basketWrapper.off('mouseenter mouseleave');
        }
        initCounter();
        initTooltip();
        initScrollArea();
        bindHandlers();
        initBasketEmptyBlock();

        updateUI();
    }

    function bindHandlers() {
        var $el = $(settings.basketHeaderSelector);

        bindRemoveItem();

        $el.off('shoppingListController:clearAll').on('shoppingListController:clearAll', loadData);

        $el.off('*updateProductCount').on('*updateProductCount', onUpdateProductCount);

        $el.off('*reloadContent').on('*reloadContent', loadData);

        $el.off('*addProductToBasket').on('*addProductToBasket', onAddProduct);

        document.body.removeEventListener('basket:update', loadData);
        document.body.addEventListener('basket:update', loadData);

        globalConfig.aemServiceLayer.attachItemHandlers();
    }

    function bindRemoveItem() {
        $(settings.basketHeaderItemSelector).each(function (i, el) {
            var $el = $(el),
                productId = $el.attr('data-product-id'),
                modelId = $el.attr('data-model-id');

            $el.find(settings.basketHeaderIconDeleteSelector)
                .off('click.basketHeaderItemDelete')
                .on('click.basketHeaderItemDelete', function () {
                    handleRemoveProduct(productId);
                    dbBasketEvents.removeDB(productId, modelId);
                });
        });
    }

    function initScrollArea() {
        var $scrollArea = $(settings.basketHeaderWrapperSelector).find(settings.basketHeaderScrollSelector),
            productsCount = getProductsCount();
        if ($scrollArea.length > 0) {
            $scrollArea.mCustomScrollbar('destroy');
            if (productsCount > settings.countProductsBeforeScroll) {
                $scrollArea.mCustomScrollbar({});
            }
        }
        refreshViewHeight();
    }

    function initCounter() {
        $(settings.basketHeaderItemSelector).each(function (i, el) {
            var $el = $(el),
                id = $el.attr('data-product-id'),
                unit = $el.attr('data-unit'),
                count = $el.attr('data-count'),
                unitSettings = BasketUtils.createMeasuresSettings($el.find('[data-js-counter-root]'));

            var params = {
                rootSelector: settings.basketHeaderWrapperSelector + ' [data-js-counter-root="' + id + '"]',
                small: true,
                value: count,
                unit: unit,
                productId: id,
                customClass: 'small header',
                unitSettings: unitSettings,
                modelType: 'basket',
                changeCallback: function (cbParams) {
                    updateProductCount(cbParams.productId, cbParams.value);
                    CookieUtils.setLastConfirmedRegionId(CookieUtils.getRegionId(), true);
                }
            };

            var counter = new ProductCounter();
            counter.init(params);
        });
    }

    function updateCounter(productId) {
        var $item = findBasketHeaderItem(productId),
            count = $item.attr('data-count');

        $item.find('[data-js-counter-input]').val(count).trigger('change');
    }

    function initTooltip() {
        TooltipUtils.init({
            selector: '{0} {1}'.format(settings.nonEmptyBasketHeaderSelector, settings.basketHeaderIconDeleteSelector),
            position: {my: 'left top', at: 'right top-45'}
        });

        TooltipUtils.init({
            selector: settings.basketHeaderItemSelector + ' [data-js-product-link]',
            position: {
                my: 'left-40 bottom', at: 'center bottom+75'
            }
        });
    }

    function getProductsCount() {
        var cartInfo = CookieUtils.getBasketCookie();
        return !_.isUndefined(cartInfo) && !_.isEmpty(cartInfo.products) ? cartInfo.products.length : 0;
    }

    function refreshViewHeight() {
        var $cardScroll = $(settings.basketHeaderWrapperSelector).find(settings.basketHeaderScrollSelector),
            $basketHeaderProducts = $(settings.basketHeaderItemSelector);
        $cardScroll.css('height', 'auto');
        if ($basketHeaderProducts.length > settings.countProductsBeforeScroll) {
            var height = 0;
            $basketHeaderProducts.slice(0, settings.countProductsBeforeScroll).each(function (key, element) {
                height += $(element).outerHeight();
            });
            $cardScroll.css('height', height + 'px');
        }
    }

    function updateProductCount(id, count) {
        var $item = findBasketHeaderItem(id);

        $item.attr('data-count', count);
        BasketUtils.updateCartInfo(id, count);
        updateBasketItemsPrice();
        updateCountInHeader();

        updateBasketPage('BasketHeaderController:updateProductCount', {
            productId: id,
            value: count
        });
    }

    function updateBasketItemsPrice() {
        var sum = $(settings.basketHeaderItemSelector).reduce(function (acc, el) {
            var quantity = el.querySelector(settings.itemCounterInputSelector).value,
                price = +el.dataset.price || 0;
            return acc + ProductUtils.multiple(price, quantity);
        }, 0);

        showPriceMarkup(sum);
        updateCountInHeader();
    }

    function showPriceMarkup(sum) {
        var $totalSum = $('[data-js-basket-header-sum-wrapper]'),
            $basketSum = $('[data-js-basket-sum]');
        if (sum > 0) {
            var priceMarkUp = PriceUtils.getPriceStr(sum.toFixed(2));
            $basketSum.html("{0} <span class='currency'>{1}</span>".format(priceMarkUp, I18nUtils.get('currency')));
            $totalSum.find('[data-js-basket-header-sum]').html(priceMarkUp);
            $totalSum.removeClass('hidden');
        } else {
            $totalSum.addClass('hidden');
        }
        $basketSum.attr('data-unparsed-sum', sum);
    }

    function handleRemoveProduct(id) {
        var $itemContainer = findBasketHeaderItem(id),
            list = $itemContainer.length > 0 ? 'cartPreview' : '';

        globalConfig.aemServiceLayer.removeFromCart($itemContainer, parseFloat($itemContainer.attr('data-count')), list);
        BasketUtils.removeCartItem(id);

        $itemContainer.remove();
        updateBasketItemsPrice();
        BasketButton.showState(id);

        updateBasketPage('BasketHeaderController:handleRemoveProduct', {productId: id});
        checkEmptyCart();
    }

    function updateUI() {
        updateBasketItemsPrice();
        updateCountInHeader();
        checkEmptyCart();
        bindRemoveItem();
    }

    function updateBasketPage(action, data) {
        var $targetBasketPageEl = $('[data-js-basket-container]');
        if ($targetBasketPageEl.length > 0) {
            $targetBasketPageEl.trigger(action, data);
        }

        document.body.dispatchEvent(new Event('basket:update'));
    }

    function checkEmptyCart() {
        var $basketHeaderWrapper = $(settings.basketHeaderWrapperSelector);
        if (getProductsCount() === 0) {
            $(settings.nonEmptyBasketHeaderSelector).remove();
            $(settings.emptyBasketHeaderSelector).removeClass('hidden');
            $basketHeaderWrapper.find(settings.basketQuantitySelector).removeClass('active');
            $('[data-js-basket-sum]').html('');
        } else {
            $(settings.emptyBasketHeaderSelector).addClass('hidden');
        }
    }

    function onAddProduct(e, params) {
        var $lastCard = $(settings.basketHeaderItemSelector).last();
        if ($lastCard.length !== 0) {
            // insert new card to basket in header
            var product = params.product,
                itemHtml = getBasketItemHtml(product);

            $lastCard.after(itemHtml);

            initCounter();
            initScrollArea();
            updateUI();
        } else {
            // there is empty basket in header, send ajax
            sendBasketAjax(function (response) {
                renderHtmlContent(response);
                initCounter();
                initScrollArea();
                updateUI();
                bindHandlers();
            }, _.noop);
        }
    }

    function updateCountInHeader() {
        var result = getProductsCount(),
            $basketHeaderWrapper = $(settings.basketHeaderWrapperSelector),
            $selectorCardQuick = $basketHeaderWrapper.find(settings.basketQuantitySelector),
            $selectorCount = $basketHeaderWrapper.find('[data-js-basket-header-products-count]');
        if (result > 0) {
            $selectorCount.html(result);
            $selectorCardQuick
                .addClass('active')
                .html(!bootstrapGridCheck.isXs() ? result : '');
        } else {
            $selectorCardQuick.removeClass('active');
        }
    }

    function onUpdateProductCount(e, params) {
        findBasketHeaderItem(params.productId).attr('data-count', params.value);
        updateCounter(params.productId);
        updateUI();
        if (CheckoutUtils.isCheckoutPage()) {
            BasketUtils.showBasketProductsCount();
        }
    }

    function findBasketHeaderItem(id) {
        return $(settings.basketHeaderItemSelector + '[data-product-id="' + id + '"]');
    }

    return {
        getProductsCount: getProductsCount,
        init: init
    };
})();

$(document).on('basket:basket-manager:state-updated', function () {
    BasketHeader.init();
});


const CheckToken = (function () {
    function request() {
        const { apiorchestratorDomain, apiorchestratorScheme } = globalConfig;

        return $.ajax({
            type: 'GET',
            url: `${apiorchestratorDomain}://${apiorchestratorScheme}/aem_api/v1/checkAuthToken`
        });
    }
    return {
        request : request
    }
})();

var BasketGetCart = (function () {
    'use strict';

    var isCollision = false,
        inProgress = false;

    $(document).on('basket:basket-set-cart:start', function (e) {
        if(inProgress) isCollision = true;
    });

    /**
     * Success callback for get remote products promise
     * @param {object} remoteBasket - remote products
     * @return {undefined} undefined
     */
    function rqSuccess(remoteBasket) {
        if(isCollision) return;
        $.event.trigger({
             type: "basket:basket-get-cart:success",
             bwsProducts: remoteBasket
         });
    }

    /**
     * Fail callback for get remote products promise
     * @param {object} err - remote error
     * @param {string} textStatus
     * @return {undefined} undefined
     */
    function rqFail(err, textStatus) {
        $.event.trigger({
             type: "basket:basket-get-cart:fail",
             textStatus: textStatus
         });
    }

    /**
     * Callback which calls regardless of promise result
     * @param {object} remoteBasket - if request was success, otherwise returns undefined
     * @return {undefined} undefined
     */
    function rqComplete(remoteBasket) {
        inProgress = false;
        isCollision = false;
        $.event.trigger({
            type: "basket:basket-get-cart:complete",
            bwsProducts: remoteBasket
        });
    }

    /**
     * Callback which calls at the moment of promise starting
     * @return {undefined} undefined
     */
    function rqStart() {
        inProgress = true;
        $.event.trigger({
            type: "basket:basket-get-cart:start"
        });
    }

    function request() {
        var apiProtocol = globalConfig.apiorchestratorScheme + '://',
            apiUrl = globalConfig.apiorchestratorDomain,
            apiBWSContext = globalConfig.bwsUrlContext,
            apiAdditional = '/pullLists/?listTypes=BASKET',
            apiKey = globalConfig.apiorchestratorApikey,
            requestURL = [apiProtocol, apiUrl, apiBWSContext, apiAdditional],
            asyncRemoteBasket = $.ajax({
                url: requestURL.join(''),
                timeout: 10000,
                beforeSend: function (request) {
                    request.setRequestHeader('x-api-key', apiKey);
                    rqStart();
                },
                xhrFields: {
                    withCredentials: true
                }
            });

            return asyncRemoteBasket;
    }

    function getRemoteCartPromise() {
        return request();
    }

    function pullRemoteCart() {
        var $prom = CheckToken.request();
        $prom.done(function (res) {
            if (res === "true") {
                request()
                    .done(rqSuccess)
                    .fail(rqFail)
                    .complete(rqComplete);
            } else {
                Header.authModal();
            }
        }).fail(function () {
            Header.authModal();
        });
    }

    return {
        getRemoteCartPromise: getRemoteCartPromise,
        pullRemoteCart: pullRemoteCart
    }
})();


var BasketSetCart = (function () {

    /**
     * Success callback for set remote products promise
     * @param {object} remoteBasket - remote products
     * @return {undefined} undefined
     */
    function rqSuccess(remoteBasket) {
        $.event.trigger({
            type: "basket:basket-set-cart:success",
            bwsProducts: remoteBasket
        });
    }

    /**
     * Fail callback for set remote products promise
     * @param {object} err - remote error
     * @param {string} textStatus
     * @return {undefined} undefined
     */
    function rqFail(err, textStatus) {
        $.event.trigger({
            type: "basket:basket-set-cart:fail",
            textStatus: textStatus
        });
    }

    /**
     * Callback which calls regardless of promise result
     * @param {object} remoteBasket - if request was success, otherwise returns undefined
     * @return {undefined} undefined
     */
    function rqComplete(remoteBasket) {
        $.event.trigger({
            type: "basket:basket-set-cart:complete",
            bwsProducts: remoteBasket
        });
    }

    /**
     * Callback which calls at the moment of promise starting
     * @return {undefined} undefined
     */
    function rqStart() {
        $.event.trigger({
            type: "basket:basket-set-cart:start"
        });
    }

    /**
     * Creates correct formatted basket object
     * @param {Array} productArray
     * @returns {Object} correct formatted basket object
     */
    function formatBasketToJSON(productArray) {
        return {
            "list":
                {
                    "id": "",
                    "type": "BASKET",
                    "storeId": globalConfig.defaultStoreId,
                    "products": _.isNotEmpty(CookieUtils.get('cartInfo')) ? productArray : []
                }
        }
    }


    function request(objBasket) {
        var apiProtocol = globalConfig.apiorchestratorScheme + '://',
            apiUrl = globalConfig.apiorchestratorDomain,
            apiBWSContext = globalConfig.bwsUrlContext,
            apiAdditional = '/pushList/',
            apiKey = globalConfig.apiorchestratorApikey,
            requestURL = [apiProtocol, apiUrl, apiBWSContext, apiAdditional],
            asyncRemoteBasket = $.ajax({
                method: 'POST',
                url: requestURL.join(''),
                contentType: 'application/json',
                data: JSON.stringify(formatBasketToJSON(objBasket)),
                beforeSend: function (request) {
                    request.setRequestHeader('x-api-key', apiKey);
                    rqStart();
                },
                xhrFields: {
                    withCredentials: true
                }
            });

        return asyncRemoteBasket;
    }

    function updateRemoteCartPromise(objBasket) {
        return request(objBasket);
    }

    function pushRemoteCart(objBasket) {
        var $prom = CheckToken.request();
        $prom.done(function (res) {
            if (res === "true") {
                request(objBasket)
                    .done(rqSuccess)
                    .fail(rqFail)
                    .complete(rqComplete);
            } else {
                Header.authModal();
            }
        }).fail(function () {
            Header.authModal();
        });
    }


    return {
        pushRemoteCart: pushRemoteCart,
        updateRemoteCartPromise: updateRemoteCartPromise
    }
})();

var BasketManager = (function (){
    'use strict';

    var onBasketChanged = {
        name: 'basket:basket-changed',
        clb: $.debounce(500, function (e) {
            var localProducts = e.newCartInfo;
            if (BasketUtils.isBasketSyncEnabled() && CookieUtils.isUserAuth()) {
                BasketSetCart.pushRemoteCart(
                    !_.isUndefined(localProducts['products']) ?
                    localProducts['products'] : []
                )
            }
        })
    }, pullRequestBasketSuccess = {
        name: 'basket:basket-get-cart:success',
        clb: function (remoteProducts) {
            var objBasket = remoteProducts.bwsProducts['BASKET']['0'],
                arrProducts = !_.isUndefined(objBasket) ? objBasket['products'] : [];
            CookieUtils.setBasketCookie({products:arrProducts});
        }
    }, pullRequestBasketFail = {
        name: 'basket:basket-get-cart:fail',
        clb: function (err, textStatus) {
            console.warn(textStatus);
        }
    }, pullRequestBasketComplete = {
        name: 'basket:basket-get-cart:complete',
        clb: function (remoteProducts) {
            $.event.trigger({
                type: "basket:basket-manager:state-updated",
                bwsProducts: remoteProducts || {}
            });
        }
    }, pushRequestBasketFail = {
        name: 'basket:basket-set-cart:fail',
        clb: function (err, textStatus) {
            console.warn(textStatus);
        }
    }, reinitBasketButtons = {
        name: 'basket:basket-manager:state-updated',
        clb: function (e) {
            BasketButton.init();
        }
    };

    /**
     * just decorator for event listener
     * @param {object} evt - event object {event name, event callback}
     * @return {undefined} undefined
     */
    function requestBasketEvts(evt) {
        $(document).on(evt.name, evt.clb);
    }
    
    function init() {
        requestBasketEvts(onBasketChanged);
        requestBasketEvts(pullRequestBasketSuccess);
        requestBasketEvts(pullRequestBasketFail);
        requestBasketEvts(pullRequestBasketComplete);
        requestBasketEvts(pushRequestBasketFail);
        requestBasketEvts(reinitBasketButtons);

        $.event.trigger({
            type: "basket:basket-manager:state-updated"
        });
    }

    return {
        init: init
    }
})();

$(document).ready(function () {
    BasketManager.init()
});

String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.replace(new RegExp(search, 'g'), replacement);
};

var ProgressiveImage = (function () {
    var ROOT_SELECTOR = '.progressiveImage';

    function load(rootSelector) {
        var selector = ROOT_SELECTOR;
        if (rootSelector) {
            selector = rootSelector + ' ' + selector;
        }
        $(selector).each(function (index, obj) {
            var parent = $(obj);
            if (parent.attr('loaded')) {
                return;
            }
            var small = parent.find('.img-small');
            // 1: load small image and show it
            var img = new Image();
            img.src = small.attr('src');
            img.onload = function () {
                small.addClass('loaded');
                small.tooltip({});
            };

            // 2: load large image
            var imgLarge = new Image();
            imgLarge.src = parent.data('large');
            imgLarge.alt = small.attr('alt');
            imgLarge.title = small.attr('title');
            imgLarge.onload = function () {
                imgLarge.classList.add('loaded');
                $(obj).tooltip({});
                parent.attr('loaded', true);
            };
            obj.appendChild(imgLarge);
        });
    }

    return {
        init: function (rootSelector) {
            load(rootSelector);
        }
    }
})();

$(document).ready(function () {
   ProgressiveImage.init();
});

var ratingStarService = {

    renderCards: function (data) {
        var self = this;
        if (data) {
            var filteredArray = _.filter(data, function (item) {
                return !_.isUndefined(item) && !_.isNull(item);
            });
            var ids = _.map(filteredArray, function (item) {
                if (_.isObject(item)) {
                    return item.article;
                } else {
                    return item;
                }
            });
            if(window.ShoppilotAPI){
                window.ShoppilotAPI.then(function (Shoppilot) {
                    var MultiWidget = Shoppilot.require('multi_widget'),
                        ProductWidget = Shoppilot.require('product_widget'),
                        inlineRatings = _.map(ids, function (id) {
                            return new ProductWidget({
                                name: 'inline-rating',
                                product_id: id,
                                container: $('.sp-inline-rating-' + id)
                            });
                        });
                    MultiWidget.render(inlineRatings);
                });
            }

        }
    },
    setShoppilotAuth: function() {
        if (CookieUtils.isUserAuth()) {
            $.ajax({
                url: globalConfig.generateJwtTokenAjaxHref
            }).done(function (token) {
                if (token && token.data) {
                    var ssoUrl = globalConfig.shoppilotHref + '?token=' + token.data + '&store_id=' + store_id;
                    var iframe = document.createElement('iframe');
                    iframe.src = ssoUrl;
                    iframe.headers = ssoUrl;
                    document.body.appendChild(iframe);
                }
            })
        }
    },
    renderProductDetails: function (isQuickView) {
        var $productContainer = $('[data-js-detailed-view]').find('.card-data'),
            self = this,
            id;
        if (!isQuickView) {
            id = $productContainer.attr('data-product-id');
            if(window.ShoppilotAPI){
                window.ShoppilotAPI.then(function (Shoppilot) {
                    var ProductWidget = Shoppilot.require('product_widget'),
                        MultiWidget = Shoppilot.require('multi_widget'),
                        events = Shoppilot.require('events'),
                        widgets = [
                            new ProductWidget({
                                name: 'category-inline-rating',
                                product_id: id,
                                container: ".sp-inline-rating-container"
                            }),
                            new ProductWidget({
                                name: 'product-reviews',
                                product_id: id,
                                container: "#sp-product-reviews-container",
                                onDone: function() {
                                    $('.reviews-inner').show();
                                    checkReview();
                                },
                                onFail: function() {
                                    $('.reviews-inner-wrapper').remove();
                                }
                            }),
                            new ProductWidget({
                                name: 'questions',
                                product_id: id,
                                container: "#sp-product-questions-container",
                                onDone: function() {
                                    checkQuestion();
                                    $('.question-inner').show();
                                },
                                onFail: function() {
                                    $('.question-inner-wrapper').remove();
                                }
                            }),
                            new ProductWidget({
                                name: 'inline-rating',
                                product_id: id,
                                container: ".sp-inline-rating-container",
                                onDone: function() {
                                    $('.product-quick-view .sp-inline-rating-label').attr('href', productLink + '#sp-product-reviews-widget');
                                }
                            })
                        ];

                    function checkQuestion() {
                        var $spContainer = $('.question-inner-wrapper');

                        if ($spContainer.find('.sp-summary-title').length > 0){
                            $('[data-js-question-label]').remove();
                        }
                    }

                    function checkReview() {
                        var maxCount = 20,
                            count = 0;
                        function showAnchorReview() {
                            var review = $('.anchor-reaper .reviews');
                            if (review && review.length === 0) {
                                count = count + 1;
                                if (count < maxCount) {
                                    setTimeout(showAnchorReview, 100);
                                }
                            } else {
                                review.show();
                            }
                        }
                        showAnchorReview();
                    }
                    events.on('omnibox.review_form.accept', function (event) {
                        $.event.trigger({
                            type: "evt-ga",
                            to: "add-review",
                            rating: event.data.review.rating,
                            selector: '[data-rel="js-detail-product-page"]'
                        });
                    });
                    events.on('omnibox.review_form.open', function () {
                        self.setShoppilotAuth();
                        $.event.trigger({
                            type: "evt-ga",
                            to: "click-review",
                            selector: '[data-rel="js-detail-product-page"]'
                        });
                    });
                    events.on('widget.review.vote', function () {
                        $.event.trigger({
                            type: "evt-ga",
                            to: "like-review",
                            href: window.location.href
                        });
                    });
                    events.on('omnibox.question_form.open', function () {
                        $.event.trigger({
                            type: "evt-ga",
                            to: "click-question",
                            href: window.location.href
                        });
                    });
                    MultiWidget.render(widgets);
                });
            }

        } else {
            var $cardData = $('.product-quick-view.card-data'),
                productLink = $cardData.data('product-url');
            id = $cardData.attr('data-product-id');
            if(window.ShoppilotAPI){
                window.ShoppilotAPI.then(function (Shoppilot) {
                    var ProductWidget = Shoppilot.require('product_widget'),
                        MultiWidget = Shoppilot.require('multi_widget'),
                        widgets = [
                            new ProductWidget({
                                name: 'inline-rating',
                                product_id: id,
                                container: ".product-quick-view .sp-inline-rating-container",
                                onDone: function() {
                                    $('.product-quick-view .sp-inline-rating-label').attr('href', productLink + '#nav-reviews');
                                }
                            })
                        ];
                    MultiWidget.render(widgets);

                });
            }
        }
    }
};

$(document).ready(function () {
  window.addEventListener("beforeunload", function (event) {
    if(!bootstrapGridCheck.isMobile()) return;
    if (event.target.activeElement && event.target.activeElement.href
        && event.target.activeElement.href.toLowerCase().startsWith('mailto:')) {
        return;
    }
    blockedWindow.init();
  });
});

class ComparePanelImpl {
    constructor(selector) {
        this.item = document.querySelector(selector);
        if(!this.item) return;

        this.counter = this.item.querySelector('.compare-panel-item__count');
        document.body.addEventListener('comparisonUpdate', () => this.reinit());
        this.reinit();
    }

    get ids() {
        return CookieUtils.getAsArray('comparison')
    }

    reinit() {
        const ids = this.ids;
        this.counter.innerText = ids.length;
        this.item.classList.toggle('is_active', ids.length);
    }
}

var ComparePanel = new ComparePanelImpl('[data-js-compare-panel]');

