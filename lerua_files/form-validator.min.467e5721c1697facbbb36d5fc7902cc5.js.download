var FormValidator = (function () {
    "use strict";

    var PASS_SELECTOR = '.custom-form input[name="passNew"]',
        CONFIRM_SELECTOR = '.custom-form input[name="passNewRepeat"]',
        EMAIL_SELECTOR = '.custom-form input[name="mailNew"]',
        EMAIL_CONFIRM_SELECTOR = '.custom-form input[name="mailNewRepeat"]',
        TEXT_SELECTOR = 'text_selector',
        SELECT_SELECTOR = 'select_selector',
        CHECKBOX_SELECTOR = 'checkbox_selector',
        CAPTCHA_SELECTOR = '#g-recaptcha-response';

    /**
     * Controller for form validator
     *
     * @constructor
     */
    var FormValidator = function () {
        this.fileExtends = ['gif', 'jpg', 'png', 'doc', 'ppt', 'xls', 'txt', 'docx', 'pptx', 'xlsx', 'pdf', 'bmp', 'jpeg'];
        this.maxFileSize = 5;
        this.maxFileNameLength = 100;
        this.yearInterval = /^(18|19|20)\d{2}$/;
        this.maxFileCount = 5;
        this.maxNameLength = 60;
        this.maxSurnameLength = 60;
        this.maxEmailLength = 60;
        this.maxSubjectLength = 254;
        this.maxMessageLength = 10000;
        this.numberRegExp = /^\d+$/;
        this.nameRegExp = new RegExp(globalConfig.nameRegexp);
        this.phoneRegExp = /^([\- \(\)+0123456789]+)$/;
        this.mobilePhoneRegExp = /^([+][7][(][9])([\- \(\)+0123456789]+)$$/;
        this.homePhoneRegExp = /^([+][7][(][^9])([\- \(\)+0123456789]+)$$/;
        this.phoneMask = '+7(999) 999-99-99';
        this.mobilePhoneRegExpSize = /[0123456789\(\)\- \+]{17}/;
        this.notDisableSubmitParam = false;
        this.validationField = {};
    };

    FormValidator.prototype.addToValidationField = function(type, selector) {
        if (!this.validationField[type]) {
            this.validationField[type] = [];
        }
        this.validationField[type].push(selector);
    };

    FormValidator.prototype.removeFromValidationField = function(type, selector) {
        if (!this.validationField[type]) {
            this.validationField[type] = [];
        }
        this.validationField[type].remove(selector);
    };

    FormValidator.prototype.removeStyle = function(field) {
        $(field).parentsUntil($('.custom-form'), 'div').removeClass('has-error');
        $(field).parentsUntil($('.custom-form'), 'div').removeClass('has-success');
    };

    FormValidator.prototype.setStyle = function (field, valid) {
        var $changePass = $('.form-group');
        if (valid) {
            field.parentsUntil($changePass, 'div').removeClass('has-error');
            field.parentsUntil($changePass, 'div').addClass('has-success');
            field.parent('div').find('.help-block').removeClass('help-block-active');
        } else {
            field.parentsUntil($changePass, 'div').removeClass('has-success');
            field.parentsUntil($changePass, 'div').addClass('has-error');
            field.parent('div').find('.help-block').addClass('help-block-active');
        }
    };

    FormValidator.prototype.setStyleLogin = function (field, valid) {
        var $formInput = $('.form-input'),
            fieldParent = field.parent($formInput);
        fieldParent.toggleClass('has-success', valid);
        fieldParent.toggleClass('has-error', !valid);
    };


    FormValidator.prototype.checkNotEmpty = function (input) {
        var mark = input.attr('mark'),
            value = input.val();
        if (typeof mark !== typeof undefined && mark !== false) {
            if (!value || _.isEmpty(value.trim(' '))) {
                input.parent('div').find('span').text(I18nUtils.get('feedback.obligatory-field'));
                return false;
            } else {
                return true;
            }
        }
        return false;
    };

    FormValidator.prototype.checkQuantitySymbols = function (input, count) {
        var mark = input.attr('mark'),
            value = input.val();
        if (typeof mark !== typeof undefined && mark !== false) {
            if (value && value.length > count) {
                input.parent('div').find('span').text(I18nUtils.get('feedback.more than {0} symbols', count));
                return false;
            } else {
                return true;
            }
        }
        return false;
    };

    FormValidator.prototype.checkPattern = function (input, pattern, message, doubleRow) {
        var mark = input.attr('mark'),
            value = input.val(),
            result = false;
        if (typeof mark !== typeof undefined && mark !== false) {
            if (value && !value.match(pattern)) {
                input.parent('div').find('span').text(message);
                result = false;
            } else {
                result = true;
            }
        }
        if (doubleRow) {
            if (result) {
                input.closest('.form-group').removeClass('double-row');
            } else {
                input.closest('.form-group').addClass('double-row');
            }
        }
        return result;
    };

    FormValidator.prototype.addListenerNotRequire = function (selector, empty, count, pattern, message, doubleRow) {
        var that = this,
            $field = $(selector);
        if ($field.length === 0) {
            return;
        }
        $field.blur(function () {
            $(this).attr('mark', '');
            that.validationRule($field, empty, count, pattern, message, doubleRow);
            $(this).unbind('blur');
            if ($field.val() === 0) {
                $field.parent().removeClass('has-success');
            }
            $(this).on('change keyup', function () {
                that.validationRule($field, empty, count, pattern, message, doubleRow);
                if ($field.val() === 0) {
                    $field.parent().removeClass('has-success');
                }
            });
        });
    };

    FormValidator.prototype.removeListner = function (selector, empty, count, pattern, message, doubleRow) {
        var that = this,
            $field = $(selector);
        that.removeFromValidationField(TEXT_SELECTOR, selector);
        if ($field.val() !== '') {
            $field.attr('mark', '');
            that.validationRule($field, empty, count, pattern, message, doubleRow);
        }
        $field.blur(function () {
            var $that = $(this);
            $that.attr('mark', '');
            that.validationRule($field, empty, count, pattern, message, doubleRow);
            $that.unbind('blur', false);
            $that.on('change keyup', function () {
                that.validationRule($field, empty, count, pattern, message, doubleRow);
            });
        });
    };

    FormValidator.prototype.addListener = function (selector, empty, count, pattern, message, doubleRow) {
        var that = this,
            $field = $(selector);
        if ($field.length === 0) {
            return;
        }
        that.addToValidationField(TEXT_SELECTOR, selector);
        if ($field.val() !== '') {
            $field.attr('mark', '');
            that.validationRule($field, empty, count, pattern, message, doubleRow);
        }
        $field.blur(function () {
            var $that = $(this);
            $that.attr('mark', '');
            that.validationRule($field, empty, count, pattern, message, doubleRow);
            $that.unbind('blur', false);
            $that.on('change keyup', function () {
                that.validationRule($field, empty, count, pattern, message, doubleRow);
            });
        });
    };

    FormValidator.prototype.addListenerLogin = function(selector, empty, count, pattern) {
        var that = this,
            $field = $(selector);
        if ($field.length === 0) {
            return;
        }
        that.addToValidationField(TEXT_SELECTOR, selector);
        if ($field.val() !== '') {
            $field.attr('mark', '');
            that.validationRuleLogin($field, empty, count, pattern);
        }
        $field.blur(function () {
            var $that = $(this);
            $that.attr('mark', '');
            that.validationRuleLogin($field, empty, count, pattern);
            $that.unbind('blur', false);
            $that.on('change keyup', function () {
                that.validationRuleLogin($field, empty, count, pattern);
            });
        });
    };


    FormValidator.prototype.addListenerPass = function (selectorMain, selectorAdditional, errorText) {
        var that = this,
            $field = $(selectorAdditional);
        if ($field.length === 0) {
            return;
        }
        $(selectorMain).on('change keyup', function () {
            var mark = $field.attr('mark');
            if (typeof mark !== typeof undefined && mark !== false) {
                that.validationConfirmPass($field, selectorMain, errorText);
            }
        });
        that.addToValidationField(TEXT_SELECTOR, selectorAdditional);
        $field.blur(function () {
            var $that = $(this);
            $that.attr('mark', '');
            that.validationConfirmPass($field, selectorMain, errorText);
            $that.unbind('blur');
            $that.on('change keyup', function () {
                that.validationConfirmPass($field, selectorMain, errorText);
            });
        });
    };

    FormValidator.prototype.gRecaptchaCheck = function () {
        this.grecaptcha = true;
    };

    FormValidator.prototype.validationRule = function (field, empty, count, pattern, message, doubleRow) {
        var valid = true;
        if (empty && !this.checkNotEmpty(field)) {
            valid = false;
        }
        if (count && valid && !this.checkQuantitySymbols(field, count)) {
            valid = false;
        }
        if (pattern && valid && !this.checkPattern(field, pattern, message, doubleRow)) {
            valid = false;
        }
        this.setStyle(field, valid);

        this.checkButtonSubmit();
    };

    FormValidator.prototype.validationRuleLogin = function (field, empty, count, pattern) {
        var valid = true;
        if (empty && !this.checkNotEmpty(field)) {
            valid = false;
        }
        if (count && valid && !this.checkQuantitySymbols(field, count)) {
            valid = false;
        }
        if (pattern && valid && !this.checkPattern(field, pattern)) {
            valid = false;
        }
        this.setStyleLogin(field, valid);

        this.checkButtonLogin(valid);
    };


    FormValidator.prototype.addListenerPhone = function (selector, empty, pattern, message, mobilePhoneRegExpSize) {
        var that = this,
            $field = $(selector);
        if ($field.length === 0) {
            return;
        }
        that.addToValidationField(TEXT_SELECTOR, selector);
        if ($field.val() !== '') {
            $field.attr('mark', '');
            that.validationRulePhone($field, empty, pattern, message, mobilePhoneRegExpSize);
        }
        $field.blur(function () {
            var $this = $(this);
            $this.attr('mark', '');
            that.validationRulePhone($field, empty, pattern, message, mobilePhoneRegExpSize);
            $this.unbind('blur', false);
            $this.on('change keyup', function () {
                that.validationRulePhone($field, empty, pattern, message, mobilePhoneRegExpSize);
            });
        });
    };

    FormValidator.prototype.validationRulePhone = function (field, empty, pattern, message, mobilePhoneRegExpSize) {
        var valid = true;
        if (empty && !this.checkNotEmpty(field)) {
            valid = false;
        }
        if (valid && !this.checkQuantitySymbolsEquals(field, mobilePhoneRegExpSize)) {
            valid = false;
        }
        if (pattern && valid && !this.checkPattern(field, pattern, message, false)) {
            valid = false;
        }
        this.setStyle(field, valid);
        this.checkButtonSubmit();
    };

    FormValidator.prototype.checkQuantitySymbolsEquals = function (input, mobilePhoneRegExpSize) {
        var mark = input.attr('mark'),
            value = input.val(),
            regExpSize = mobilePhoneRegExpSize ? mobilePhoneRegExpSize : this.mobilePhoneRegExpSize;
        if (typeof mark !== typeof undefined && mark !== false) {
            if (value && !value.match(regExpSize)) {
                input.parent('div').find('span').text(I18nUtils.get('feedback.phone-error'));
                return false;
            } else {
                return true;
            }
        }
        return false;
    };

    FormValidator.prototype.validationConfirmPass = function (field, selectorMain, message) {
        var valid = true;
        if (!this.checkNotEmpty(field)) {
            valid = false;
        }
        var mark = $(selectorMain).attr('mark');
        if (valid && $(selectorMain).val() && typeof mark !== typeof undefined && mark !== false
            && field.val() !== $(selectorMain).val()) {
            this.checkPattern(field, '^' + $(selectorMain).val() + '$', message);
            valid = false;
        }
        this.setStyle(field, valid);

        this.checkButtonSubmit();
    };

    FormValidator.prototype.addListenerSelect = function (selector) {
        var prevValue,
            that = this,
            $select = $(selector);
        if (_.isUndefined($select.get(0))) {
            return;
        }
        that.addToValidationField(SELECT_SELECTOR, selector);
        $select.on('change', function () {
            var value = $select.val(),
                valid;
            var find = $select.parent('div').find('.help-block');
            if (prevValue) {
                if (!value || _.isEmpty(value.trim(' '))) {
                    find.text(I18nUtils.get('feedback.obligatory-field'));
                    valid = false;
                } else {
                    valid = true;
                }
            } else {
                if (value && !_.isEmpty(value.trim(' '))) {
                    prevValue = value;
                    valid = true;
                }
            }

            that.setStyle(find, valid);

            that.checkButtonSubmit();
        });
    };

    FormValidator.prototype.addListenerCheckbox = function (selector) {
        var that = this,
            $selector = $(selector);
        if (_.isUndefined($selector.get(0))) {
            return;
        }
        that.addToValidationField(CHECKBOX_SELECTOR, selector);
        $selector.on('change keyup', function () {
            that.checkButtonSubmit();
        });
    };

    FormValidator.prototype.isImageValid = function (fileData) {
        var imageExtends = ['gif', 'jpg', 'png', 'bmp', 'tga', 'jpeg'],
            maxImageSize = 2,
            result = {};
        result.error = '';
        result.success = true;
        if ($.inArray(fileData[0].name.split('.').pop().toLowerCase(), imageExtends) === -1) {
            result.success = false;
            result.error = I18nUtils.get('feedback.right-extends') + ' ' + imageExtends.join(', ');
        }
        if (fileData[0].size > maxImageSize * 1024 * 1024) {
            result.success = false;
            result.error = I18nUtils.get('feedback.file size {0} more than {1} mb', [fileData[0].name, maxImageSize]);
        }
        return result;
    };

    FormValidator.prototype.isFileValid = function (fileData) {
        var result = {};
        result.error = '';
        result.success = true;

        if (fileData.name && fileData.name.length > this.maxFileNameLength) {
            result.success = false;
            result.error = I18nUtils.get('feedback.more than {0} symbols', this.maxFileNameLength);
        }
        var name = fileData.name ? fileData.name : fileData[0].name;
        if (name && $.inArray(name.split('.').pop().toLowerCase(), this.fileExtends) === -1) {
            result.success = false;
            result.error = I18nUtils.get('feedback.right-extends') + ' ' + this.fileExtends.join(', ');
        }
        if (fileData.size > this.maxFileSize * 1024 * 1024) {
            result.success = false;
            result.error = I18nUtils.get('feedback.file size {0} more than {1} mb', [fileData.name, this.maxFileSize]);
        }
        return result;
    };

    FormValidator.prototype.setSubmitSelector = function (selector) {
        this.submitSelector = selector;
    };

    FormValidator.prototype.setSubmitSelectorChecker = function () {
        if (this.validationField[TEXT_SELECTOR]) {
            this.validationField[TEXT_SELECTOR].forEach(function (selector) {
                $(selector).trigger('blur');
            });
        }
        if (this.validationField[SELECT_SELECTOR]) {
            this.validationField[SELECT_SELECTOR].forEach(function (selector) {
                // TODO
            });
        }
    };
    function deleteEmptyFiles(selUplFiles) {
        var fileUploader = $('input[data-name=' + selUplFiles + ']');
        if (fileUploader.length > 0 && !fileUploader.last().val().trim()) {
            fileUploader.last().remove();
        }
    }
    FormValidator.prototype.setSubmitSelectorAndListener = function (selector, onDone, onFail, serialize, before) {
        this.submitSelector = selector;
        var that = this,
            $form = $('.custom-form form');
        $form.submit(function (event) {
            event.preventDefault();
        });
        $(selector).on('click', function () {
            deleteEmptyFiles("fileUploader");
            that.setSubmitSelectorChecker();
            if (!that.checkButtonSubmit()) {
                return;
            }
            showLoadingCircle();
            var options = {
                type: $form.attr('method'),
                url: $form.attr('action')
            };
            if (serialize) {
                options['data'] = $form.serialize();
            } else {
                options['cache'] = false;
                options['contentType'] = false;
                options['processData'] = false;
                options['data'] = new FormData($form[0]);
            }
            if (before) {
                before(options);
            }

            $.ajax(options)
                .done(function (data) {
                    hideLoadingCircle();
                    $('body,html').scrollTop(0);
                    onDone(data);
                }).fail(function (error) {
                hideLoadingCircle();
                $('body,html').scrollTop(0);
                onFail(error);
            });

            $('.custom-form input[type="password"]').each(function () {
                $(this).val('');
                that.removeStyle(this);
            });
            that.checkButtonSubmit();
        });
    };

    FormValidator.prototype.notDisableSubmit = function () {
        this.notDisableSubmitParam = true;
    };

    FormValidator.prototype.checkButtonLogin = function () {
        var valid = true,
            $iframe = $('.oauth-iframe'),
            iframeDoc = $iframe.contentWindow.document,
            $iframeDoc = $(iframeDoc);
        if (this.validationField[TEXT_SELECTOR]) {
            this.validationField[TEXT_SELECTOR].forEach(function (selector) {
                var $parent = $(selector).parent();
                if ((valid && $parent.hasClass('has-error')) || (valid && !$parent.hasClass('has-success'))) {
                    valid = false;
                }
            });
        }
        if (!this.notDisableSubmitParam && valid) {
            $iframeDoc.find('#login').click(function() {
                $iframeDoc.find('body').hide();
            });
        }

        return valid;
    };

    FormValidator.prototype.checkButtonSubmit = function () {
        var valid = true;
        if (this.validationField[TEXT_SELECTOR]) {
            this.validationField[TEXT_SELECTOR].forEach(function (selector) {
                if (valid && $(selector).parent().hasClass('has-error')) {
                    valid = false;
                }
                if (valid && !$(selector).parent().hasClass('has-success')) {
                    valid = false;
                }
            });
        }
        if (this.validationField[SELECT_SELECTOR]) {
            this.validationField[SELECT_SELECTOR].forEach(function (selector) {
                if (valid && !$(selector).parent().hasClass('has-success')) {
                    valid = false;
                }
            });
        }
        if (this.validationField[CHECKBOX_SELECTOR]) {
            this.validationField[CHECKBOX_SELECTOR].forEach(function (selector) {
                if (valid && !$(selector).is(':checked')) {
                    valid = false;
                }
            });
        }
        if (valid && this.grecaptcha && !$(CAPTCHA_SELECTOR).val().length) {
            valid = false;
        }
        if ($(PASS_SELECTOR).val() !== $(CONFIRM_SELECTOR).val()) {
            valid = false;
        }
        if ($(EMAIL_SELECTOR).val() !== $(EMAIL_CONFIRM_SELECTOR).val()) {
            valid = false;
        }
        if (!this.notDisableSubmitParam) {
            if (valid) {
                if ($(this.submitSelector).hasClass('disabled')) {
                    $(this.submitSelector).removeClass('disabled');
                }
                $(this.submitSelector).removeAttr('disabled');
            } else {
                $(this.submitSelector).addClass('disabled');
                $(this.submitSelector).attr('disabled', 'disabled');
            }
        }

        return valid;
    };

    return FormValidator;
}());
